const cloudinary = require("../cloudinary");
const User = require("../../database/userdb/UserSchema");
const Entries = require("../../database/enteries/EntrySchema");
const Suppliers = require("../../database/suppliers/SupplierSchema");
const Agents = require("../../database/agents/AgentSchema");
const Candidate = require("../../database/candidate/CandidateSchema");
const AzadSupplier = require("../../database/azadSuppliers/AzadSupplierSchema");
const AzadAgents = require("../../database/azadAgent/AzadAgentSchema");
const AzadCandidate = require("../../database/azadCandidates/AzadCandidateSchema");

const TicketSuppliers = require("../../database/ticketSuppliers/TicketSupplierSchema");
const TicketAgents = require("../../database/ticketAgent/TicketAgentSchema");
const TicketCandidate = require("../../database/ticketCandidates/TicketCandidateSchema");

const VisitSuppliers = require("../../database/visitSuppliers/VisitSupplierSchema");
const VisitAgents = require("../../database/visitAgent/VisitAgentSchema");
const VisitCandidate = require("../../database/visitCandidates/VisitCandidateSchema");

const Protector = require("../../database/protector/ProtectorSchema");
const Reminders = require('../../database/reminders/RemindersModel')
const mongoose = require("mongoose");

const Companies = require('../../database/setting/Company_Schema')
const Trades = require('../../database/setting/Trade_Schmea')
const EntryMode = require('../../database/setting/Entry_Mode_Schema')
const FinalStatus = require('../../database/setting/Final_Status_Schema')

const AVPP = require('../../database/setting/AVPP_Schema')
const AVSP = require('../../database/setting/AVSP_Schema')

const TPP = require('../../database/setting/TPP_Schema')
const TSP = require('../../database/setting/TSP_Schema')
const VIPP = require('../../database/setting/VIPP_Schema')
const VISP = require('../../database/setting/VISP_Schema')
const VPP = require('../../database/setting/VPP_Schema')
const VSP = require('../../database/setting/VSP_Schema')
const ProtectorParties=require('../../database/setting/Protector_Schema')

const moment = require("moment");
// Adding a new Single Entry Controller
const addEntry = async (req, res) => {
  try {
    const userId = req.user._id;

    const user = await User.findById(userId);
    if (!user) {
      res.status(404).json({ message: "User not found" });
    }

    if (user) {
      let {
        reference_Out,
        reference_In,
        name,
        pp_No,
        trade,
        company,
        contact,
        country,
        flight_Date,
        final_Status,
        remarks,
        entry_Mode,
        reference_Out_Name,
        visa_Sales_Rate_PKR,
        visa_Sale_Rate_Oth_Cur,
        cur_Country_One,
        reference_In_Name,
        visa_Purchase_Rate_PKR,
        visa_Purchase_Rate_Oth_Cur,
        cur_Country_Two,
        picture,
        visit_Sales_PKR,
        visit_Sales_Cur,
        visit_Purchase_Rate_PKR,
        visit_Purchase_Cur,
        visit_Reference_In_Name,
        visit_Reference_Out_Name,
        visit_Section_Picture,
        ticket_Sales_PKR,
        ticket_Sales_Cur,
        ticket_Purchase_PKR,
        ticket_Purchase_Cur,
        ticket_Reference_In_Name,
        ticket_Reference_Out_Name,
        ticket_Section_Picture,
        azad_Visa_Sales_PKR,
        azad_Visa_Sales_Cur,
        azad_Visa_Purchase_PKR,
        azad_Visa_Purchase_Cur,
        azad_Visa_Reference_In_Name,
        azad_Visa_Reference_Out_Name,
        azad_Visa_Section_Picture,
        protector_Price_In,
        protector_Price_In_Oth_Cur,
        protector_Reference_In_Name,
        protector_Reference_In,
        protector_Price_Out,
        visit_Reference_In,
        visit_Reference_Out,
        ticket_Reference_In,
        ticket_Reference_Out,
        azad_Visa_Reference_In,
        azad_Visa_Reference_Out,
        visit_Sales_Rate_Oth_Curr,
        visit_Purchase_Rate_Oth_Cur,
        ticket_Sales_Rate_Oth_Cur,
        ticket_Purchase_Rate_Oth_Cur,
        azad_Visa_Sales_Rate_Oth_Cur,
        azad_Visa_Purchase_Rate_Oth_Cur,
        section1,
        section2,
        section3,
      } = req.body;

    
    

      // Ensure flight_Date is set to "No Fly" when it's an empty string or undefined
      flight_Date =
        flight_Date !== undefined && flight_Date !== ""
          ? flight_Date
          : "No Fly";

      if (reference_Out &&reference_Out.trim().toLowerCase().includes('candidate')&& reference_Out_Name === "") {
        reference_Out_Name = name;
      }
      if (reference_In &&reference_In.trim().toLowerCase().includes('candidate')&& reference_In_Name === "") {
        reference_In_Name = name;
      }
      if (section1 === 1) {
        if (visit_Reference_In &&visit_Reference_In.trim().toLowerCase().includes('candidate')&& visit_Reference_In_Name === "") {
          visit_Reference_In_Name = name;
        }
        if (visit_Reference_Out&&visit_Reference_Out.trim().toLowerCase().includes('candidate') && visit_Reference_Out_Name === "") {
          visit_Reference_Out_Name = name;
        }
      }
      if (section2 === 1) {
        if (ticket_Reference_In&&ticket_Reference_In.trim().toLowerCase().includes('candidate') && ticket_Reference_In_Name === "") {
          ticket_Reference_In_Name = name;
        }
        if (ticket_Reference_Out&&ticket_Reference_Out.trim().toLowerCase().includes('candidate') && ticket_Reference_Out_Name === "") {
          ticket_Reference_Out_Name = name;
        }
      }
      if (section3 === 1) {
        if (azad_Visa_Reference_In &&azad_Visa_Reference_In.trim().toLowerCase().includes('candidate') &&  azad_Visa_Reference_In_Name === "") {
          azad_Visa_Reference_In_Name = name;
        }
        if (azad_Visa_Reference_Out &&azad_Visa_Reference_Out.trim().toLowerCase().includes('candidate')&& azad_Visa_Reference_Out_Name === "") {
          azad_Visa_Reference_Out_Name = name;
        }
      }

      let sendResponse = true;
      const existingPPNO = await Entries.findOne({
        pp_No: new RegExp(`^${pp_No}$`, 'i')
      });

      if (existingPPNO) {
    
        res
          .status(404)
          .json({
            message:
              "Entry with the same Passport Number already exists",
          });
        sendResponse = false;
      }
      if (!existingPPNO) {
        
        if (final_Status.trim().toLowerCase() === 'offer letter' || final_Status.trim().toLowerCase() === 'offer latter') {
          const newReminder = new Reminders({
            type: "Offer Letter",
            content: `${name}'s Final Status is updated to Offer Letter.`,
            date: new Date().toISOString().split("T")[0]
          });
          await newReminder.save();
        }
        
        if (final_Status.trim().toLowerCase() === 'e number' || final_Status.trim().toLowerCase() === 'e_number') {
  
          const newReminder = new Reminders({
            type: "E Number",
            content: `${name}'s Final Status is updated to E Number.`,
            date: new Date().toISOString().split("T")[0]
          });
          await newReminder.save();
        }
        
        if (final_Status.trim().toLowerCase() === 'qvc' || final_Status.trim().toLowerCase() === 'q_v_c') {
          const newReminder = new Reminders({
            type: "QVC",
            content: `${name}'s Final Status is updated to QVC.`,
            date: new Date().toISOString().split("T")[0]
          });
          await newReminder.save();
        }
        
        if (final_Status.trim().toLowerCase() === 'visa issued' || final_Status.trim().toLowerCase() === 'visa_issued' || final_Status.trim().toLowerCase() === 'vissa issued' || final_Status.trim().toLowerCase() === 'vissa_issued') {
          const newReminder = new Reminders({
            type: "Visa Issued",
            content: `${name}'s Final Status is updated to Visa Issued.`,
            date: new Date().toISOString().split("T")[0]
          });
          await newReminder.save();
        }
        
        if (final_Status.trim().toLowerCase() === 'ptn' || final_Status.trim().toLowerCase() === 'p_t_n') {
          const newReminder = new Reminders({
            type: "PTN",
            content: `${name}'s Final Status is updated to PTN.`,
            date: new Date().toISOString().split("T")[0]
          });
          await newReminder.save();
        }
        
        if (final_Status.trim().toLowerCase() === 'ticket' || final_Status.trim().toLowerCase() === 'tiket') {
          const newReminder = new Reminders({
            type: "Ticket",
            content: `${name}'s Final Status is updated to Ticket.`,
            date: new Date().toISOString().split("T")[0]
          });
          await newReminder.save();
        }

        // uploading image to cloudinary
        // Uploading main Picture
        if (picture) {
          try {
            const uploadPicture = await cloudinary.uploader.upload(picture, {
              upload_preset: "rozgar",
            });

            if (!uploadPicture) {
              res
                .status(500)
                .json({ message: "Error uploading the main picture" });
              return;
            }

            picture = uploadPicture.secure_url;
          } catch (uploadError) {
            console.error(uploadError);
            res
              .status(500)
              .json({ message: "Error uploading the main picture" });
            return;
          }
        }

        // Uploading Visit Section Picture
        if (visit_Section_Picture) {
          try {
            const uploadPicture = await cloudinary.uploader.upload(
              visit_Section_Picture,
              {
                upload_preset: "rozgar",
              }
            );

            if (!uploadPicture) {
              res
                .status(500)
                .json({ message: "Error uploading Visit Section Picture" });
              return;
            }

            visit_Section_Picture = uploadPicture.secure_url;
          } catch (uploadError) {
            console.error(uploadError);
            res
              .status(500)
              .json({ message: "Error uploading Visit Section Picture" });
            return;
          }
        }

        // Uploading Ticket Section Picture
        if (ticket_Section_Picture) {
          try {
            const uploadPicture = await cloudinary.uploader.upload(
              ticket_Section_Picture,
              {
                upload_preset: "rozgar",
              }
            );

            if (!uploadPicture) {
              res
                .status(500)
                .json({ message: "Error uploading Ticket Section Picture" });
              return;
            }

            ticket_Section_Picture = uploadPicture.secure_url;
          } catch (uploadError) {
            console.error(uploadError);
            res
              .status(500)
              .json({ message: "Error uploading Ticket Section Picture" });
            return;
          }
        }

        // Uploading Azad Visa Section Picture
        if (azad_Visa_Section_Picture) {
          try {
            const uploadPicture = await cloudinary.uploader.upload(
              azad_Visa_Section_Picture,
              {
                upload_preset: "rozgar",
              }
            );

            if (!uploadPicture) {
              res
                .status(500)
                .json({ message: "Error uploading Azad Visa Section picture" });
              return;
            }

            azad_Visa_Section_Picture = uploadPicture.secure_url;
          } catch (uploadError) {
            console.error(uploadError);
            res
              .status(500)
              .json({ message: "Error uploading Azad Visa Section picture" });
            return;
          }
        }

        const newEntry = new Entries({
          entry_Date: new Date().toISOString().split("T")[0],
          reference_Out,
          reference_In,
          name,
          pp_No,
          trade,
          company,
          contact,
          country,
          flight_Date,
          final_Status,
          remarks,
          entry_Mode,
          reference_Out_Name,
          visa_Sales_Rate_PKR,
          visa_Sale_Rate_Oth_Cur,
          cur_Country_One,
          reference_In_Name,
          visa_Purchase_Rate_PKR,
          visa_Purchase_Rate_Oth_Cur,
          cur_Country_Two,
          picture,
          visit_Sales_PKR,
          visit_Sales_Cur,
          visit_Purchase_Rate_PKR,
          visit_Purchase_Cur,
          visit_Reference_In_Name,
          visit_Reference_Out_Name,
          visit_Section_Picture,
          ticket_Sales_PKR,
          ticket_Sales_Cur,
          ticket_Purchase_PKR,
          ticket_Purchase_Cur,
          ticket_Reference_In_Name,
          ticket_Reference_Out_Name,
          ticket_Section_Picture,
          azad_Visa_Sales_PKR,
          azad_Visa_Sales_Cur,
          azad_Visa_Purchase_PKR,
          azad_Visa_Purchase_Cur,
          azad_Visa_Reference_In_Name,
          azad_Visa_Reference_Out_Name,
          azad_Visa_Section_Picture,
          protector_Price_In,
          protector_Price_In_Oth_Cur,
          protector_Reference_In_Name,
          protector_Reference_In,
          protector_Price_Out,
          visit_Reference_In,
          visit_Reference_Out,
          ticket_Reference_In,
          ticket_Reference_Out,
          azad_Visa_Reference_In,
          azad_Visa_Reference_Out,
          visit_Sales_Rate_Oth_Curr,
          visit_Purchase_Rate_Oth_Cur,
          ticket_Sales_Rate_Oth_Cur,
          ticket_Purchase_Rate_Oth_Cur,
          azad_Visa_Sales_Rate_Oth_Cur,
          azad_Visa_Purchase_Rate_Oth_Cur,
        });

        let paymentInfo = {};

        //Handling Suppliers
        const suppliers=await Suppliers.find({})
        //Saving the Entry Details to the Suppliers Payment In Section if reference_Out==="Supplier"
        if (
          reference_Out === "SUPPLIERS" ||
          reference_Out === "SUPPLIER" ||
          reference_Out === "Suppliers" ||
          reference_Out === "suppliers" ||
          reference_Out === "Supplier" ||
          reference_Out === "supplier"
        ) {
          try {
            let existingPaymentInSupplier;
            // Check if the supplier with the given name exists
            for(const supplier of suppliers){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInSupplier=supplier
                  break
                }
              }
             
            }
           
            if (!existingPaymentInSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentInSupplier = new Suppliers({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: reference_Out_Name,
                  total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Balance: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,

                  total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  curr_Country: cur_Country_One,
                opening:0,
                 
                  closing:0,
                  persons: [
                    {
                      name,
                      pp_No,
                      picture:picture,
                      entry_Mode,
                      contact,
                      country,
                      trade,
                      visa_Price_In_PKR: visa_Sales_Rate_PKR
                        ? visa_Sales_Rate_PKR
                        : 0,
                      remaining_Price: visa_Sales_Rate_PKR
                        ? visa_Sales_Rate_PKR
                        : 0,
                      visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                        ? visa_Sale_Rate_Oth_Cur
                        : 0,
                      remaining_Curr: visa_Sale_Rate_Oth_Cur
                        ? visa_Sale_Rate_Oth_Cur
                        : 0,

                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInSupplier.save();
              paymentInfo.newPaymentInSupplier = newPaymentInSupplier;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
               
                existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
                existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
                existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
                existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
                  if(existingPaymentInSupplier.payment_In_Schema.status.toLowerCase()==='closed'){
                    existingPaymentInSupplier.payment_In_Schema.status='Open'
                    existingPaymentInSupplier.payment_In_Schema.opening+=existingPaymentInSupplier.payment_In_Schema.closing+visa_Sales_Rate_PKR
                  }
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInSupplier.payment_In_Schema.persons.push({
                  name,
                  pp_No,
                  picture:picture,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                });

                const newStatus = existingPaymentInSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInSupplier.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInSupplier.updateOne({
              
                  $inc: {
                    "payment_In_Schema.total_Visa_Price_In_PKR":
                      visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                    "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                      ? visa_Sales_Rate_PKR
                      : 0,
                    "payment_In_Schema.total_Visa_Price_In_Curr":
                      visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                    "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                      ? visa_Sale_Rate_Oth_Cur
                      : 0,
                     
                  },
                  
                })
              }

              await existingPaymentInSupplier.save();
              paymentInfo.existingPaymentInSupplier = existingPaymentInSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Suppliers Payment Out Section if reference_In==="Supplier"
        if (
          reference_In === "SUPPLIERS" ||
          reference_In === "SUPPLIER" ||
          reference_In === "Suppliers" ||
          reference_In === "suppliers" ||
          reference_In === "Supplier" ||
          reference_In === "supplier"
        ) {
          try {
            let existingPaymentOutSupplier;
            for(const supplier of suppliers){
              if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.supplierName.toLowerCase()===reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                existingPaymentOutSupplier=supplier
                break
              }
            }
           

            if (!existingPaymentOutSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentOutSupplier = new Suppliers({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: reference_In_Name,
                  total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Balance: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      picture:picture,
                      pp_No,
                      entry_Mode,
                      contact,
                      trade,
                      country,
                      visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                        ? visa_Purchase_Rate_PKR
                        : 0,
                      remaining_Price: visa_Purchase_Rate_PKR
                        ? visa_Purchase_Rate_PKR
                        : 0,

                      visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,
                      remaining_Curr: visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,

                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutSupplier.save();
              paymentInfo.newPaymentOutSupplier = newPaymentOutSupplier;
            } else {
              const existingPersonIndex =
                existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
                existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

                existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
                existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
                  
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutSupplier.payment_Out_Schema.persons.push({
                  name,
                  pp_No,
                  picture:picture,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                });

                const newStatus = existingPaymentOutSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutSupplier.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_In_Price_PKR and other fields using $inc
                await existingPaymentOutSupplier.updateOne({
                  $inc: {
                    "payment_Out_Schema.total_Visa_Price_Out_PKR":
                      visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,

                    "payment_Out_Schema.total_Visa_Price_Out_Curr":
                      visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,
                     
                  },
                 
                });
              }

              await existingPaymentOutSupplier.save();
              paymentInfo.existingPaymentOutSupplier =
                existingPaymentOutSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Handling Agents
        const agents=await Agents.find({})
        //Saving the Entry Details to the Agents Payment In Section if reference_Out==="Agents"
        if (
          reference_Out === "AGENTS" ||
          reference_Out === "AGENT" ||
          reference_Out === "Agents" ||
          reference_Out === "agents" ||
          reference_Out === "Agent" ||
          reference_Out === "agent"
        ) {
          try {
            let existingPaymentInAgent;
            for(const agent of agents){
              if(agent.payment_In_Schema && agent.payment_In_Schema.supplierName.toLowerCase()===reference_Out_Name.toLowerCase()&& agent.payment_In_Schema.status.toLowerCase()==='open'){
                existingPaymentInAgent=agent
                break
              }
            }
           

            if (!existingPaymentInAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentInAgent = new Agents({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: reference_Out_Name,
                  total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Balance: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,

                  total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  curr_Country: cur_Country_One,
                  opening:0,
                  
                  closing:0,
                  persons: [
                    {
                      name,
                      pp_No,
                      picture:picture,
                      entry_Mode,
                      contact,
                      country,
                      trade,
                      visa_Price_In_PKR: visa_Sales_Rate_PKR
                        ? visa_Sales_Rate_PKR
                        : 0,
                      remaining_Price: visa_Sales_Rate_PKR
                        ? visa_Sales_Rate_PKR
                        : 0,
                      visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                        ? visa_Sale_Rate_Oth_Cur
                        : 0,
                      remaining_Curr: visa_Sale_Rate_Oth_Cur
                        ? visa_Sale_Rate_Oth_Cur
                        : 0,

                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInAgent.save();
              paymentInfo.newPaymentInAgent = newPaymentInAgent;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInAgent.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentInAgent.payment_In_Schema.total_Visa_Price_In_PKR +=
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
                existingPaymentInAgent.payment_In_Schema.remaining_Balance +=
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;

                existingPaymentInAgent.payment_In_Schema.total_Visa_Price_In_Curr +=
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
                existingPaymentInAgent.payment_In_Schema.remaining_Curr +=
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInAgent.payment_In_Schema.persons.push({
                  name,
                  pp_No,
                  picture:picture,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                });

                const newStatus = existingPaymentInAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAgent.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInAgent.updateOne({
                
                  $inc: {
                    "payment_In_Schema.total_Visa_Price_In_PKR":
                      visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                    "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                      ? visa_Sales_Rate_PKR
                      : 0,

                    "payment_In_Schema.total_Visa_Price_In_Curr":
                      visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                    "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                      ? visa_Sale_Rate_Oth_Cur
                      : 0,
                  },
              
                });
              }

              await existingPaymentInAgent.save();
              paymentInfo.existingPaymentInAgent = existingPaymentInAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Agents Payment Out Section if reference_In==="Agents"
        if (
          reference_In === "AGENTS" ||
          reference_In === "AGENT" ||
          reference_In === "Agents" ||
          reference_In === "agents" ||
          reference_In === "agents" ||
          reference_In === "agent"
        ) {
          try {
            let existingPaymentOutAgent
            for(const agent of agents){
              if(agent.payment_Out_Schema && agent.payment_Out_Schema.supplierName.toLowerCase()===reference_In_Name.toLowerCase()&& agent.payment_Out_Schema.status.toLowerCase()==='open'){
                existingPaymentOutAgent=agent
                break
              }
            }
      

            if (!existingPaymentOutAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentOutAgent = new Agents({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: reference_In_Name,
                  total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Balance: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      pp_No,
                      picture:picture,
                      entry_Mode,
                      contact,
                      trade,
                      country,
                      visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                        ? visa_Purchase_Rate_PKR
                        : 0,
                      remaining_Price: visa_Purchase_Rate_PKR
                        ? visa_Purchase_Rate_PKR
                        : 0,

                      visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,
                      remaining_Curr: visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,

                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutAgent.save();
              paymentInfo.newPaymentOutAgent = newPaymentOutAgent;
            } else {
              const existingPersonIndex =
                existingPaymentOutAgent.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                existingPaymentOutAgent.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
                existingPaymentOutAgent.payment_Out_Schema.remaining_Balance +=
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

                existingPaymentOutAgent.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
                existingPaymentOutAgent.payment_Out_Schema.remaining_Curr +=
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutAgent.payment_Out_Schema.persons.push({
                  name,
                  pp_No,
                  picture:picture,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                });

                const newStatus = existingPaymentOutAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAgent.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_In_Price_PKR and other fields using $inc
                await existingPaymentOutAgent.updateOne({
                 
                  $inc: {
                    "payment_Out_Schema.total_Visa_Price_Out_PKR":
                      visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,

                    "payment_Out_Schema.total_Visa_Price_Out_Curr":
                      visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      visa_Purchase_Rate_Oth_Cur
                        ? visa_Purchase_Rate_Oth_Cur
                        : 0,
                        

                  },
                
                 
                });
              }

              await existingPaymentOutAgent.save();
              paymentInfo.existingPaymentOutAgent = existingPaymentOutAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Handling Candidates

        //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
        if (
          reference_Out === "CANDIDATES" ||
          reference_Out === "CANDIDATE" ||
          reference_Out === "Candidates" ||
          reference_Out === "candidates" ||
          reference_Out === "Candidate" ||
          reference_Out === "candidate"
        ) {
          try {
            // Check if the supplier with the given name and entry mode exists
            const existingPaymentInCandidate = await Candidate.findOne({
              "payment_In_Schema.supplierName": name,
              
              "payment_In_Schema.pp_No": pp_No,
            });

            if (!existingPaymentInCandidate) {
              // If the supplier does not exist with the same entry mode, create a new one
              const newPaymentInCandidate = new Candidate({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  picture:picture,
                  total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Balance: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,

                  total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_One,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  country: country,
                  trade: trade,
                  contact: contact,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              });

              await newPaymentInCandidate.save();
              paymentInfo.newPaymentInCandidate = newPaymentInCandidate;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
        if (
          reference_In === "CANDIDATES" ||
          reference_In === "CANDIDATE" ||
          reference_In === "Candidates" ||
          reference_In === "Candidate" ||
          reference_In === "candidate" ||
          reference_In === "candidates"
        ) {
          try {
            // Check if the supplier with the given name exists
            const existingPaymentOutCandidate = await Candidate.findOne({
              "payment_Out_Schema.supplierName": name,
              
              "payment_Out_Schema.pp_No": pp_No,
            });

            if (!existingPaymentOutCandidate) {
              // If the supplier does not exist, create a new one
              const newPaymentOutCandidate = new Candidate({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  picture:picture,
                  total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Balance: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  trade: trade,
                  country: country,
                  contact: contact,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                },
              });

              await newPaymentOutCandidate.save();
              paymentInfo.newPaymentOutCandidate = newPaymentOutCandidate;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Handling Azad Visa Suppliers
        const azadSuppliers= await AzadSupplier.find({})
        const azadAgents= await AzadAgents.find({})

        //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Supplier
        if (
          azad_Visa_Reference_Out === "SUPPLIERS" ||
          azad_Visa_Reference_Out === "SUPPLIER" ||
          azad_Visa_Reference_Out === "Supplier" ||
          azad_Visa_Reference_Out === "supplier" ||
          azad_Visa_Reference_Out === "Suppliers" ||
          azad_Visa_Reference_Out === "suppliers"
        ) {
          try {
            let existingPaymentInAzadSupplier
            for (const supplier of azadSuppliers){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema && supplier.payment_In_Schema.supplierName.toLowerCase()===azad_Visa_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInAzadSupplier = supplier;
                  break
                }
              }
             }
          
            if (!existingPaymentInAzadSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentInAzadSupplier = new AzadSupplier({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: azad_Visa_Reference_Out_Name,
                  total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  remaining_Balance: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,

                  total_Azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_One,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      picture:azad_Visa_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                        ? azad_Visa_Sales_PKR
                        : 0,
                      azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                        ? azad_Visa_Sales_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInAzadSupplier.save();
              paymentInfo.newPaymentInAzadSupplier = newPaymentInAzadSupplier;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInAzadSupplier.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentInAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
                existingPaymentInAzadSupplier.payment_In_Schema.remaining_Balance +=
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

                existingPaymentInAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0;
                existingPaymentInAzadSupplier.payment_In_Schema.remaining_Curr +=
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInAzadSupplier.payment_In_Schema.persons.push(
                  {
                    name,
                    picture:azad_Visa_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    country,
                    contact,
                    azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                      ? azad_Visa_Sales_PKR
                      : 0,
                    azad_Visa_Price_In_Curr: azad_Visa_Sales_Cur
                      ? azad_Visa_Sales_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );

                const newStatus = existingPaymentInAzadSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAzadSupplier.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInAzadSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInAzadSupplier.updateOne({
                
                  $inc: {
                    "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                      azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                    "payment_In_Schema.remaining_Balance":
                      azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                    "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                      azad_Visa_Sales_Rate_Oth_Cur
                        ? azad_Visa_Sales_Rate_Oth_Cur
                        : 0,
                    "payment_In_Schema.remaining_Curr":
                      azad_Visa_Sales_Rate_Oth_Cur
                        ? azad_Visa_Sales_Rate_Oth_Cur
                        : 0,
                        
                  },
                 
                });
              }

              await existingPaymentInAzadSupplier.save();
              paymentInfo.existingPaymentInAzadSupplier =
                existingPaymentInAzadSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
        if (
          azad_Visa_Reference_In === "SUPPLIERS" ||
          azad_Visa_Reference_In === "SUPPLIER" ||
          azad_Visa_Reference_In === "Supplier" ||
          azad_Visa_Reference_In === "supplier" ||
          azad_Visa_Reference_In === "Suppliers" ||
          azad_Visa_Reference_In === "suppliers"
        ) {
          try {
            let existingPaymentOutAzadSupplier
            for (const supplier of azadSuppliers){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===azad_Visa_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutAzadSupplier = supplier;
                  break
                }
              }
             }
           

            if (!existingPaymentOutAzadSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentOutAzadSupplier = new AzadSupplier({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: azad_Visa_Reference_In_Name,
                  total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  remaining_Balance: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,

                  total_Azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      picture:azad_Visa_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                        ? azad_Visa_Purchase_PKR
                        : 0,
                      azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                        ? azad_Visa_Purchase_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutAzadSupplier.save();
              paymentInfo.newPaymentOutAzadSupplier = newPaymentOutAzadSupplier;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
                existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

                existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0;
                existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
                  {
                    name,
                    picture:azad_Visa_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    country,
                    contact,
                    azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                      ? azad_Visa_Purchase_PKR
                      : 0,
                    azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );
                const newStatus = existingPaymentOutAzadSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAzadSupplier.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutAzadSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentOutAzadSupplier.updateOne({
                
                  $inc: {
                    "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                      azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                    "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                      azad_Visa_Purchase_Rate_Oth_Cur
                        ? azad_Visa_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      azad_Visa_Purchase_Rate_Oth_Cur
                        ? azad_Visa_Purchase_Rate_Oth_Cur
                        : 0,
                       
                  },
                  
                });
              }

              await existingPaymentOutAzadSupplier.save();
              paymentInfo.existingPaymentOutAzadSupplier =
                existingPaymentOutAzadSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
        if (
          azad_Visa_Reference_Out === "AGENTS" ||
          azad_Visa_Reference_Out === "AGENT" ||
          azad_Visa_Reference_Out === "Agents" ||
          azad_Visa_Reference_Out === "agent" ||
          azad_Visa_Reference_Out === "Agent" ||
          azad_Visa_Reference_Out === "agents"
        ) {
          try {
            let existingPaymentInAzadAgent
            for (const supplier of azadAgents){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===azad_Visa_Reference_Out_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentInAzadAgent = supplier;
                  break
                }
              }
             }
            // Check if the supplier with the given name exists
          
            if (!existingPaymentInAzadAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentInAzadAgent = new AzadAgents({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: azad_Visa_Reference_Out_Name,
                  total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  remaining_Balance: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,

                  total_Azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_One,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      picture:azad_Visa_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                        ? azad_Visa_Sales_PKR
                        : 0,
                      azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                        ? azad_Visa_Sales_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInAzadAgent.save();
              paymentInfo.newPaymentInAzadAgent = newPaymentInAzadAgent;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInAzadAgent.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentInAzadAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
                existingPaymentInAzadAgent.payment_In_Schema.remaining_Balance +=
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

                existingPaymentInAzadAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0;
                existingPaymentInAzadAgent.payment_In_Schema.remaining_Curr +=
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInAzadAgent.payment_In_Schema.persons.push(
                  {
                    name,
                    picture:azad_Visa_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    country,
                    contact,
                    azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                      ? azad_Visa_Sales_PKR
                      : 0,
                    azad_Visa_Price_In_Curr: azad_Visa_Sales_Cur
                      ? azad_Visa_Sales_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );
                const newStatus = existingPaymentInAzadAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAzadAgent.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInAzadAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInAzadAgent.updateOne({
                 
                  $inc: {
                    "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                      azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                    "payment_In_Schema.remaining_Balance":
                      azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                    "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                      azad_Visa_Sales_Rate_Oth_Cur
                        ? azad_Visa_Sales_Rate_Oth_Cur
                        : 0,
                    "payment_In_Schema.remaining_Curr":
                      azad_Visa_Sales_Rate_Oth_Cur
                        ? azad_Visa_Sales_Rate_Oth_Cur
                        : 0,
                       
                  },
                  
                });
              }

              await existingPaymentInAzadAgent.save();
              paymentInfo.existingPaymentInAzadAgent =
                existingPaymentInAzadAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
        if (
          azad_Visa_Reference_In === "AGENTS" ||
          azad_Visa_Reference_In === "AGENT" ||
          azad_Visa_Reference_In === "Agent" ||
          azad_Visa_Reference_In === "agent" ||
          azad_Visa_Reference_In === "Agents" ||
          azad_Visa_Reference_In === "agents"
        ) {
          try {
            let existingPaymentOutAzadAgent
            for (const supplier of azadAgents){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===azad_Visa_Reference_In_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutAzadAgent = supplier;
                  break
                }
              }
             }
           
            if (!existingPaymentOutAzadAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentOutAzadAgent = new AzadAgents({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: azad_Visa_Reference_In_Name,
                  total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  remaining_Balance: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,

                  total_Azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      picture:azad_Visa_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                        ? azad_Visa_Purchase_PKR
                        : 0,
                      azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                        ? azad_Visa_Purchase_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutAzadAgent.save();
              paymentInfo.newPaymentOutAzadAgent = newPaymentOutAzadAgent;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentOutAzadAgent.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentOutAzadAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
                existingPaymentOutAzadAgent.payment_Out_Schema.remaining_Balance +=
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

                existingPaymentOutAzadAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0;
                existingPaymentOutAzadAgent.payment_Out_Schema.remaining_Curr +=
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutAzadAgent.payment_Out_Schema.persons.push(
                  {
                    name,
                    picture:azad_Visa_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    country,
                    contact,
                    azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                      ? azad_Visa_Purchase_PKR
                      : 0,
                    azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );

                const newStatus = existingPaymentOutAzadAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAzadAgent.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutAzadAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentOutAzadAgent.updateOne({
                  
                  $inc: {
                    "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                      azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                    "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                      azad_Visa_Purchase_Rate_Oth_Cur
                        ? azad_Visa_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      azad_Visa_Purchase_Rate_Oth_Cur
                        ? azad_Visa_Purchase_Rate_Oth_Cur
                        : 0,
                        
                  },
                 
                });
              }

              await existingPaymentOutAzadAgent.save();
              paymentInfo.existingPaymentOutAzadAgent =
                existingPaymentOutAzadAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
        if (
          azad_Visa_Reference_Out === "CANDIDATES" ||
          azad_Visa_Reference_Out === "CANDIDATE" ||
          azad_Visa_Reference_Out === "Candidates" ||
          azad_Visa_Reference_Out === "candidates" ||
          azad_Visa_Reference_Out === "Candidate" ||
          azad_Visa_Reference_Out === "candidate"
        ) {
          try {
            // Check if the supplier with the given name and entry mode exists
            const existingPaymentInAzadCandidate = await AzadCandidate.findOne({
              "payment_In_Schema.supplierName": name,
              
              "payment_In_Schema.pp_No": pp_No,
            });

            if (!existingPaymentInAzadCandidate) {
              // If the supplier does not exist with the same entry mode, create a new one
              const newPaymentInAzadCandidate = new AzadCandidate({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  picture:azad_Visa_Section_Picture,
                  total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  remaining_Balance: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,

                  total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_One,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  trade: trade,
                  country: country,
                  contact: contact,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                },
              });

              await newPaymentInAzadCandidate.save();
              paymentInfo.newPaymentInAzadCandidate = newPaymentInAzadCandidate;
            } else {
              // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
              // You may choose to update or do nothing based on your specific requirements
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
        if (
          azad_Visa_Reference_In === "CANDIDATES" ||
          azad_Visa_Reference_In === "CANDIDATE" ||
          azad_Visa_Reference_In === "Candidates" ||
          azad_Visa_Reference_In === "Candidate" ||
          azad_Visa_Reference_In === "candidate" ||
          azad_Visa_Reference_In === "candidates"
        ) {
          try {
            // Check if the supplier with the given name exists
            const existingPaymentOutAzadCandidate = await AzadCandidate.findOne(
              {
                "payment_Out_Schema.supplierName": name,
                
                "payment_Out_Schema.pp_No": pp_No,
              }
            );

            if (!existingPaymentOutAzadCandidate) {
              // If the supplier does not exist, create a new one
              const newPaymentOutAzadCandidate = new AzadCandidate({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  picture:azad_Visa_Section_Picture,
                  total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  remaining_Balance: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,

                  total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  trade: trade,
                  country: country,
                  contact: contact,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                },
              });

              await newPaymentOutAzadCandidate.save();
              paymentInfo.newPaymentOutAzadCandidate =
                newPaymentOutAzadCandidate;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Handling Ticket Suppliers
        const ticketSuppliers=await TicketSuppliers.find({})
        const ticketAgents=await TicketAgents.find({})

        //Saving the Entry Details to the Ticket Payment In Section if azad_Visa_Reference_Out_Name is Supplier
        if (
          ticket_Reference_Out === "SUPPLIERS" ||
          ticket_Reference_Out === "SUPPLIER" ||
          ticket_Reference_Out === "Supplier" ||
          ticket_Reference_Out === "supplier" ||
          ticket_Reference_Out === "Suppliers" ||
          ticket_Reference_Out === "suppliers"
        ) {
          try {
            let existingPaymentInTicketSupplier
            for (const supplier of ticketSuppliers){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===ticket_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInTicketSupplier = supplier;
                  break
                }
              }
             }
           
            if (!existingPaymentInTicketSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentInTicketSupplier = new TicketSuppliers({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: ticket_Reference_Out_Name,
                  total_Azad_Visa_Price_In_PKR: ticket_Sales_PKR
                    ? ticket_Sales_PKR
                    : 0,
                  remaining_Balance: ticket_Sales_PKR ? ticket_Sales_PKR : 0,

                  total_Azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                    ? ticket_Sales_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: ticket_Sales_Rate_Oth_Cur
                    ? ticket_Sales_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_One,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      picture:ticket_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      country,
                      contact,
                      azad_Visa_Price_In_PKR: ticket_Sales_PKR
                        ? ticket_Sales_PKR
                        : 0,
                      azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                        ? ticket_Sales_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInTicketSupplier.save();
              paymentInfo.newPaymentInTicketSupplier =
                newPaymentInTicketSupplier;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInTicketSupplier.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentInTicketSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  ticket_Sales_PKR ? ticket_Sales_PKR : 0;
                existingPaymentInTicketSupplier.payment_In_Schema.remaining_Balance +=
                  ticket_Sales_PKR ? ticket_Sales_PKR : 0;

                existingPaymentInTicketSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
                existingPaymentInTicketSupplier.payment_In_Schema.remaining_Curr +=
                  ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInTicketSupplier.payment_In_Schema.persons.push(
                  {
                    name,
                    picture:ticket_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    contact,
                    country,
                    azad_Visa_Price_In_PKR: ticket_Sales_PKR
                      ? ticket_Sales_PKR
                      : 0,
                    azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                      ? ticket_Sales_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );

                const newStatus = existingPaymentInTicketSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInTicketSupplier.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInTicketSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInTicketSupplier.updateOne({
                 
                  $inc: {
                    "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                      ticket_Sales_PKR ? ticket_Sales_PKR : 0,
                    "payment_In_Schema.remaining_Balance":
                      ticket_Sales_PKR ? ticket_Sales_PKR : 0,

                    "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                      ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
                    "payment_In_Schema.remaining_Curr":
                      ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
                      
                  },
                 
                 
                });
              }

              await existingPaymentInTicketSupplier.save();
              paymentInfo.existingPaymentInTicketSupplier =
                existingPaymentInTicketSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
        if (
          ticket_Reference_In === "SUPPLIERS" ||
          ticket_Reference_In === "SUPPLIER" ||
          ticket_Reference_In === "Supplier" ||
          ticket_Reference_In === "supplier" ||
          ticket_Reference_In === "Suppliers" ||
          ticket_Reference_In === "suppliers"
        ) {
          try {
            let existingPaymentOutTicketSupplier
            for (const supplier of ticketSuppliers){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===ticket_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutTicketSupplier = supplier;
                  break
                }
              }
             }
           

            if (!existingPaymentOutTicketSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentOutTicketSupplier = new TicketSuppliers({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: ticket_Reference_In_Name,
                  total_Azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                    ? ticket_Purchase_PKR
                    : 0,
                  remaining_Balance: ticket_Purchase_PKR
                    ? ticket_Purchase_PKR
                    : 0,

                  total_Azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0,

                    curr_Country: cur_Country_Two,
                    opening:0,
                    closing:0,
                  persons: [
                    {
                      name,
                      picture:ticket_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                        ? ticket_Purchase_PKR
                        : 0,
                      azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                        ? ticket_Purchase_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutTicketSupplier.save();
              paymentInfo.newPaymentOutTicketSupplier =
                newPaymentOutTicketSupplier;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentOutTicketSupplier.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentOutTicketSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;
                existingPaymentOutTicketSupplier.payment_Out_Schema.remaining_Balance +=
                  ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;

                existingPaymentOutTicketSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0;
                existingPaymentOutTicketSupplier.payment_Out_Schema.remaining_Curr +=
                  ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutTicketSupplier.payment_Out_Schema.persons.push(
                  {
                    name,
                    picture:ticket_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    contact,
                    country,
                    azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                      ? ticket_Purchase_PKR
                      : 0,
                    azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                      ? ticket_Purchase_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );

                const newStatus = existingPaymentOutTicketSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutTicketSupplier.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutTicketSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentOutTicketSupplier.updateOne({
                 
                  $inc: {
                    "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                      ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,

                    "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                      ticket_Purchase_Rate_Oth_Cur
                        ? ticket_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      ticket_Purchase_Rate_Oth_Cur
                        ? ticket_Purchase_Rate_Oth_Cur
                        : 0,
                        
                  },
                 
                  
                });
              }

              await existingPaymentOutTicketSupplier.save();
              paymentInfo.existingPaymentOutTicketSupplier =
                existingPaymentOutTicketSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
        if (
          ticket_Reference_Out === "AGENTS" ||
          ticket_Reference_Out === "AGENT" ||
          ticket_Reference_Out === "Agents" ||
          ticket_Reference_Out === "agent" ||
          ticket_Reference_Out === "Agent" ||
          ticket_Reference_Out === "agents"
        ) {
          try {
            let existingPaymentInTicketAgent
            for (const supplier of ticketAgents){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===ticket_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInTicketAgent = supplier;
                  break
                }
              }
             }
         

            if (!existingPaymentInTicketAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentInTicketAgent = new TicketAgents({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: ticket_Reference_Out_Name,
                  total_Azad_Visa_Price_In_PKR: ticket_Sales_PKR
                    ? ticket_Sales_PKR
                    : 0,
                  remaining_Balance: ticket_Sales_PKR ? ticket_Sales_PKR : 0,

                  total_Azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                    ? ticket_Sales_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: ticket_Sales_Rate_Oth_Cur
                    ? ticket_Sales_Rate_Oth_Cur
                    : 0,

                    curr_Country: cur_Country_One,
                    opening:0,
                    closing:0,
                  persons: [
                    {
                      name,
                      picture:ticket_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_In_PKR: ticket_Sales_PKR
                        ? ticket_Sales_PKR
                        : 0,
                      azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                        ? ticket_Sales_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInTicketAgent.save();
              paymentInfo.newPaymentInTicketAgent = newPaymentInTicketAgent;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInTicketAgent.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentInTicketAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  ticket_Sales_PKR ? ticket_Sales_PKR : 0;
                existingPaymentInTicketAgent.payment_In_Schema.remaining_Balance +=
                  ticket_Sales_PKR ? ticket_Sales_PKR : 0;

                existingPaymentInTicketAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
                existingPaymentInTicketAgent.payment_In_Schema.remaining_Curr +=
                  ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInTicketAgent.payment_In_Schema.persons.push(
                  {
                    name,
                    picture:ticket_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    contact,
                    country,
                    azad_Visa_Price_In_PKR: ticket_Sales_PKR
                      ? ticket_Sales_PKR
                      : 0,
                    azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                      ? ticket_Sales_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );
                const newStatus = existingPaymentInTicketAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInTicketAgent.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInTicketAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInTicketAgent.updateOne({
                 
                  $inc: {
                    "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                      ticket_Sales_PKR ? ticket_Sales_PKR : 0,
                    "payment_In_Schema.remaining_Balance":
                      ticket_Sales_PKR ? ticket_Sales_PKR : 0,

                    "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                      ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
                    "payment_In_Schema.remaining_Curr":
                      ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
                     
                  },
                 
                 
                });
              }

              await existingPaymentInTicketAgent.save();
              paymentInfo.existingPaymentInTicketAgent =
                existingPaymentInTicketAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
        if (
          ticket_Reference_In === "AGENTS" ||
          ticket_Reference_In === "AGENT" ||
          ticket_Reference_In === "Agent" ||
          ticket_Reference_In === "agent" ||
          ticket_Reference_In === "Agents" ||
          ticket_Reference_In === "agents"
        ) {
          try {

            let existingPaymentOutTicketAgent
            for (const supplier of ticketAgents){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===ticket_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutTicketAgent = supplier;
                  break
                }
              }
             }
           

            if (!existingPaymentOutTicketAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentOutTicketAgent = new TicketAgents({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: ticket_Reference_In_Name,
                  total_Azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                    ? ticket_Purchase_PKR
                    : 0,
                  remaining_Balance: ticket_Purchase_PKR
                    ? ticket_Purchase_PKR
                    : 0,

                  total_Azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0,

                    curr_Country: cur_Country_Two,
                    opening:0,
                    closing:0,
                  persons: [
                    {
                      name,
                      picture:ticket_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                        ? ticket_Purchase_PKR
                        : 0,
                      azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                        ? ticket_Purchase_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutTicketAgent.save();
              paymentInfo.newPaymentOutTicketAgent = newPaymentOutTicketAgent;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentOutTicketAgent.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentOutTicketAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;
                existingPaymentOutTicketAgent.payment_Out_Schema.remaining_Balance +=
                  ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;

                existingPaymentOutTicketAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0;
                existingPaymentOutTicketAgent.payment_Out_Schema.remaining_Curr +=
                  ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutTicketAgent.payment_Out_Schema.persons.push(
                  {
                    name,
                    picture:ticket_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    contact,
                    country,
                    azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                      ? ticket_Purchase_PKR
                      : 0,
                    azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                      ? ticket_Purchase_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );

                const newStatus = existingPaymentOutTicketAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutTicketAgent.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutTicketAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentOutTicketAgent.updateOne({
                 
                  $inc: {
                    "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                      ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,

                    "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                      ticket_Purchase_Rate_Oth_Cur
                        ? ticket_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      ticket_Purchase_Rate_Oth_Cur
                        ? ticket_Purchase_Rate_Oth_Cur
                        : 0,
                       
                  },
                  
                });
              }

              await existingPaymentOutTicketAgent.save();
              paymentInfo.existingPaymentOutTicketAgent =
                existingPaymentOutTicketAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
        if (
          ticket_Reference_Out === "CANDIDATES" ||
          ticket_Reference_Out === "CANDIDATE" ||
          ticket_Reference_Out === "Candidates" ||
          ticket_Reference_Out === "candidates" ||
          ticket_Reference_Out === "Candidate" ||
          ticket_Reference_Out === "candidate"
        ) {
          try {
            // Check if the supplier with the given name and entry mode exists
            const existingPaymentInTicketCandidate =
              await TicketCandidate.findOne({
                "payment_In_Schema.supplierName": name,
                
                "payment_In_Schema.pp_No": pp_No,
              });

            if (!existingPaymentInTicketCandidate) {
              // If the supplier does not exist with the same entry mode, create a new one
              const newPaymentInTicketCandidate = new TicketCandidate({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  picture:ticket_Section_Picture,
                  total_Visa_Price_In_PKR: ticket_Sales_PKR
                    ? ticket_Sales_PKR
                    : 0,
                  remaining_Balance: ticket_Sales_PKR ? ticket_Sales_PKR : 0,

                  total_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                    ? ticket_Sales_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: ticket_Sales_Rate_Oth_Cur
                    ? ticket_Sales_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_One,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  trade: trade,
                  contact: contact,
                  country: country,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                },
              });

              await newPaymentInTicketCandidate.save();
              paymentInfo.newPaymentInTicketCandidate =
                newPaymentInTicketCandidate;
            } else {
              // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
              // You may choose to update or do nothing based on your specific requirements
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
        if (
          ticket_Reference_In === "CANDIDATES" ||
          ticket_Reference_In === "CANDIDATE" ||
          ticket_Reference_In === "Candidates" ||
          ticket_Reference_In === "Candidate" ||
          ticket_Reference_In === "candidate" ||
          ticket_Reference_In === "candidates"
        ) {
          try {
            // Check if the supplier with the given name exists
            const existingPaymentOutTicketCandidate =
              await TicketCandidate.findOne({
                "payment_Out_Schema.supplierName": name,
                
                "payment_Out_Schema.pp_No": pp_No,
              });

            if (!existingPaymentOutTicketCandidate) {
              // If the supplier does not exist, create a new one
              const newPaymentOutTicketCandidate = new TicketCandidate({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  total_Visa_Price_Out_PKR: ticket_Purchase_PKR
                    ? ticket_Purchase_PKR
                    : 0,
                  remaining_Balance: ticket_Purchase_PKR
                    ? ticket_Purchase_PKR
                    : 0,

                  total_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: ticket_Purchase_Rate_Oth_Cur
                    ? ticket_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  trade: trade,
                  country: country,
                  contact: contact,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              });

              await newPaymentOutTicketCandidate.save();
              paymentInfo.newPaymentOutTicketCandidate =
                newPaymentOutTicketCandidate;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        // Handling Visit Suppliers
        const visitSuppliers=await VisitSuppliers.find({})
        const visitAgents=await VisitAgents.find({})

        //Saving the Entry Details to the Ticket Payment In Section if azad_Visa_Reference_Out_Name is Supplier
        if (
          visit_Reference_Out === "SUPPLIERS" ||
          visit_Reference_Out === "SUPPLIER" ||
          visit_Reference_Out === "Supplier" ||
          visit_Reference_Out === "supplier" ||
          visit_Reference_Out === "Suppliers" ||
          visit_Reference_Out === "suppliers"
        ) {
          try {
            let existingPaymentInVisitSupplier
            for (const supplier of visitSuppliers){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===visit_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInVisitSupplier = supplier;
                  break
                }
              }
             }
           

            if (!existingPaymentInVisitSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentInVisitSupplier = new VisitSuppliers({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: visit_Reference_Out_Name,
                  total_Azad_Visa_Price_In_PKR: visit_Sales_PKR
                    ? visit_Sales_PKR
                    : 0,
                  remaining_Balance: visit_Sales_PKR ? visit_Sales_PKR : 0,

                  total_Azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                    ? visit_Sales_Rate_Oth_Curr
                    : 0,
                  remaining_Curr: visit_Sales_Rate_Oth_Curr
                    ? visit_Sales_Rate_Oth_Curr
                    : 0,

                  curr_Country: cur_Country_One,
                  opening:0,
                    closing:0,
                  persons: [
                    {
                      name,
                      picture:visit_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      azad_Visa_Price_In_PKR: visit_Sales_PKR
                        ? visit_Sales_PKR
                        : 0,
                      azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                        ? visit_Sales_Rate_Oth_Curr
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInVisitSupplier.save();
              paymentInfo.newPaymentInVisitSupplier = newPaymentInVisitSupplier;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInVisitSupplier.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentInVisitSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  visit_Sales_PKR;
                existingPaymentInVisitSupplier.payment_In_Schema.remaining_Balance +=
                  visit_Sales_PKR;

                existingPaymentInVisitSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  visit_Sales_Rate_Oth_Curr;
                existingPaymentInVisitSupplier.payment_In_Schema.remaining_Curr +=
                  visit_Sales_Rate_Oth_Curr;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInVisitSupplier.payment_In_Schema.persons.push(
                  {
                    name,
                    picture:visit_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    contact,
                    country,
                    azad_Visa_Price_In_PKR: visit_Sales_PKR
                      ? visit_Sales_PKR
                      : 0,
                    azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                      ? visit_Sales_Rate_Oth_Curr
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );
                const newStatus = existingPaymentInVisitSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInVisitSupplier.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInVisitSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInVisitSupplier.updateOne({
                 
                  $inc: {
                    "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                      visit_Sales_PKR ? visit_Sales_PKR : 0,
                    "payment_In_Schema.remaining_Balance":
                      visit_Sales_PKR ? visit_Sales_PKR : 0,

                    "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                      visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
                    "payment_In_Schema.remaining_Curr":
                      visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
                     
                  },
                 
                });
              }

              await existingPaymentInVisitSupplier.save();
              paymentInfo.existingPaymentInVisitSupplier =
                existingPaymentInVisitSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
        if (
          visit_Reference_In === "SUPPLIERS" ||
          visit_Reference_In === "SUPPLIER" ||
          visit_Reference_In === "Supplier" ||
          visit_Reference_In === "supplier" ||
          visit_Reference_In === "Suppliers" ||
          visit_Reference_In === "suppliers"
        ) {
          try {

            let existingPaymentOutVisitSupplier
            for (const supplier of visitSuppliers){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===visit_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutVisitSupplier = supplier;
                  break
                }
              }
             }
           
            if (!existingPaymentOutVisitSupplier) {
              // If the supplier does not exist, create a new one
              const newPaymentOutVisitSupplier = new VisitSuppliers({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: visit_Reference_In_Name,
                  total_Azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                    ? visit_Purchase_Rate_PKR
                    : 0,
                  remaining_Balance: visit_Purchase_Rate_PKR
                    ? visit_Purchase_Rate_PKR
                    : 0,

                  total_Azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                    ? visit_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visit_Purchase_Rate_Oth_Cur
                    ? visit_Purchase_Rate_Oth_Cur
                    : 0,

                    curr_Country: cur_Country_Two,
                    opening:0,
                    closing:0,
                  persons: [
                    {
                      name,
                      picture:visit_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      country,
                      contact,
                      azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                        ? visit_Purchase_Rate_PKR
                        : 0,
                      azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                        ? visit_Purchase_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutVisitSupplier.save();
              paymentInfo.newPaymentOutVisitSupplier =
                newPaymentOutVisitSupplier;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentOutVisitSupplier.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentOutVisitSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;
                existingPaymentOutVisitSupplier.payment_Out_Schema.remaining_Balance +=
                  visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;

                existingPaymentOutVisitSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
                existingPaymentOutVisitSupplier.payment_Out_Schema.remaining_Curr +=
                  visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutVisitSupplier.payment_Out_Schema.persons.push(
                  {
                    name,
                    picture:visit_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    contact,
                    country,
                    azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                      ? visit_Purchase_Rate_PKR
                      : 0,
                    azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                      ? visit_Purchase_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );

                const newStatus = existingPaymentOutVisitSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutVisitSupplier.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutVisitSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentOutVisitSupplier.updateOne({
                  $inc: {
                    "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                      visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,

                    "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                      visit_Purchase_Rate_Oth_Cur
                        ? visit_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      visit_Purchase_Rate_Oth_Cur
                        ? visit_Purchase_Rate_Oth_Cur
                        : 0,
                        
                  },
                 
                });
              }

              await existingPaymentOutVisitSupplier.save();
              paymentInfo.existingPaymentOutVisitSupplier =
                existingPaymentOutVisitSupplier;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
        if (
          visit_Reference_Out === "AGENTS" ||
          visit_Reference_Out === "AGENT" ||
          visit_Reference_Out === "Agents" ||
          visit_Reference_Out === "agent" ||
          visit_Reference_Out === "Agent" ||
          visit_Reference_Out === "agents"
        ) {
          try {

            let existingPaymentInVisitAgent
            for (const supplier of visitAgents){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===visit_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInVisitAgent = supplier;
                  break
                }
              }
             }
          
            if (!existingPaymentInVisitAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentInVisitAgent = new VisitAgents({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: visit_Reference_Out_Name,
                  total_Azad_Visa_Price_In_PKR: visit_Sales_PKR
                    ? visit_Sales_PKR
                    : 0,
                  remaining_Balance: visit_Sales_PKR ? visit_Sales_PKR : 0,

                  total_Azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                    ? visit_Sales_Rate_Oth_Curr
                    : 0,
                  remaining_Curr: visit_Sales_Rate_Oth_Curr
                    ? visit_Sales_Rate_Oth_Curr
                    : 0,

                  curr_Country: cur_Country_One,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name,
                      picture:visit_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      country,
                      contact,
                      azad_Visa_Price_In_PKR: visit_Sales_PKR
                        ? visit_Sales_PKR
                        : 0,
                      azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                        ? visit_Sales_Rate_Oth_Curr
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentInVisitAgent.save();
              paymentInfo.newPaymentInVisitAgent = newPaymentInVisitAgent;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentInVisitAgent.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentInVisitAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  visit_Sales_PKR ? visit_Sales_PKR : 0;
                existingPaymentInVisitAgent.payment_In_Schema.remaining_Balance +=
                  visit_Sales_PKR ? visit_Sales_PKR : 0;

                existingPaymentInVisitAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0;
                existingPaymentInVisitAgent.payment_In_Schema.remaining_Curr +=
                  visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentInVisitAgent.payment_In_Schema.persons.push(
                  {
                    name,
                    picture:visit_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    contact,
                    country,
                    azad_Visa_Price_In_PKR: visit_Sales_PKR
                      ? visit_Sales_PKR
                      : 0,
                    azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                      ? visit_Sales_Rate_Oth_Curr
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );
                const newStatus = existingPaymentInVisitAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInVisitAgent.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInVisitAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentInVisitAgent.updateOne({
                  $inc: {
                    "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                      visit_Sales_PKR ? visit_Sales_PKR : 0,
                    "payment_In_Schema.remaining_Balance": visit_Sales_PKR
                      ? visit_Sales_PKR
                      : 0,

                    "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                      visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
                    "payment_In_Schema.remaining_Curr":
                      visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
                      
                  },
                 
                });
              }

              await existingPaymentInVisitAgent.save();
              paymentInfo.existingPaymentInVisitAgent =
                existingPaymentInVisitAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
        if (
          visit_Reference_In === "AGENTS" ||
          visit_Reference_In === "AGENT" ||
          visit_Reference_In === "Agents" ||
          visit_Reference_In === "agents" ||
          visit_Reference_In === "Agent" ||
          visit_Reference_In === "agent"
        ) {
          try {

            let existingPaymentOutVisitAgent
            for (const supplier of visitAgents){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===visit_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutVisitAgent = supplier;
                  break
                }
              }
             }
           

            if (!existingPaymentOutVisitAgent) {
              // If the supplier does not exist, create a new one
              const newPaymentOutVisitAgent = new VisitAgents({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: visit_Reference_In_Name,
                  total_Azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                    ? visit_Purchase_Rate_PKR
                    : 0,
                  remaining_Balance: visit_Purchase_Rate_PKR
                    ? visit_Purchase_Rate_PKR
                    : 0,

                  total_Azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                    ? visit_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visit_Purchase_Rate_Oth_Cur
                    ? visit_Purchase_Rate_Oth_Cur
                    : 0,
                    curr_Country: cur_Country_Two,
                    opening:0,
                    closing:0,
                  persons: [
                    {
                      name,
                      picture:visit_Section_Picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      country,
                      contact,
                      azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                        ? visit_Purchase_Rate_PKR
                        : 0,
                      azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                        ? visit_Purchase_Rate_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutVisitAgent.save();
              paymentInfo.newPaymentOutVisitAgent = newPaymentOutVisitAgent;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentOutVisitAgent.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentOutVisitAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;
                existingPaymentOutVisitAgent.payment_Out_Schema.remaining_Balance +=
                  visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;

                existingPaymentOutVisitAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
                existingPaymentOutVisitAgent.payment_Out_Schema.remaining_Curr +=
                  visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutVisitAgent.payment_Out_Schema.persons.push(
                  {
                    name,
                    picture:visit_Section_Picture,
                    pp_No,
                    entry_Mode,
                    trade,
                    country,
                    contact,
                    azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                      ? visit_Purchase_Rate_PKR
                      : 0,
                    azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                      ? visit_Purchase_Rate_Oth_Cur
                      : 0,
                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  }
                );

                const newStatus = existingPaymentOutVisitAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutVisitAgent.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutVisitAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentOutVisitAgent.updateOne({
                  $inc: {
                    "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                      visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,
                    "payment_Out_Schema.remaining_Balance":
                      visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,

                    "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                      visit_Purchase_Rate_Oth_Cur
                        ? visit_Purchase_Rate_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      visit_Purchase_Rate_Oth_Cur
                        ? visit_Purchase_Rate_Oth_Cur
                        : 0,
                      
                  },
                
                });
              }

              await existingPaymentOutVisitAgent.save();
              paymentInfo.existingPaymentOutVisitAgent =
                existingPaymentOutVisitAgent;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }
        //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
        if (
          visit_Reference_Out === "CANDIDATES" ||
          visit_Reference_Out === "CANDIDATE" ||
          visit_Reference_Out === "Candidate" ||
          visit_Reference_Out === "candidate" ||
          visit_Reference_Out === "Candidates" ||
          visit_Reference_Out === "candidates"
        ) {
          try {
            // Check if the supplier with the given name and entry mode exists
            const existingPaymentInVisitCandidate =
              await VisitCandidate.findOne({
                "payment_In_Schema.supplierName": name,
                
                "payment_In_Schema.pp_No": pp_No,
              });

            if (!existingPaymentInVisitCandidate) {
              // If the supplier does not exist with the same entry mode, create a new one
              const newPaymentInVisitCandidate = new VisitCandidate({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  picture:visit_Section_Picture,
                  total_Visa_Price_In_PKR: visit_Sales_PKR
                    ? visit_Sales_PKR
                    : 0,
                  remaining_Balance: visit_Sales_PKR ? visit_Sales_PKR : 0,

                  total_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                    ? visit_Sales_Rate_Oth_Curr
                    : 0,
                  remaining_Curr: visit_Sales_Rate_Oth_Curr
                    ? visit_Sales_Rate_Oth_Curr
                    : 0,

                  curr_Country: cur_Country_One,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  trade: trade,
                  country: country,
                  contact: trade,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                },
              });

              await newPaymentInVisitCandidate.save();
              paymentInfo.newPaymentInVisitCandidate =
                newPaymentInVisitCandidate;
            } else {
              // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
              // You may choose to update or do nothing based on your specific requirements
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
        if (
          visit_Reference_In === "CANDIDATES" ||
          visit_Reference_In === "CANDIDATE" ||
          visit_Reference_In === "Candidate" ||
          visit_Reference_In === "Candidates" ||
          visit_Reference_In === "candidate" ||
          visit_Reference_In === "candidates"
        ) {
          try {
            // Check if the supplier with the given name exists
            const existingPaymentOutVisitCandidate =
              await VisitCandidate.findOne({
                "payment_Out_Schema.supplierName": name,
                "payment_Out_Schema.pp_No": pp_No,
              });

            if (!existingPaymentOutVisitCandidate) {
              // If the supplier does not exist, create a new one
              const newPaymentOutVisitCandidate = new VisitCandidate({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: name,
                  picture:visit_Section_Picture,
                  total_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                    ? visit_Purchase_Rate_PKR
                    : 0,
                  remaining_Balance: visit_Purchase_Rate_PKR
                    ? visit_Purchase_Rate_PKR
                    : 0,

                  total_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                    ? visit_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visit_Purchase_Rate_Oth_Cur
                    ? visit_Purchase_Rate_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_Two,
                  pp_No: pp_No,
                  entry_Mode: entry_Mode,
                  company: company,
                  trade: trade,
                  country: country,
                  contact: contact,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                },
              });

              await newPaymentOutVisitCandidate.save();
              paymentInfo.newPaymentOutVisitCandidate =
                newPaymentOutVisitCandidate;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        const protectors=await Protector.find({})
        if (
         ( protector_Reference_In === "PRPTECTORS" ||
          protector_Reference_In === "PRPTECTOR" ||
          protector_Reference_In === "Protectors" ||
          protector_Reference_In === "Protector" ||
          protector_Reference_In === "protectors" ||
          protector_Reference_In === "protector") && protector_Reference_In_Name
        ) {
          try {
            let existingPaymentOutProtector
            for(const protector of protectors){
              if(protector.payment_Out_Schema){
                if(protector.payment_Out_Schema.supplierName.toLowerCase()===protector_Reference_In_Name.toLowerCase()&& protector.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutProtector=protector
                }
              }
            }
          

            if (!existingPaymentOutProtector) {
              // If the supplier does not exist, create a new one
              const newPaymentOutProtector = new Protector({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: protector_Reference_In_Name,
                  total_Protector_Price_Out_PKR: protector_Price_In
                    ? protector_Price_In
                    : 0,
                  remaining_Balance: protector_Price_In
                    ? protector_Price_In
                    : 0,

                  total_Protector_Price_Out_Curr: protector_Price_In_Oth_Cur
                    ? protector_Price_In_Oth_Cur
                    : 0,
                  remaining_Curr: protector_Price_In_Oth_Cur
                    ? protector_Price_In_Oth_Cur
                    : 0,

                  curr_Country: cur_Country_One,
                  persons: [
                    {
                      name,
                     picture: picture,
                      pp_No,
                      entry_Mode,
                      trade,
                      contact,
                      country,
                      protector_Out_PKR: protector_Price_In
                        ? protector_Price_In
                        : 0,
                      protector_Out_Curr: protector_Price_In_Oth_Cur
                        ? protector_Price_In_Oth_Cur
                        : 0,
                      company: company,
                      final_Status: final_Status,
                      flight_Date: flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutProtector.save();
              paymentInfo.newPaymentOutProtector = newPaymentOutProtector;
            } else {
              // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
              const existingPersonIndex =
                existingPaymentOutProtector.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === pp_No &&
                    person.entry_Mode === entry_Mode &&
                    person.name === name
                );

              if (existingPersonIndex !== -1) {
                // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                existingPaymentOutProtector.payment_Out_Schema.total_Protector_Price_Out_PKR +=
                  protector_Price_In ? protector_Price_In : 0;
                existingPaymentOutProtector.payment_Out_Schema.remaining_Balance +=
                  protector_Price_In ? protector_Price_In : 0;

                existingPaymentOutProtector.payment_Out_Schema.total_Protector_Price_Out_Curr +=
                  protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0;
                existingPaymentOutProtector.payment_Out_Schema.remaining_Curr +=
                  protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0;
              } else {
                // If the person does not exist, add them to the persons array
                existingPaymentOutProtector.payment_Out_Schema.persons.push({
                  name,
                  picture: picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  protector_Out_PKR: protector_Price_In
                    ? protector_Price_In
                    : 0,
                  protector_Out_Curr: protector_Price_In_Oth_Cur
                    ? protector_Price_In_Oth_Cur
                    : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                });

                // Update total_Visa_Price_In_PKR and other fields using $inc
                await existingPaymentOutProtector.updateOne({
                  $inc: {
                    "payment_Out_Schema.total_Protector_Price_Out_PKR":
                      protector_Price_In ? protector_Price_In : 0,
                    "payment_Out_Schema.remaining_Balance": protector_Price_In
                      ? protector_Price_In
                      : 0,

                    "payment_Out_Schema.total_Protector_Price_Out_Curr":
                      protector_Price_In_Oth_Cur
                        ? protector_Price_In_Oth_Cur
                        : 0,
                    "payment_Out_Schema.remaining_Curr":
                      protector_Price_In_Oth_Cur
                        ? protector_Price_In_Oth_Cur
                        : 0,
                  },
                });
              }

              await existingPaymentOutProtector.save();
              paymentInfo.existingPaymentOutProtector =
                existingPaymentOutProtector;
            }
          } catch (saveError) {
            console.error(saveError);
            res
              .status(500)
              .json({ message:saveError });
          }
        }

        await newEntry.save();
        const responsePayload = {
          data: newEntry,
          message: `${name} with ${pp_No} added Successfully`,
          paymentInfo: paymentInfo, // Include payment information in the response
        };

        res.status(200).json(responsePayload);
      }
    
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
}

// adding multiple Entries
const addMultipleEnteries = async (req, res) => {
  try {
    const userId = req.user._id;
    const user = await User.findById(userId);

    if (!user) {
      res.status(404).json({ message: "User not found" });
      return;
    }

    if (user) {
      const entries = req.body.entries;

      const addedEntries = [];
      const paymentInfo = {};

      for (const entryData of entries) {
        let final_Status = entryData.final_Status
        let name=entryData.name
        entryData.flight_Date =
          entryData.flight_Date !== undefined && entryData.flight_Date !== ""
            ? entryData.flight_Date
            : "No Fly";
            if (entryData.reference_Out &&(entryData.reference_Out.trim().toLowerCase().includes('candidate')||entryData.reference_Out.trim().toLowerCase().includes('direct'))) {
              entryData.reference_Out_Name = entryData.name;
            }
            if (entryData.reference_In&&(entryData.reference_In.trim().toLowerCase().includes('candidate')||entryData.reference_In.trim().toLowerCase().includes('direct')) ) {
              entryData.reference_In_Name = entryData.name;
            }
            
              if (entryData.visit_Reference_In&&(entryData.visit_Reference_In.trim().toLowerCase().includes('candidate')|| entryData.visit_Reference_In.trim().toLowerCase().includes('direct'))) {
                entryData.visit_Reference_In_Name = entryData.name;
              
              if (entryData.visit_Reference_Out&&(entryData.visit_Reference_Out.trim().toLowerCase().includes('candidate')||entryData.visit_Reference_Out.trim().toLowerCase().includes('direct'))) {
                entryData.visit_Reference_Out_Name = entryData.name;
              }
            }
            

              if (entryData.ticket_Reference_In&&(entryData.ticket_Reference_In.trim().toLowerCase().includes('candidate')||entryData.ticket_Reference_In.trim().toLowerCase().includes('direct'))) {
                entryData.ticket_Reference_In_Name = entryData.name;
              }
              if (entryData.ticket_Reference_Out&&(entryData.ticket_Reference_Out.trim().toLowerCase().includes('candidate')||entryData.ticket_Reference_Out.trim().toLowerCase().includes('direct'))) {
                entryData.ticket_Reference_Out_Name = entryData.name;
              }
            
       
              if (entryData.azad_Visa_Reference_In&&(entryData.azad_Visa_Reference_In.trim().toLowerCase().includes('candidate')||entryData.azad_Visa_Reference_In.trim().toLowerCase().includes('direct'))) {
                entryData.azad_Visa_Reference_In_Name = entryData.name;
              }
              if (entryData.azad_Visa_Reference_Out&&(entryData.azad_Visa_Reference_Out.trim().toLowerCase().includes('candidate')||entryData.azad_Visa_Reference_Out.trim().toLowerCase().includes('direct'))) {
                entryData.azad_Visa_Reference_Out_Name = entryData.name;
              }
            
        if (!entryData.entry_Date) {
          entryData.entry_Date = new Date().toISOString().split("T")[0]
        }
        const existingPPNO = await Entries.findOne({
          pp_No: new RegExp(`^${entryData.pp_No}$`, 'i')
        });

       
      if(entryData.company){
        const companies=await Companies.find({})
       const existCompany=companies.find(data=>data.company.trim().toLowerCase()===entryData.company.trim().toLowerCase())
        if (!existCompany) continue;
      }
      if(entryData.trade){
     const trades=await Trades.find({})
     const existingTrade=trades.find(data=>data.trade.trim().toLowerCase()===entryData.trade.trim().toLowerCase())
     if (!existingTrade) continue;
     
      }
      if(entryData.entry_Mode){
        const entryModes=await EntryMode.find({})
        const  existingEntryMode=entryModes.find(data=>data.entry_Mode.trim().toLowerCase()===entryData.entry_Mode.trim().toLowerCase())
        console.log('existingEntryMode',existingEntryMode)
     if (!existingEntryMode) continue;
        
      }
      if(entryData.final_Status){
        const finalStatuses=await FinalStatus.find({})
        const  existingFinalStatus=finalStatuses.find(data=>data.final_Status.trim().toLowerCase()===entryData.final_Status.trim().toLowerCase())
     if (!existingFinalStatus) continue;
       
      }
      if(entryData.reference_Out_Name && (entryData.reference_Out.toLowerCase().includes('agent')||entryData.reference_Out.toLowerCase().includes('supplier'))){
        const allOutVisas=await VSP.find({})
        const visaReference_Out=allOutVisas.find(data=>data.supplierName.trim().toLowerCase()===entryData.reference_Out_Name.trim().toLowerCase())
     

     if (!visaReference_Out) continue;

      }

      if(entryData.reference_In_Name && (entryData.reference_In.toLowerCase().includes('agent')||entryData.reference_In.toLowerCase().includes('supplier'))){
        const allInVisas=await VPP.find({})
        const visaReference_In=allInVisas.find(data=>data.supplierName.trim().toLowerCase()===entryData.reference_In_Name.trim().toLowerCase())
  
     if (!visaReference_In) continue;

      }

      if(entryData.azad_Visa_Reference_Out_Name && (entryData.azad_Visa_Reference_Out.toLowerCase().includes('agent')||entryData.azad_Visa_Reference_Out.toLowerCase().includes('supplier'))){
        const allOutAzasVisas=await AVPP.find({})
        const azadVisaReference_Out=allOutAzasVisas.find(data=>data.supplierName.trim().toLowerCase()===entryData.azad_Visa_Reference_Out_Name.trim().toLowerCase())
        
     if (!azadVisaReference_Out) continue;

      }

      if(entryData.azad_Visa_Reference_In_Name && (entryData.azad_Visa_Reference_In.toLowerCase().includes('agent')||entryData.azad_Visa_Reference_In.toLowerCase().includes('supplier'))){
        const allInAzasVisas=await AVSP.find({})
        const azadVisaReference_In=allInAzasVisas.find(data=>data.supplierName.trim().toLowerCase()===entryData.azad_Visa_Reference_In_Name.trim().toLowerCase())
     if (!azadVisaReference_In) continue;

      }

      
      if(entryData.ticket_Reference_Out_Name && (entryData.ticket_Reference_Out.toLowerCase().includes('agent')||entryData.ticket_Reference_Out.toLowerCase().includes('supplier'))){
        const allOutTickets=await TPP.find({})
        const  ticketReference_Out=allOutTickets.find(data=>data.supplierName.trim().toLowerCase()===entryData.ticket_Reference_Out_Name.trim().toLowerCase())
     if (!ticketReference_Out) continue;

      }

      if(entryData.ticket_Reference_In_Name && (entryData.ticket_Reference_In.toLowerCase().includes('agent')||entryData.ticket_Reference_In.toLowerCase().includes('supplier'))){
        const allInTickets=await TSP.find({})
        const ticketReference_In=allInTickets.find(data=>data.supplierName.trim().toLowerCase()===entryData.ticket_Reference_In_Name.trim().toLowerCase())
     if (!ticketReference_In) continue;

      }

      if(entryData.visit_Reference_Out_Name && (entryData.visit_Reference_Out.toLowerCase().includes('agent')||entryData.visit_Reference_Out.toLowerCase().includes('supplier'))){
        
        const allOutVisits=await VISP.find({})
        const visitReference_Out=allOutVisits.find(data=>data.supplierName.trim().toLowerCase()===entryData.visit_Reference_Out_Name.trim().toLowerCase())
     if (!visitReference_Out) continue;

      }

      if(entryData.visit_Reference_In_Name && (entryData.visit_Reference_In.toLowerCase().includes('agent')||entryData.visit_Reference_In.toLowerCase().includes('supplier'))){
       
        const allInVisits=await VIPP.find({})
        const visitReference_In=allInVisits.find(data=>data.supplierName.trim().toLowerCase()===entryData.visit_Reference_In_Name.trim().toLowerCase())
     if (!visitReference_In) continue;

      }

      if(entryData.protector_Reference_In_Name){
        const protectors=await ProtectorParties.find({})
        const  protectorReference_Out=protectors.find(data=>data.supplierName.trim().toLowerCase()===entryData.protector_Reference_In_Name.trim().toLowerCase())
     if (!protectorReference_Out) continue;

      }

        if (!existingPPNO) {

          if (entryData.final_Status&&(entryData.final_Status.trim().toLowerCase() === 'offer letter' || entryData.final_Status.trim().toLowerCase() === 'offer latter')) {
            const newReminder = new Reminders({
              type: "Offer Letter",
              content: `${name}'s Final Status is updated to Offer Letter.`,
              date: new Date().toISOString().split("T")[0]
            });
            await newReminder.save();
          }
          
          if (entryData.final_Status&&(entryData.final_Status.trim().toLowerCase() === 'e number' || entryData.final_Status.trim().toLowerCase() === 'e_number')) {
    
            const newReminder = new Reminders({
              type: "E Number",
              content: `${name}'s Final Status is updated to E Number.`,
              date: new Date().toISOString().split("T")[0]
            });
            await newReminder.save();
          }
          
          if (entryData.final_Status&&(entryData.final_Status.trim().toLowerCase() === 'qvc' || entryData.final_Status.trim().toLowerCase() === 'q_v_c')) {
            const newReminder = new Reminders({
              type: "QVC",
              content: `${name}'s Final Status is updated to QVC.`,
              date: new Date().toISOString().split("T")[0]
            });
            await newReminder.save();
          }
          
          if (entryData.final_Status&&(entryData.final_Status.trim().toLowerCase() === 'visa issued' || entryData.final_Status.trim().toLowerCase() === 'visa_issued' || entryData.final_Status.trim().toLowerCase() === 'vissa issued' || entryData.final_Status.trim().toLowerCase() === 'vissa_issued')) {
            const newReminder = new Reminders({
              type: "Visa Issued",
              content: `${name}'s Final Status is updated to Visa Issued.`,
              date: new Date().toISOString().split("T")[0]
            });
            await newReminder.save();
          }
          
          if (entryData.final_Status&&(entryData.final_Status.trim().toLowerCase() === 'ptn' || entryData.final_Status.trim().toLowerCase() === 'p_t_n')) {
            const newReminder = new Reminders({
              type: "PTN",
              content: `${name}'s Final Status is updated to PTN.`,
              date: new Date().toISOString().split("T")[0]
            });
            await newReminder.save();
          }
          
          if (entryData.final_Status&&(entryData.final_Status.trim().toLowerCase() === 'ticket' || final_Status.trim().toLowerCase() === 'tiket')) {
            const newReminder = new Reminders({
              type: "Ticket",
              content: `${name}'s Final Status is updated to Ticket.`,
              date: new Date().toISOString().split("T")[0]
            });
            await newReminder.save();
          }

          const newEntry = new Entries(entryData);
          const suppliers=await Suppliers.find({})

          if (
            entryData.reference_Out === "SUPPLIERS" ||
            entryData.reference_Out === "SUPPLIER" ||
            entryData.reference_Out === "suppliers" ||
            entryData.reference_Out === "supplier" ||
            entryData.reference_Out === "Suppliers" ||
            entryData.reference_Out === "Supplier"
          ) {
            let existingPaymentInSupplier;
            // Check if the supplier with the given name exists
            for(const supplier of suppliers){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===entryData.reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInSupplier=supplier
                  break
                }
              }
             
            }
        
            if (!existingPaymentInSupplier) {
              const newPaymentInSupplier = new Suppliers({
                payment_In_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: entryData.reference_Out_Name,
                  total_Visa_Price_In_PKR: entryData?.visa_Sales_Rate_PKR ?? 0,
                  remaining_Balance: entryData?.visa_Sales_Rate_PKR ?? 0,

                  total_Visa_Price_In_Curr:
                  entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                  remaining_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                  curr_Country: entryData.cur_Country_One,
                  opening:0??0,
                  closing:0,
                  persons: [
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      visa_Price_In_PKR: entryData?.visa_Sales_Rate_PKR ?? 0,
                      remaining_Price: entryData?.visa_Sales_Rate_PKR ?? 0,

                      visa_Price_In_Curr:
                        entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                      remaining_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,

                      company: entryData.company,
                      country: entryData.country,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });
              await newPaymentInSupplier.save();
           
              paymentInfo.newPaymentInSupplier = newPaymentInSupplier;
            } else {
              const existingPersonIndex =
                existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === entryData.pp_No &&
                    person.entry_Mode === entryData.entry_Mode &&
                    person.name === entryData.name
                );
              if (existingPersonIndex !== -1) {
                existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
                  entryData?.visa_Sales_Rate_PKR ?? 0;
                existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
                  entryData?.visa_Sales_Rate_PKR ?? 0;

                existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
                  entryData?.visa_Sale_Rate_Oth_Cur ?? 0;
                existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
                  entryData?.visa_Sale_Rate_Oth_Cur ?? 0;
              } else {
                existingPaymentInSupplier.payment_In_Schema.persons.push({
                  name: entryData.name,
                  pp_No: entryData.pp_No,
                  entry_Mode: entryData.entry_Mode,
                  trade: entryData.trade,
                  contact: entryData.contact,
                  country: entryData.country,
                  visa_Price_In_PKR: entryData?.visa_Sales_Rate_PKR ?? 0,
                  remaining_Price: entryData?.visa_Sales_Rate_PKR ?? 0,

                  visa_Price_In_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                  remaining_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,

                  company: entryData.company,
                  final_Status: entryData.final_Status,
                  flight_Date: entryData.flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                });

                await existingPaymentInSupplier.updateOne({
                  $inc: {
                    "payment_In_Schema.total_Visa_Price_In_PKR":
                      entryData?.visa_Sales_Rate_PKR ?? 0,
                    "payment_In_Schema.remaining_Balance":
                      entryData?.visa_Sales_Rate_PKR ?? 0,
                    "payment_In_Schema.total_Visa_Price_In_Curr":
                      entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                    "payment_In_Schema.remaining_Curr":
                      entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                     
                  },
                 
                });
              }

              await existingPaymentInSupplier.save();
              paymentInfo.existingPaymentInSupplier = existingPaymentInSupplier;
            }
          }

          if (
            entryData.reference_In === "SUPPLIERS" ||
            entryData.reference_In === "SUPPLIER" ||
            entryData.reference_In === "suppliers" ||
            entryData.reference_In === "supplier" ||
            entryData.reference_In === "Suppliers" ||
            entryData.reference_In === "Supplier"
          ) {
            let existingPaymentOutSupplier;
            for(const supplier of suppliers){
              if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.supplierName.toLowerCase()===entryData.reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                existingPaymentOutSupplier=supplier
                break
              }
            }

            if (!existingPaymentOutSupplier) {
              const newPaymentOutSupplier = new Suppliers({
                payment_Out_Schema: {
                  supplier_Id: newEntry._id,
                  supplierName: entryData.reference_In_Name,
                  total_Visa_Price_Out_PKR:
                    entryData?.visa_Purchase_Rate_PKR ?? 0,
                  remaining_Balance: entryData?.visa_Purchase_Rate_PKR ?? 0,

                  total_Visa_Price_Out_Curr:
                    entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                  remaining_Curr: entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,

                  curr_Country: entryData.cur_Country_Two,
                  opening:0,
                  closing:0,
                  persons: [
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      visa_Price_Out_PKR:
                        entryData?.visa_Purchase_Rate_PKR ?? 0,
                      remaining_Price: entryData?.visa_Purchase_Rate_PKR ?? 0,

                      visa_Price_Out_Curr:
                        entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                      remaining_Curr:
                        entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,

                      company: entryData.company,
                      country: entryData.country,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    },
                  ],
                },
              });

              await newPaymentOutSupplier.save();
              paymentInfo.newPaymentOutSupplier = newPaymentOutSupplier;
            } else {
              const existingPersonIndex =
                existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
                  (person) =>
                    person.pp_No === entryData.pp_No &&
                    person.entry_Mode === entryData.entry_Mode
                );

              if (existingPersonIndex !== -1) {
                existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                  entryData?.visa_Purchase_Rate_PKR ?? 0;
                existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
                  entryData?.visa_Purchase_Rate_PKR ?? 0;

                existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                  entryData?.visa_Purchase_Rate_Oth_Cur ?? 0;
                existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
                  entryData?.visa_Purchase_Rate_Oth_Cur ?? 0;
              } else {
                existingPaymentOutSupplier.payment_Out_Schema.persons.push({
                  name: entryData.name,
                  pp_No: entryData.pp_No,
                  entry_Mode: entryData.entry_Mode,
                  trade: entryData.trade,
                  contact: entryData.contact,
                  visa_Price_Out_PKR: entryData?.visa_Purchase_Rate_PKR ?? 0,
                  remaining_Price: entryData?.visa_Purchase_Rate_PKR ?? 0,

                  visa_Price_Out_Curr:
                    entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                  remaining_Curr: entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,

                  company: entryData.company,
                  country: entryData.country,
                  final_Status: entryData.final_Status,
                  flight_Date: entryData.flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                });


                const newStatus = existingPaymentOutSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutSupplier.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';

                await existingPaymentOutSupplier.updateOne({
                  $inc: {
                    "payment_Out_Schema.total_Visa_Price_Out_PKR":
                      entryData?.visa_Purchase_Rate_PKR ?? 0,
                    "payment_Out_Schema.remaining_Balance":
                      entryData?.visa_Purchase_Rate_PKR ?? 0,

                    "payment_Out_Schema.total_Visa_Price_Out_Curr":
                      entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                    "payment_Out_Schema.remaining_Curr":
                      entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                      
                  },
                 
                });
              }

              await existingPaymentOutSupplier.save();
              paymentInfo.existingPaymentOutSupplier =
                existingPaymentOutSupplier;
            }
          }

        const agents=await Agents.find({})
          //Saving the Entry Details to the Agents Payment In Section if reference_Out==="Agents"
          if (
            entryData.reference_Out === "AGENTS" ||
            entryData.reference_Out === "AGENT" ||
            entryData.reference_Out === "agents" ||
            entryData.reference_Out === "agent" ||
            entryData.reference_Out === "Agents" ||
            entryData.reference_Out === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentInAgent;
            for(const agent of agents){
              if(agent.payment_In_Schema && agent.payment_In_Schema.supplierName.toLowerCase()===entryData.reference_Out_Name.toLowerCase()&& agent.payment_In_Schema.status.toLowerCase()==='open'){
                existingPaymentInAgent=agent
                break
              }
            }

              if (!existingPaymentInAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentInAgent = new Agents({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.reference_Out_Name,
                    total_Visa_Price_In_PKR:
                      entryData?.visa_Sales_Rate_PKR ?? 0,
                    remaining_Price: entryData?.visa_Sales_Rate_PKR ?? 0,
                    total_Visa_Price_In_Curr:
                      entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                    curr_Country: entryData.cur_Country_One,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        country: entryData.country,
                        visa_Price_In_PKR: entryData?.visa_Sales_Rate_PKR ?? 0,
                        remaining_Price: entryData?.visa_Sales_Rate_PKR ?? 0,
                        visa_Price_In_Curr:
                          entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                        remaining_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,

                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentInAgent.save();
                paymentInfo.newPaymentInAgent = newPaymentInAgent;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentInAgent.payment_In_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentInAgent.payment_In_Schema.total_Visa_Price_In_PKR +=
                    entryData?.visa_Sales_Rate_PKR ?? 0;
                  existingPaymentInAgent.payment_In_Schema.remaining_Balance +=
                    entryData?.visa_Sales_Rate_PKR ?? 0;

                  existingPaymentInAgent.payment_In_Schema.total_Visa_Price_In_Curr +=
                    entryData?.visa_Sale_Rate_Oth_Cur ?? 0;
                  existingPaymentInAgent.payment_In_Schema.remaining_Curr +=
                    entryData?.visa_Sale_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentInAgent.payment_In_Schema.persons.push({
                    name: entryData.name,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    trade: entryData.trade,
                    contact: entryData.contact,
                    country: entryData.country,
                    visa_Price_In_PKR: entryData?.visa_Sales_Rate_PKR ?? 0,
                    remaining_Price: entryData?.visa_Sales_Rate_PKR ?? 0,

                    visa_Price_In_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,

                    company: entryData.company,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  });

                  const newStatus = existingPaymentInAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAgent.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentInAgent.updateOne({
                    $inc: {
                      "payment_In_Schema.total_Visa_Price_In_PKR":
                        entryData?.visa_Sales_Rate_PKR ?? 0,
                      "payment_In_Schema.remaining_Balance":
                        entryData?.visa_Sales_Rate_PKR ?? 0,

                      "payment_In_Schema.total_Visa_Price_In_Curr":
                        entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                      "payment_In_Schema.remaining_Curr":
                        entryData?.visa_Sale_Rate_Oth_Cur ?? 0,           
                      

                    },
                   
                  });
                }

                await existingPaymentInAgent.save();
                paymentInfo.existingPaymentInAgent = existingPaymentInAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Agents Payment Out Section if reference_In==="Agents"
          if (
            entryData.reference_In === "AGENTS" ||
            entryData.reference_In === "AGENT" ||
            entryData.reference_In === "agents" ||
            entryData.reference_In === "agent" ||
            entryData.reference_In === "Agents" ||
            entryData.reference_In === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentOutAgent
            for(const agent of agents){
              if(agent.payment_Out_Schema && agent.payment_Out_Schema.supplierName.toLowerCase()===entryData.reference_In_Name.toLowerCase()&& agent.payment_Out_Schema.status.toLowerCase()==='open'){
                existingPaymentOutAgent=agent
                break
              }
            }

              if (!existingPaymentOutAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentOutAgent = new Agents({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.reference_In_Name,
                    total_Visa_Price_Out_PKR:
                      entryData?.visa_Purchase_Rate_PKR ?? 0,
                    remaining_Balance: entryData?.visa_Purchase_Rate_PKR ?? 0,

                    total_Visa_Price_Out_Curr:
                      entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        country: entryData.country,
                        visa_Price_Out_PKR:
                          entryData?.visa_Purchase_Rate_PKR ?? 0,
                        remaining_Price: entryData?.visa_Purchase_Rate_PKR ?? 0,
                        visa_Price_Out_Curr:
                          entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                        remaining_Curr:
                          entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,

                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutAgent.save();
                paymentInfo.newPaymentOutAgent = newPaymentOutAgent;
              } else {
                const existingPersonIndex =
                  existingPaymentOutAgent.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  existingPaymentOutAgent.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                    entryData?.visa_Purchase_Rate_PKR ?? 0;
                  existingPaymentOutAgent.payment_Out_Schema.remaining_Balance +=
                    entryData?.visa_Purchase_Rate_PKR ?? 0;

                  existingPaymentOutAgent.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                    entryData?.visa_Purchase_Rate_Oth_Cur ?? 0;
                  existingPaymentOutAgent.payment_Out_Schema.remaining_Curr +=
                    entryData?.visa_Purchase_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutAgent.payment_Out_Schema.persons.push({
                    name: entryData.name,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    trade: entryData.trade,
                    contact: entryData.contact,
                    country: entryData.country,
                    visa_Price_Out_PKR: entryData?.visa_Purchase_Rate_PKR ?? 0,
                    remaining_Price: entryData?.visa_Purchase_Rate_PKR ?? 0,

                    visa_Price_Out_Curr:
                      entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,

                    company: entryData.company,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  });

                  const newStatus = existingPaymentOutAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAgent.payment_Out_Schema.status;
                  const isStatusClosed = existingPaymentOutAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_In_Price_PKR and other fields using $inc
                  await existingPaymentOutAgent.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Visa_Price_Out_PKR":
                        entryData?.visa_Purchase_Rate_PKR ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.visa_Purchase_Rate_PKR ?? 0,

                      "payment_Out_Schema.total_Visa_Price_Out_Curr":
                        entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                        
                    },
                   
                  });
                }

                await existingPaymentOutAgent.save();
                paymentInfo.existingPaymentOutAgent = existingPaymentOutAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
          if (
            entryData.reference_Out === "CANDIDATES" ||
            entryData.reference_Out === "CANDIDATE" ||
            entryData.reference_Out === "candidates" ||
            entryData.reference_Out === "candidate" ||
            entryData.reference_Out === "Candidates" ||
            entryData.reference_Out === "Candidate" ||
            entryData.reference_Out === "DIRECTS" ||
            entryData.reference_Out === "DIRECT" ||
            entryData.reference_Out === "directs" ||
            entryData.reference_Out === "direct" ||
            entryData.reference_Out === "Directs" ||
            entryData.reference_Out === "Direct"
          ) {
            console.log('Yes: entryData.reference_Out',entryData.reference_Out)
            try {
              // Check if the supplier with the given name and entry mode exists
              const existingPaymentInCandidate = await Candidate.findOne({
                "payment_In_Schema.supplierName": entryData.name,
                "payment_In_Schema.entry_Mode": entryData.entry_Mode,
                "payment_In_Schema.pp_No": entryData.pp_No,
              });

              if (!existingPaymentInCandidate) {
                // If the supplier does not exist with the same entry mode, create a new one
                const newPaymentInCandidate = new Candidate({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_In_PKR:
                      entryData?.visa_Sales_Rate_PKR ?? 0,
                    remaining_Balance: entryData?.visa_Sales_Rate_PKR ?? 0,

                    total_Visa_Price_In_Curr:
                      entryData?.visa_Sale_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visa_Sale_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    trade: entryData.trade,
                    country: entryData.country,
                    contact: entryData.contact,
                    company: entryData.company,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentInCandidate.save();
                paymentInfo.newPaymentInCandidate = newPaymentInCandidate;
              } else {
                // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
                // You may choose to update or do nothing based on your specific requirements
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
          if (
            entryData.reference_In === "CANDIDATES" ||
            entryData.reference_In === "CANDIDATE" ||
            entryData.reference_In === "candidates" ||
            entryData.reference_In === "candidate" ||
            entryData.reference_In === "Candidates" ||
            entryData.reference_In === "Candidate" ||
            entryData.reference_In === "DIRECTS" ||
            entryData.reference_In === "DIRECT" ||
            entryData.reference_In === "directs" ||
            entryData.reference_In === "direct" ||
            entryData.reference_In === "Directs" ||
            entryData.reference_In === "Direct"
          ) {
           

            try {
              // Check if the supplier with the given name exists
              const existingPaymentOutCandidate = await Candidate.findOne({
                "payment_Out_Schema.supplierName": entryData.name,
                "payment_Out_Schema.entry_Mode": entryData.entry_Mode,
                "payment_Out_Schema.pp_No": entryData.pp_No,
              });

              if (!existingPaymentOutCandidate) {
                // If the supplier does not exist, create a new one
                const newPaymentOutCandidate = new Candidate({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_Out_PKR:
                      entryData?.visa_Purchase_Rate_PKR ?? 0,
                    remaining_Balance: entryData?.visa_Purchase_Rate_PKR ?? 0,

                    total_Visa_Price_Out_Curr:
                      entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visa_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    company: entryData.company,
                    trade: entryData.trade,
                    country: entryData.country,
                    contact: entryData.contact,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentOutCandidate.save();
                paymentInfo.newPaymentOutCandidate = newPaymentOutCandidate;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          //Handling Azad Visa Suppliers
          const azadSuppliers= await AzadSupplier.find({})
          const azadAgents= await AzadAgents.find({})


          //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Supplier
          if (
            entryData.azad_Visa_Reference_Out === "SUPPLIERS" ||
            entryData.azad_Visa_Reference_Out === "SUPPLIER" ||
            entryData.azad_Visa_Reference_Out === "suppliers" ||
            entryData.azad_Visa_Reference_Out === "supplier" ||
            entryData.azad_Visa_Reference_Out === "Suppliers" ||
            entryData.azad_Visa_Reference_Out === "Supplier"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentInAzadSupplier
              for (const supplier of azadSuppliers){
                if(supplier.payment_In_Schema){
                  if(supplier.payment_In_Schema && supplier.payment_In_Schema.supplierName.toLowerCase()===entryData.azad_Visa_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                    existingPaymentInAzadSupplier = supplier;
                    break
                  }
                }
               }

              if (!existingPaymentInAzadSupplier) {
                // If the supplier does not exist, create a new one
                const newPaymentInAzadSupplier = new AzadSupplier({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.azad_Visa_Reference_Out_Name,
                    total_Azad_Visa_Price_In_PKR:
                      entryData?.azad_Visa_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.azad_Visa_Sales_PKR ?? 0,

                    total_Azad_Visa_Price_In_Curr:
                      entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        azad_Visa_Price_In_PKR:
                          entryData?.azad_Visa_Sales_PKR ?? 0,
                        azad_Visa_Price_In_Curr:
                          entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        country: entryData.country,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentInAzadSupplier.save();
                paymentInfo.newPaymentInAzadSupplier = newPaymentInAzadSupplier;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentInAzadSupplier.payment_In_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentInAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                    entryData?.azad_Visa_Sales_PKR ?? 0;
                  existingPaymentInAzadSupplier.payment_In_Schema.remaining_Balance +=
                    entryData?.azad_Visa_Sales_PKR ?? 0;

                  existingPaymentInAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                    entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0;
                  existingPaymentInAzadSupplier.payment_In_Schema.remaining_Curr +=
                    entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentInAzadSupplier.payment_In_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      azad_Visa_Price_In_PKR:
                        entryData?.azad_Visa_Sales_PKR ?? 0,
                      azad_Visa_Price_In_Curr:
                        entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      country: entryData.country,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentInAzadSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAzadSupplier.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInAzadSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentInAzadSupplier.updateOne({
                    $inc: {
                      "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                        entryData?.azad_Visa_Sales_PKR ?? 0,
                      "payment_In_Schema.remaining_Balance":
                        entryData?.azad_Visa_Sales_PKR ?? 0,

                      "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                        entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                      "payment_In_Schema.remaining_Curr":
                        entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                        
                    },
                   
                  });
                }

                await existingPaymentInAzadSupplier.save();
                paymentInfo.existingPaymentInAzadSupplier =
                  existingPaymentInAzadSupplier;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
          if (
            entryData.azad_Visa_Reference_In === "SUPPLIERS" ||
            entryData.azad_Visa_Reference_In === "SUPPLIER" ||
            entryData.azad_Visa_Reference_In === "suppliers" ||
            entryData.azad_Visa_Reference_In === "supplier" ||
            entryData.azad_Visa_Reference_In === "Suppliers" ||
            entryData.azad_Visa_Reference_In === "Supplier"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentOutAzadSupplier
            for (const supplier of azadSuppliers){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===entryData.azad_Visa_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutAzadSupplier = supplier;
                  break
                }
              }
             }

              if (!existingPaymentOutAzadSupplier) {
                // If the supplier does not exist, create a new one
                const newPaymentOutAzadSupplier = new AzadSupplier({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.azad_Visa_Reference_In_Name,
                    total_Azad_Visa_Price_Out_PKR:
                      entryData?.azad_Visa_Purchase_PKR ?? 0,
                    remaining_Balance: entryData?.azad_Visa_Purchase_PKR ?? 0,

                    total_Azad_Visa_Price_Out_Curr:
                      entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        azad_Visa_Price_Out_PKR:
                          entryData.azad_Visa_Purchase_PKR,
                        azad_Visa_Price_Out_Curr:
                          entryData.azad_Visa_Purchase_Rate_Oth_Cur,
                        company: entryData.company,
                        country: entryData.country,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutAzadSupplier.save();
                paymentInfo.newPaymentOutAzadSupplier =
                  newPaymentOutAzadSupplier;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                    entryData?.azad_Visa_Purchase_PKR ?? 0;
                  existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
                    entryData?.azad_Visa_Purchase_PKR ?? 0;

                  existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                    entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0;
                  existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
                    entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      azad_Visa_Price_Out_PKR:
                        entryData?.azad_Visa_Purchase_PKR ?? 0,
                      azad_Visa_Price_Out_Curr:
                        entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      country: entryData.country,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentOutAzadSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAzadSupplier.payment_Out_Schema.status;
                  const isStatusClosed = existingPaymentOutAzadSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentOutAzadSupplier.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                        entryData?.azad_Visa_Purchase_PKR ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.azad_Visa_Purchase_PKR ?? 0,

                      "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                        entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                        
                    
                    },
                   
                  });
                }

                await existingPaymentOutAzadSupplier.save();
                paymentInfo.existingPaymentOutAzadSupplier =
                  existingPaymentOutAzadSupplier;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
          if (
            entryData.azad_Visa_Reference_Out === "AGENTS" ||
            entryData.azad_Visa_Reference_Out === "AGENT" ||
            entryData.azad_Visa_Reference_Out === "agents" ||
            entryData.azad_Visa_Reference_Out === "agent" ||
            entryData.azad_Visa_Reference_Out === "Agents" ||
            entryData.azad_Visa_Reference_Out === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentInAzadAgent
            for (const supplier of azadAgents){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===entryData.azad_Visa_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInAzadAgent = supplier;
                  break
                }
              }
             }

              if (!existingPaymentInAzadAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentInAzadAgent = new AzadAgents({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.azad_Visa_Reference_Out_Name,
                    total_Azad_Visa_Price_In_PKR:
                      entryData?.azad_Visa_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.azad_Visa_Sales_PKR ?? 0,

                    total_Azad_Visa_Price_In_Curr:
                      entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        azad_Visa_Price_In_PKR:
                          entryData?.azad_Visa_Sales_PKR ?? 0,
                        azad_Visa_Price_In_Curr:
                          entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                        company: company,
                        country: entryData.country,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentInAzadAgent.save();
                paymentInfo.newPaymentInAzadAgent = newPaymentInAzadAgent;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentInAzadAgent.payment_In_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentInAzadAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                    entryData?.azad_Visa_Sales_PKR ?? 0;
                  existingPaymentInAzadAgent.payment_In_Schema.remaining_Balance +=
                    entryData?.azad_Visa_Sales_PKR ?? 0;

                  existingPaymentInAzadAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                    entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0;
                  existingPaymentInAzadAgent.payment_In_Schema.remaining_Curr +=
                    entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentInAzadAgent.payment_In_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      country: entryData.country,
                      azad_Visa_Price_In_PKR:
                        entryData?.azad_Visa_Sales_PKR ?? 0,
                      azad_Visa_Price_In_Curr:
                        entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentInAzadAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAzadAgent.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInAzadAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                // Update total_Visa_Price_In_PKR and other fields using $inc
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentInAzadAgent.updateOne({
                    $inc: {
                      "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                        entryData?.azad_Visa_Sales_PKR ?? 0,
                      "payment_In_Schema.remaining_Balance":
                        entryData?.azad_Visa_Sales_PKR ?? 0,

                      "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                        entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                      "payment_In_Schema.remaining_Curr":
                        entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                       
                    },
                   
                  });
                }

                await existingPaymentInAzadAgent.save();
                paymentInfo.existingPaymentInAzadAgent =
                  existingPaymentInAzadAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
          if (
            entryData.azad_Visa_Reference_In === "AGENTS" ||
            entryData.azad_Visa_Reference_In === "AGENT" ||
            entryData.azad_Visa_Reference_In === "agents" ||
            entryData.azad_Visa_Reference_In === "agent" ||
            entryData.azad_Visa_Reference_In === "Agents" ||
            entryData.azad_Visa_Reference_In === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentOutAzadAgent
            for (const supplier of azadAgents){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===entryData.azad_Visa_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutAzadAgent = supplier;
                  break
                }
              }
             }

              if (!existingPaymentOutAzadAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentOutAzadAgent = new AzadAgents({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.azad_Visa_Reference_In_Name,
                    total_Azad_Visa_Price_Out_PKR:
                      entryData?.azad_Visa_Purchase_PKR ?? 0,
                    remaining_Balance: entryData?.azad_Visa_Purchase_PKR ?? 0,

                    total_Azad_Visa_Price_Out_Curr:
                      entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        country: entryData.country,
                        contact: entryData.contact,
                        azad_Visa_Price_Out_PKR:
                          entryData?.azad_Visa_Purchase_PKR ?? 0,
                        azad_Visa_Price_Out_Curr:
                          entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutAzadAgent.save();
                paymentInfo.newPaymentOutAzadAgent = newPaymentOutAzadAgent;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentOutAzadAgent.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentOutAzadAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                    entryData?.azad_Visa_Purchase_PKR ?? 0;
                  existingPaymentOutAzadAgent.payment_Out_Schema.remaining_Balance +=
                    entryData?.azad_Visa_Purchase_PKR ?? 0;

                  existingPaymentOutAzadAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                    entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0;
                  existingPaymentOutAzadAgent.payment_Out_Schema.remaining_Curr +=
                    entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutAzadAgent.payment_Out_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      azad_Visa_Price_Out_PKR:
                        entryData?.azad_Visa_Purchase_PKR ?? 0,
                      azad_Visa_Price_Out_Curr:
                        entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      country: entryData.country,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  
                const newStatus = existingPaymentOutAzadAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAzadAgent.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutAzadAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentOutAzadAgent.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                        entryData?.azad_Visa_Purchase_PKR ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.azad_Visa_Purchase_PKR ?? 0,

                      "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                        entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                       
                    },
                   
                  });
                }

                await existingPaymentOutAzadAgent.save();
                paymentInfo.existingPaymentOutAzadAgent =
                  existingPaymentOutAzadAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
          if (
            entryData.azad_Visa_Reference_Out === "CANDIDATES" ||
            entryData.azad_Visa_Reference_Out === "CANDIDATE" ||
            entryData.azad_Visa_Reference_Out === "candidates" ||
            entryData.azad_Visa_Reference_Out === "candidate" ||
            entryData.azad_Visa_Reference_Out === "Candidates" ||
            entryData.azad_Visa_Reference_Out === "Candidate" ||
            entryData.azad_Visa_Reference_Out === "DIRECTS" ||
            entryData.azad_Visa_Reference_Out === "DIRECT" ||
            entryData.azad_Visa_Reference_Out === "directs" ||
            entryData.azad_Visa_Reference_Out === "direct" ||
            entryData.azad_Visa_Reference_Out === "Directs" ||
            entryData.azad_Visa_Reference_Out === "Direct"
          ) {
            try {
              // Check if the supplier with the given name and entry mode exists
              const existingPaymentInAzadCandidate =
                await AzadCandidate.findOne({
                  "payment_In_Schema.supplierName": entryData.name,
                  "payment_In_Schema.entry_Mode":
                    entryData.entry_Mode,
                  "payment_In_Schema.pp_No": entryData.pp_No,
                });

              if (!existingPaymentInAzadCandidate) {
                // If the supplier does not exist with the same entry mode, create a new one
                const newPaymentInAzadCandidate = new AzadCandidate({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_In_PKR:
                      entryData?.azad_Visa_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.azad_Visa_Sales_PKR ?? 0,

                    total_Visa_Price_In_Curr:
                      entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.azad_Visa_Sales_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    pp_No: entryData.pp_No,
                    country: entryData.country,
                    entry_Mode: entryData.entry_Mode,
                    company: entryData.company,
                    trade: entryData.trade,
                    contact: entryData.contact,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentInAzadCandidate.save();
                paymentInfo.newPaymentInAzadCandidate =
                  newPaymentInAzadCandidate;
              } else {
                // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
                // You may choose to update or do nothing based on your specific requirements
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
          if (
            entryData.azad_Visa_Reference_In === "CANDIDATES" ||
            entryData.azad_Visa_Reference_In === "CANDIDATE" ||
            entryData.azad_Visa_Reference_In === "candidates" ||
            entryData.azad_Visa_Reference_In === "candidate" ||
            entryData.azad_Visa_Reference_In === "Candidates" ||
            entryData.azad_Visa_Reference_In === "Candidate"||
            entryData.azad_Visa_Reference_In === "DIRECTS" ||
            entryData.azad_Visa_Reference_In === "DIRECT" ||
            entryData.azad_Visa_Reference_In === "directs" ||
            entryData.azad_Visa_Reference_In === "direct" ||
            entryData.azad_Visa_Reference_In === "Directs" ||
            entryData.azad_Visa_Reference_In === "Direct"
          ) {
            try {
              // Check if the supplier with the given name exists
              const existingPaymentOutAzadCandidate =
                await AzadCandidate.findOne({
                  "payment_Out_Schema.supplierName":
                    entryData.azad_Visa_Reference_In_Name,
                  "payment_Out_Schema.entry_Mode":
                    entryData.entry_Mode,
                  "payment_Out_Schema.pp_No": entryData.pp_No,
                });

              if (!existingPaymentOutAzadCandidate) {
                // If the supplier does not exist, create a new one
                const newPaymentOutAzadCandidate = new AzadCandidate({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_Out_PKR:
                      entryData?.azad_Visa_Purchase_PKR ?? 0,
                    remaining_Balance: entryData?.azad_Visa_Purchase_PKR ?? 0,

                    total_Visa_Price_Out_Curr:
                      entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.azad_Visa_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    company: entryData.company,
                    trade: entryData.trade,
                    country: entryData.country,
                    contact: entryData.contact,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentOutAzadCandidate.save();
                paymentInfo.newPaymentOutAzadCandidate =
                  newPaymentOutAzadCandidate;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          //Handling Ticket Suppliers
          const ticketSuppliers=await TicketSuppliers.find({})
          const ticketAgents=await TicketAgents.find({})


          //Saving the Entry Details to the Ticket Payment In Section if azad_Visa_Reference_Out_Name is Supplier
          if (
            entryData.ticket_Reference_Out === "SUPPLIERS" ||
            entryData.ticket_Reference_Out === "SUPPLIER" ||
            entryData.ticket_Reference_Out === "suppliers" ||
            entryData.ticket_Reference_Out === "supplier" ||
            entryData.ticket_Reference_Out === "Suppliers" ||
            entryData.ticket_Reference_Out === "Supplier"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentInTicketSupplier
              for (const supplier of ticketSuppliers){
                if(supplier.payment_In_Schema){
                  if(supplier.payment_In_Schema.supplierName.toLowerCase()===entryData.ticket_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                    existingPaymentInTicketSupplier = supplier;
                    break
                  }
                }
               }

              if (!existingPaymentInTicketSupplier) {
                // If the supplier does not exist, create a new one
                const newPaymentInTicketSupplier = new TicketSuppliers({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.ticket_Reference_Out_Name,
                    total_Azad_Visa_Price_In_PKR:
                      entryData?.ticket_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.ticket_Sales_PKR ?? 0,

                    total_Azad_Visa_Price_In_Curr:
                      entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    opening:0,
                  closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        azad_Visa_Price_In_PKR:
                          entryData?.ticket_Sales_PKR ?? 0,
                        azad_Visa_Price_In_Curr:
                          entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        country: entryData.country,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentInTicketSupplier.save();
                paymentInfo.newPaymentInTicketSupplier =
                  newPaymentInTicketSupplier;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentInTicketSupplier.payment_In_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentInTicketSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                    entryData?.ticket_Sales_PKR ?? 0;
                  existingPaymentInTicketSupplier.payment_In_Schema.remaining_Balance +=
                    entryData?.ticket_Sales_PKR ?? 0;

                  existingPaymentInTicketSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                    entryData?.ticket_Sales_Rate_Oth_Cur ?? 0;
                  existingPaymentInTicketSupplier.payment_In_Schema.remaining_Curr +=
                    entryData?.ticket_Sales_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentInTicketSupplier.payment_In_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      country: entryData.country,
                      azad_Visa_Price_In_PKR: entryData?.ticket_Sales_PKR ?? 0,
                      azad_Visa_Price_In_Curr:
                        entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentInTicketSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInTicketSupplier.payment_In_Schema.status;
                  const isStatusClosed = existingPaymentInTicketSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentInTicketSupplier.updateOne({
                    $inc: {
                      "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                        entryData?.ticket_Sales_PKR ?? 0,
                      "payment_In_Schema.remaining_Balance":
                        entryData?.ticket_Sales_PKR ?? 0,

                      "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                        entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                      "payment_In_Schema.remaining_Curr":
                        entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                      
                    },
                   
                  });
                }

                await existingPaymentInTicketSupplier.save();
                paymentInfo.existingPaymentInTicketSupplier =
                  existingPaymentInTicketSupplier;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
          if (
            entryData.ticket_Reference_In === "SUPPLIERS" ||
            entryData.ticket_Reference_In === "SUPPLIER" ||
            entryData.ticket_Reference_In === "suppliers" ||
            entryData.ticket_Reference_In === "supplier" ||
            entryData.ticket_Reference_In === "Suppliers" ||
            entryData.ticket_Reference_In === "Supplier"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentOutTicketSupplier
              for (const supplier of ticketSuppliers){
                if(supplier.payment_Out_Schema){
                  if(supplier.payment_Out_Schema.supplierName.toLowerCase()===entryData.ticket_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                    existingPaymentOutTicketSupplier = supplier;
                    break
                  }
                }
               }

              if (!existingPaymentOutTicketSupplier) {
                // If the supplier does not exist, create a new one
                const newPaymentOutTicketSupplier = new TicketSuppliers({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.ticket_Reference_In_Name,
                    total_Azad_Visa_Price_Out_PKR:
                      entryData?.ticket_Purchase_PKR ?? 0,
                    remaining_Balance: entryData?.ticket_Purchase_PKR ?? 0,

                    total_Azad_Visa_Price_Out_Curr:
                      entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        country: entryData.country,
                        contact: entryData.contact,
                        azad_Visa_Price_Out_PKR:
                          entryData?.ticket_Purchase_PKR ?? 0,
                        azad_Visa_Price_Out_Curr:
                          entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutTicketSupplier.save();
                paymentInfo.newPaymentOutTicketSupplier =
                  newPaymentOutTicketSupplier;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentOutTicketSupplier.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentOutTicketSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                    entryData?.ticket_Purchase_PKR ?? 0;
                  existingPaymentOutTicketSupplier.payment_Out_Schema.remaining_Balance +=
                    entryData?.ticket_Purchase_PKR ?? 0;

                  existingPaymentOutTicketSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                    entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0;
                  existingPaymentOutTicketSupplier.payment_Out_Schema.remaining_Curr +=
                    entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutTicketSupplier.payment_Out_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      country: entryData.country,
                      azad_Visa_Price_Out_PKR:
                        entryData?.ticket_Purchase_PKR ?? 0,
                      azad_Visa_Price_Out_Curr:
                        entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentOutTicketSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutTicketSupplier.payment_Out_Schema.status;
                  const isStatusClosed = existingPaymentOutTicketSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentOutTicketSupplier.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                        entryData?.ticket_Purchase_PKR ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.ticket_Purchase_PKR ?? 0,

                      "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                        entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                        
                    },
                 
                  });
                }

                await existingPaymentOutTicketSupplier.save();
                paymentInfo.existingPaymentOutTicketSupplier =
                  existingPaymentOutTicketSupplier;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
          if (
            entryData.ticket_Reference_Out === "AGENTS" ||
            entryData.ticket_Reference_Out === "AGENT" ||
            entryData.ticket_Reference_Out === "agents" ||
            entryData.ticket_Reference_Out === "agent" ||
            entryData.ticket_Reference_Out === "Agents" ||
            entryData.ticket_Reference_Out === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentInTicketAgent
              for (const supplier of ticketAgents){
                if(supplier.payment_In_Schema){
                  if(supplier.payment_In_Schema.supplierName.toLowerCase()===entryData.ticket_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                    existingPaymentInTicketAgent = supplier;
                    break
                  }
                }
               }

              if (!existingPaymentInTicketAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentInTicketAgent = new TicketAgents({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.ticket_Reference_Out_Name,
                    total_Azad_Visa_Price_In_PKR:
                      entryData?.ticket_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.ticket_Sales_PKR ?? 0,

                    total_Azad_Visa_Price_In_Curr:
                      entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        country: entryData.country,
                        contact: entryData.contact,
                        azad_Visa_Price_In_PKR:
                          entryData?.ticket_Sales_PKR ?? 0,
                        azad_Visa_Price_In_Curr:
                          entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentInTicketAgent.save();
                paymentInfo.newPaymentInTicketAgent = newPaymentInTicketAgent;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentInTicketAgent.payment_In_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentInTicketAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                    entryData?.ticket_Sales_PKR ?? 0;
                  existingPaymentInTicketAgent.payment_In_Schema.remaining_Balance +=
                    entryData?.ticket_Sales_PKR ?? 0;

                  existingPaymentInTicketAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                    entryData?.ticket_Sales_Rate_Oth_Cur ?? 0;
                  existingPaymentInTicketAgent.payment_In_Schema.remaining_Curr +=
                    entryData?.ticket_Sales_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentInTicketAgent.payment_In_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      country: entryData.country,
                      contact: entryData.contact,
                      azad_Visa_Price_In_PKR: entryData?.ticket_Sales_PKR ?? 0,
                      azad_Visa_Price_In_Curr:
                        entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );


                  const newStatus = existingPaymentInTicketAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInTicketAgent.payment_In_Schema.status;
                  const isStatusClosed = existingPaymentInTicketAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentInTicketAgent.updateOne({
                    $inc: {
                      "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                        entryData?.ticket_Sales_PKR ?? 0,
                      "payment_In_Schema.remaining_Balance":
                        entryData?.ticket_Sales_PKR ?? 0,

                      "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                        entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                      "payment_In_Schema.remaining_Curr":
                        entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                        
                    },
                 
                  });
                }

                await existingPaymentInTicketAgent.save();
                paymentInfo.existingPaymentInTicketAgent =
                  existingPaymentInTicketAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
          if (
            entryData.ticket_Reference_In === "AGENTS" ||
            entryData.ticket_Reference_In === "AGENT" ||
            entryData.ticket_Reference_In === "agents" ||
            entryData.ticket_Reference_In === "agent" ||
            entryData.ticket_Reference_In === "Agents" ||
            entryData.ticket_Reference_In === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentOutTicketAgent
            for (const supplier of ticketAgents){
              if(supplier.payment_Out_Schema){
                if(supplier.payment_Out_Schema.supplierName.toLowerCase()===entryData.ticket_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutTicketAgent = supplier;
                  break
                }
              }
             }

              if (!existingPaymentOutTicketAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentOutTicketAgent = new TicketAgents({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.ticket_Reference_In_Name,
                    total_Azad_Visa_Price_Out_PKR:
                      entryData?.ticket_Purchase_PKR ?? 0,
                    remaining_Balance: entryData?.ticket_Purchase_PKR ?? 0,

                    total_Azad_Visa_Price_Out_Curr:
                      entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        country: entryData.country,
                        azad_Visa_Price_Out_PKR:
                          entryData?.ticket_Purchase_PKR ?? 0,
                        azad_Visa_Price_Out_Curr:
                          entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutTicketAgent.save();
                paymentInfo.newPaymentOutTicketAgent = newPaymentOutTicketAgent;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentOutTicketAgent.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentOutTicketAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                    entryData?.ticket_Purchase_PKR ?? 0;
                  existingPaymentOutTicketAgent.payment_Out_Schema.remaining_Balance +=
                    entryData?.ticket_Purchase_PKR ?? 0;

                  existingPaymentOutTicketAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                    entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0;
                  existingPaymentOutTicketAgent.payment_Out_Schema.remaining_Curr +=
                    entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutTicketAgent.payment_Out_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      country: entryData.country,
                      azad_Visa_Price_Out_PKR:
                        entryData?.ticket_Purchase_PKR ?? 0,
                      azad_Visa_Price_Out_Curr:
                        entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentOutTicketAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutTicketAgent.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutTicketAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentOutTicketAgent.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                        entryData?.ticket_Purchase_PKR ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.ticket_Purchase_PKR ?? 0,

                      "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                        entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                        
                    },
                   
                  });
                }

                await existingPaymentOutTicketAgent.save();
                paymentInfo.existingPaymentOutTicketAgent =
                  existingPaymentOutTicketAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
          if (
            entryData.ticket_Reference_Out === "CANDIDATES" ||
            entryData.ticket_Reference_Out === "CANDIDATE" ||
            entryData.ticket_Reference_Out === "candidates" ||
            entryData.ticket_Reference_Out === "candidate" ||
            entryData.ticket_Reference_Out === "Candidates" ||
            entryData.ticket_Reference_Out === "Candidate"||
            entryData.ticket_Reference_Out === "DIRECTS" ||
            entryData.ticket_Reference_Out === "DIRECT" ||
            entryData.ticket_Reference_Out === "directs" ||
            entryData.ticket_Reference_Out === "direct" ||
            entryData.ticket_Reference_Out === "Directs" ||
            entryData.ticket_Reference_Out === "Direct"
          ) {
            try {
              // Check if the supplier with the given name and entry mode exists
              const existingPaymentInTicketCandidate =
                await TicketCandidate.findOne({
                  "payment_In_Schema.supplierName": entryData.name,
                  "payment_In_Schema.entry_Mode":
                    entryData.entry_Mode,
                  "payment_In_Schema.pp_No": entryData.pp_No,
                });

              if (!existingPaymentInTicketCandidate) {
                // If the supplier does not exist with the same entry mode, create a new one
                const newPaymentInTicketCandidate = new TicketCandidate({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_In_PKR: entryData?.ticket_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.ticket_Sales_PKR ?? 0,

                    total_Visa_Price_In_Curr:
                      entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.ticket_Sales_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    company: entryData.company,
                    trade: entryData.trade,
                    country: entryData.country,
                    contact: entryData.contact,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentInTicketCandidate.save();
                paymentInfo.newPaymentInTicketCandidate =
                  newPaymentInTicketCandidate;
              } else {
                // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
                // You may choose to update or do nothing based on your specific requirements
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
          if (
            entryData.ticket_Reference_In === "CANDIDATES" ||
            entryData.ticket_Reference_In === "CANDIDATE" ||
            entryData.ticket_Reference_In === "candidates" ||
            entryData.ticket_Reference_In === "candidate" ||
            entryData.ticket_Reference_In === "Candidates" ||
            entryData.ticket_Reference_In === "Candidate"||
            entryData.ticket_Reference_In === "DIRECTS" ||
            entryData.ticket_Reference_In === "DIRECT" ||
            entryData.ticket_Reference_In === "directs" ||
            entryData.ticket_Reference_In === "direct" ||
            entryData.ticket_Reference_In === "Directs" ||
            entryData.ticket_Reference_In === "Direct"
          ) {
            try {
              // Check if the supplier with the given name exists
              const existingPaymentOutTicketCandidate =
                await TicketCandidate.findOne({
                  "payment_Out_Schema.supplierName": entryData.name,
                  "payment_Out_Schema.entry_Mode":
                    entryData.entry_Mode,
                  "payment_Out_Schema.pp_No": entryData.pp_No,
                });

              if (!existingPaymentOutTicketCandidate) {
                // If the supplier does not exist, create a new one
                const newPaymentOutTicketCandidate = new TicketCandidate({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_Out_PKR:
                      entryData?.ticket_Purchase_PKR ?? 0,
                    remaining_Balance: entryData?.ticket_Purchase_PKR ?? 0,

                    total_Visa_Price_Out_Curr:
                      entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr:
                      entryData?.ticket_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    company: entryData.company,
                    trade: entryData.trade,
                    country: entryData.country,
                    contact: entryData.contact,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentOutTicketCandidate.save();
                paymentInfo.newPaymentOutTicketCandidate =
                  newPaymentOutTicketCandidate;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          // Handling Visit Suppliers
          const visitSuppliers=await VisitSuppliers.find({})
          const visitAgents=await VisitAgents.find({})

          //Saving the Entry Details to the Ticket Payment In Section if azad_Visa_Reference_Out_Name is Supplier
          if (
            entryData.visit_Reference_Out === "SUPPLIERS" ||
            entryData.visit_Reference_Out === "SUPPLIER" ||
            entryData.visit_Reference_Out === "suppliers" ||
            entryData.visit_Reference_Out === "supplier" ||
            entryData.visit_Reference_Out === "Suppliers" ||
            entryData.visit_Reference_Out === "Supplier"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentInVisitSupplier
              for (const supplier of visitSuppliers){
                if(supplier.payment_In_Schema){
                  if(supplier.payment_In_Schema.supplierName.toLowerCase()===entryData.visit_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                    existingPaymentInVisitSupplier = supplier;
                    break
                  }
                }
               }

              if (!existingPaymentInVisitSupplier) {
                // If the supplier does not exist, create a new one
                const newPaymentInVisitSupplier = new VisitSuppliers({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.visit_Reference_Out_Name,
                    total_Azad_Visa_Price_In_PKR:
                      entryData?.visit_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.visit_Sales_PKR ?? 0,

                    total_Azad_Visa_Price_In_Curr:
                      entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                    remaining_Curr: entryData?.visit_Sales_Rate_Oth_Curr ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        azad_Visa_Price_In_PKR: entryData?.visit_Sales_PKR ?? 0,
                        azad_Visa_Price_In_Curr:
                          entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                        company: entryData.company,
                        country: entryData.country,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentInVisitSupplier.save();
                paymentInfo.newPaymentInVisitSupplier =
                  newPaymentInVisitSupplier;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentInVisitSupplier.payment_In_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentInVisitSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                    entryData?.visit_Sales_PKR ?? 0;
                  existingPaymentInVisitSupplier.payment_In_Schema.remaining_Balance +=
                    entryData?.visit_Sales_PKR ?? 0;

                  existingPaymentInVisitSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                    entryData?.visit_Sales_Rate_Oth_Curr ?? 0;
                  existingPaymentInVisitSupplier.payment_In_Schema.remaining_Curr +=
                    entryData?.visit_Sales_Rate_Oth_Curr ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentInVisitSupplier.payment_In_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      azad_Visa_Price_In_PKR: entryData?.visit_Sales_PKR ?? 0,
                      azad_Visa_Price_In_Curr:
                        entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                      company: entryData.company,
                      country: entryData.country,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentInVisitSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInVisitSupplier.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInVisitSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentInVisitSupplier.updateOne({
                    $inc: {
                      "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                        entryData?.visit_Sales_PKR ?? 0,
                      "payment_In_Schema.remaining_Balance":
                        entryData?.visit_Sales_PKR ?? 0,

                      "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                        entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                      "payment_In_Schema.remaining_Curr":
                        entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                        
                    },
                   
                  });
                }

                await existingPaymentInVisitSupplier.save();
                paymentInfo.existingPaymentInVisitSupplier =
                  existingPaymentInVisitSupplier;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
          if (
            entryData.visit_Reference_In === "SUPPLIERS" ||
            entryData.visit_Reference_In === "SUPPLIER" ||
            entryData.visit_Reference_In === "suppliers" ||
            entryData.visit_Reference_In === "supplier" ||
            entryData.visit_Reference_In === "Suppliers" ||
            entryData.visit_Reference_In === "Supplier"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentOutVisitSupplier
              for (const supplier of visitSuppliers){
                if(supplier.payment_Out_Schema){
                  if(supplier.payment_Out_Schema.supplierName.toLowerCase()===entryData.visit_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                    existingPaymentOutVisitSupplier = supplier;
                    break
                  }
                }
               }

              if (!existingPaymentOutVisitSupplier) {
                // If the supplier does not exist, create a new one
                const newPaymentOutVisitSupplier = new VisitSuppliers({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.visit_Reference_In_Name,
                    total_Azad_Visa_Price_Out_PKR:
                      entryData?.visit_Purchase_Rate_PKR ?? 0,
                    remaining_Balance: entryData?.visit_Purchase_Rate_PKR ?? 0,

                    total_Azad_Visa_Price_Out_Curr:
                      entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                    curr_Country: entryData.cur_Country_Two,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        country: entryData.country,
                        azad_Visa_Price_Out_PKR:
                          entryData?.visit_Purchase_Rate_PKR ?? 0,
                        azad_Visa_Price_Out_Curr:
                          entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutVisitSupplier.save();
                paymentInfo.newPaymentOutVisitSupplier =
                  newPaymentOutVisitSupplier;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentOutVisitSupplier.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentOutVisitSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                    entryData?.visit_Purchase_Rate_PKR ?? 0;
                  existingPaymentOutVisitSupplier.payment_Out_Schema.remaining_Balance +=
                    entryData?.visit_Purchase_Rate_PKR ?? 0;

                  existingPaymentOutVisitSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                    entryData?.visit_Purchase_Rate_Oth_Cur ?? 0;
                  existingPaymentOutVisitSupplier.payment_Out_Schema.remaining_Curr +=
                    entryData?.visit_Purchase_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutVisitSupplier.payment_Out_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      azad_Visa_Price_Out_PKR:
                        entryData?.visit_Purchase_Rate_PKR ?? 0,
                      azad_Visa_Price_Out_Curr:
                        entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      country: entryData.country,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentOutVisitSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutVisitSupplier.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutVisitSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentOutVisitSupplier.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                        entryData?.visit_Purchase_Rate_PKR ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.visit_Purchase_Rate_PKR ?? 0,

                      "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                        entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                       
                    },
                    
                  });
                }

                await existingPaymentOutVisitSupplier.save();
                paymentInfo.existingPaymentOutVisitSupplier =
                  existingPaymentOutVisitSupplier;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
          if (
            entryData.visit_Reference_Out === "AGENTS" ||
            entryData.visit_Reference_Out === "AGENT" ||
            entryData.visit_Reference_Out === "agents" ||
            entryData.visit_Reference_Out === "agent" ||
            entryData.visit_Reference_Out === "Agents" ||
            entryData.visit_Reference_Out === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentInVisitAgent
            for (const supplier of visitAgents){
              if(supplier.payment_In_Schema){
                if(supplier.payment_In_Schema.supplierName.toLowerCase()===entryData.visit_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                  existingPaymentInVisitAgent = supplier;
                  break
                }
              }
             }

              if (!existingPaymentInVisitAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentInVisitAgent = new VisitAgents({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.visit_Reference_Out_Name,
                    total_Azad_Visa_Price_In_PKR:
                      entryData?.visit_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.visit_Sales_PKR ?? 0,

                    total_Azad_Visa_Price_In_Curr:
                      entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                    remaining_Curr: entryData?.visit_Sales_Rate_Oth_Curr ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        country: entryData.country,
                        azad_Visa_Price_In_PKR: entryData?.visit_Sales_PKR ?? 0,
                        azad_Visa_Price_In_Curr:
                          entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentInVisitAgent.save();
                paymentInfo.newPaymentInVisitAgent = newPaymentInVisitAgent;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentInVisitAgent.payment_In_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentInVisitAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                    entryData?.visit_Sales_PKR ?? 0;
                  existingPaymentInVisitAgent.payment_In_Schema.remaining_Balance +=
                    entryData?.visit_Sales_PKR ?? 0;

                  existingPaymentInVisitAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                    entryData?.visit_Sales_Rate_Oth_Curr ?? 0;
                  existingPaymentInVisitAgent.payment_In_Schema.remaining_Curr +=
                    entryData?.visit_Sales_Rate_Oth_Curr ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentInVisitAgent.payment_In_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      country: entryData.country,
                      azad_Visa_Price_In_PKR: entryData?.visit_Sales_PKR ?? 0,
                      azad_Visa_Price_In_Curr:
                        entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                      company: entryData.company,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date(),
                    }
                  );

                  const newStatus = existingPaymentInVisitAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInVisitAgent.payment_In_Schema.status;
                const isStatusClosed = existingPaymentInVisitAgent.payment_In_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentInVisitAgent.updateOne({
                    $inc: {
                      "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                        entryData?.visit_Sales_PKR ?? 0,
                      "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                        entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                      "payment_In_Schema.remaining_Balance":
                        entryData?.visit_Sales_PKR ?? 0,
                     
                      
                    },
                  
                  });
                }

                await existingPaymentInVisitAgent.save();
                paymentInfo.existingPaymentInVisitAgent =
                  existingPaymentInVisitAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
          if (
            entryData.visit_Reference_In === "AGENTS" ||
            entryData.visit_Reference_In === "AGENT" ||
            entryData.visit_Reference_In === "agents" ||
            entryData.visit_Reference_In === "agent" ||
            entryData.visit_Reference_In === "Agents" ||
            entryData.visit_Reference_In === "Agent"
          ) {
            try {
              // Check if the supplier with the given name exists
              let existingPaymentOutVisitAgent
              for (const supplier of visitAgents){
                if(supplier.payment_Out_Schema){
                  if(supplier.payment_Out_Schema.supplierName.toLowerCase()===entryData.visit_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
                    existingPaymentOutVisitAgent = supplier;
                    break
                  }
                }
               }

              if (!existingPaymentOutVisitAgent) {
                // If the supplier does not exist, create a new one
                const newPaymentOutVisitAgent = new VisitAgents({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.visit_Reference_In_Name,
                    total_Azad_Visa_Price_Out_PKR:
                      entryData?.visit_Purchase_Rate_PKR ?? 0,
                    remaining_Balance: entryData?.visit_Purchase_Rate_PKR ?? 0,

                    total_Azad_Visa_Price_Out_Curr:
                      entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    opening:0,
                    closing:0,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        trade: entryData.trade,
                        country: entryData.country,
                        contact: entryData.contact,
                        azad_Visa_Price_Out_PKR:
                          entryData?.visit_Purchase_Rate_PKR ?? 0,
                        azad_Visa_Price_Out_Curr:
                          entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                        company: entryData.company,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutVisitAgent.save();
                paymentInfo.newPaymentOutVisitAgent = newPaymentOutVisitAgent;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentOutVisitAgent.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentOutVisitAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                    entryData?.visit_Purchase_Rate_PKR ?? 0;
                  existingPaymentOutVisitAgent.payment_Out_Schema.remaining_Balance +=
                    entryData?.visit_Purchase_Rate_PKR ?? 0;

                  existingPaymentOutVisitAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                    entryData?.visit_Purchase_Rate_Oth_Cur ?? 0;
                  existingPaymentOutVisitAgent.payment_Out_Schema.remaining_Curr +=
                    entryData?.visit_Purchase_Rate_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutVisitAgent.payment_Out_Schema.persons.push(
                    {
                      name: entryData.name,
                      pp_No: entryData.pp_No,
                      entry_Mode: entryData.entry_Mode,
                      trade: entryData.trade,
                      contact: entryData.contact,
                      country: entryData.country,
                      azad_Visa_Price_Out_PKR:
                        entryData?.visit_Purchase_Rate_PKR ?? 0,
                      azad_Visa_Price_Out_Curr:
                        entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                      company: entryData.company,
                      final_Status: entryData.final_Status,
                      flight_Date: entryData.flight_Date,
                      entry_Date: new Date().toISOString().split("T")[0],
                    }
                  );

                  const newStatus = existingPaymentOutVisitAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutVisitAgent.payment_Out_Schema.status;
                const isStatusClosed = existingPaymentOutVisitAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentOutVisitAgent.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                        entryData?.visit_Purchase_Rate_PKR ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.visit_Purchase_Rate_PKR ?? 0,

                      "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                        entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                      
                      
                    },
                   
                  });
                }

                await existingPaymentOutVisitAgent.save();
                paymentInfo.existingPaymentOutVisitAgent =
                  existingPaymentOutVisitAgent;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }
          //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
          if (
            entryData.visit_Reference_Out === "CANDIDATES" ||
            entryData.visit_Reference_Out === "CANDIDATE" ||
            entryData.visit_Reference_Out === "candidates" ||
            entryData.visit_Reference_Out === "candidate" ||
            entryData.visit_Reference_Out === "Candidates" ||
            entryData.visit_Reference_Out === "Candidate"||
            entryData.visit_Reference_Out === "DIRECTS" ||
            entryData.visit_Reference_Out === "DIRECT" ||
            entryData.visit_Reference_Out === "directs" ||
            entryData.visit_Reference_Out === "direct" ||
            entryData.visit_Reference_Out === "Directs" ||
            entryData.visit_Reference_Out === "Direct"
          ) {
            try {
              // Check if the supplier with the given name and entry mode exists
              const existingPaymentInVisitCandidate =
                await VisitCandidate.findOne({
                  "payment_In_Schema.supplierName": entryData.name,
                  "payment_In_Schema.entry_Mode":
                    entryData.entry_Mode,
                  "payment_In_Schema.pp_No": entryData.pp_No,
                });

              if (!existingPaymentInVisitCandidate) {
                // If the supplier does not exist with the same entry mode, create a new one
                const newPaymentInVisitCandidate = new VisitCandidate({
                  payment_In_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_In_PKR: entryData?.visit_Sales_PKR ?? 0,
                    remaining_Balance: entryData?.visit_Sales_PKR ?? 0,

                    total_Visa_Price_In_Curr:
                      entryData?.visit_Sales_Rate_Oth_Curr ?? 0,
                    remaining_Curr: entryData?.visit_Sales_Rate_Oth_Curr ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    company: entryData.company,
                    trade: entryData.trade,
                    country: entryData.country,
                    contact: entryData.contact,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentInVisitCandidate.save();
                paymentInfo.newPaymentInVisitCandidate =
                  newPaymentInVisitCandidate;
              } else {
                // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
                // You may choose to update or do nothing based on your specific requirements
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
          if (
            entryData.visit_Reference_In === "CANDIDATES" ||
            entryData.visit_Reference_In === "CANDIDATE" ||
            entryData.visit_Reference_In === "candidate" ||
            entryData.visit_Reference_In === "candidates" ||
            entryData.visit_Reference_In === "Candidate" ||
            entryData.visit_Reference_In === "Candidates"||
            entryData.visit_Reference_Out === "DIRECTS" ||
            entryData.visit_Reference_In === "DIRECT" ||
            entryData.visit_Reference_In === "directs" ||
            entryData.visit_Reference_In === "direct" ||
            entryData.visit_Reference_In === "Directs" ||
            entryData.visit_Reference_In === "Direct"
          ) {
            try {
              // Check if the supplier with the given name exists
              const existingPaymentOutVisitCandidate =
                await VisitCandidate.findOne({
                  "payment_Out_Schema.supplierName": entryData.name,
                  "payment_Out_Schema.entry_Mode":
                    entryData.entry_Mode,
                  "payment_Out_Schema.pp_No": entryData.pp_No,
                });

              if (!existingPaymentOutVisitCandidate) {
                // If the supplier does not exist, create a new one
                const newPaymentOutVisitCandidate = new VisitCandidate({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.name,
                    total_Visa_Price_Out_PKR:
                      entryData?.visit_Purchase_Rate_PKR ?? 0,
                    remaining_Balance: entryData?.visit_Purchase_Rate_PKR ?? 0,

                    total_Visa_Price_Out_Curr:
                      entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.visit_Purchase_Rate_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_Two,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    company: entryData.company,
                    trade: entryData.trade,
                    country: entryData.country,
                    contact: entryData.contact,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                  },
                });

                await newPaymentOutVisitCandidate.save();
                paymentInfo.newPaymentOutVisitCandidate =
                  newPaymentOutVisitCandidate;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }




          const protectors=await Protector.find({})

          if (
            (entryData.protector_Reference_In === "PRPTECTORS" ||
            entryData.protector_Reference_In === "PRPTECTOR" ||
            entryData.protector_Reference_In === "Protectors" ||
            entryData.protector_Reference_In === "Protector" ||
            entryData.protector_Reference_In === "protectors" ||
            entryData.protector_Reference_In === "protector") && entryData.protector_Reference_In_Name
          ) {
            try {
              let existingPaymentOutProtector
            for(const protector of protectors){
              if(protector.payment_Out_Schema){
                if(protector.payment_Out_Schema.supplierName.toLowerCase()===entryData.protector_Reference_In_Name.toLowerCase()&& protector.payment_Out_Schema.status.toLowerCase()==='open'){
                  existingPaymentOutProtector=protector
                }
              }
            }

              if (!existingPaymentOutProtector) {
                // If the supplier does not exist, create a new one
                const newPaymentOutProtector = new Protector({
                  payment_Out_Schema: {
                    supplier_Id: newEntry._id,
                    supplierName: entryData.protector_Reference_In_Name,
                    total_Protector_Price_Out_PKR:
                      entryData?.protector_Price_In ?? 0,
                    remaining_Balance: entryData?.protector_Price_Out ?? 0,

                    total_Protector_Price_Out_Curr:
                      entryData?.protector_Price_In_Oth_Cur ?? 0,
                    remaining_Curr: entryData?.protector_Price_In_Oth_Cur ?? 0,

                    curr_Country: entryData.cur_Country_One,
                    persons: [
                      {
                        name: entryData.name,
                        pp_No: entryData.pp_No,
                        entry_Mode: entryData.entry_Mode,
                        protector_Out_PKR: entryData?.protector_Price_In ?? 0,
                        protector_Out_Curr:
                          entryData?.protector_Price_In_Oth_Cur ?? 0,
                        company: entryData.company,
                        trade: entryData.trade,
                        contact: entryData.contact,
                        country: entryData.country,
                        final_Status: entryData.final_Status,
                        flight_Date: entryData.flight_Date,
                        entry_Date: new Date().toISOString().split("T")[0],
                      },
                    ],
                  },
                });

                await newPaymentOutProtector.save();
                paymentInfo.newPaymentOutProtector = newPaymentOutProtector;
              } else {
                // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
                const existingPersonIndex =
                  existingPaymentOutProtector.payment_Out_Schema.persons.findIndex(
                    (person) =>
                      person.pp_No === entryData.pp_No &&
                      person.entry_Mode === entryData.entry_Mode &&
                      person.name === entryData.name
                  );

                if (existingPersonIndex !== -1) {
                  // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
                  existingPaymentOutProtector.payment_Out_Schema.total_Protector_Price_Out_PKR +=
                    entryData?.protector_Price_In ?? 0;
                  existingPaymentOutProtector.payment_Out_Schema.remaining_Balance +=
                    entryData?.protector_Price_In ?? 0;

                  existingPaymentOutProtector.payment_Out_Schema.total_Protector_Price_Out_Curr +=
                    entryData?.protector_Price_In_Oth_Cur ?? 0;
                  existingPaymentOutProtector.payment_Out_Schema.remaining_Curr +=
                    entryData?.protector_Price_In_Oth_Cur ?? 0;
                } else {
                  // If the person does not exist, add them to the persons array
                  existingPaymentOutProtector.payment_Out_Schema.persons.push({
                    name: entryData.name,
                    pp_No: entryData.pp_No,
                    entry_Mode: entryData.entry_Mode,
                    trade: entryData.trade,
                    contact: entryData.contact,
                    country: entryData.country,
                    protector_Out_PKR: entryData?.protector_Price_In ?? 0,
                    protector_Out_Curr:
                      entryData?.protector_Price_In_Oth_Cur ?? 0,
                    company: entryData.company,
                    final_Status: entryData.final_Status,
                    flight_Date: entryData.flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  });

                  // Update total_Visa_Price_In_PKR and other fields using $inc
                  await existingPaymentOutProtector.updateOne({
                    $inc: {
                      "payment_Out_Schema.total_Protector_Price_Out_PKR":
                        entryData?.protector_Price_In ?? 0,
                      "payment_Out_Schema.remaining_Balance":
                        entryData?.protector_Price_In ?? 0,

                      "payment_Out_Schema.total_Protector_Price_Out_Curr":
                        entryData?.protector_Price_In_Oth_Cur ?? 0,
                      "payment_Out_Schema.remaining_Curr":
                        entryData?.protector_Price_In_Oth_Cur ?? 0,
                    },
                  });
                }

                await existingPaymentOutProtector.save();
                paymentInfo.existingPaymentOutProtector =
                  existingPaymentOutProtector;
              }
            } catch (saveError) {
              console.error(saveError);
              res
                .status(500)
                .json({ message:saveError });
            }
          }

          await newEntry.save();
          addedEntries.push(newEntry);
        }
      }

      const responsePayload = {
        data: addedEntries,
        message: `${addedEntries.length} Entries added successfully`,
        paymentInfo: paymentInfo,
      };

      res.status(200).json(responsePayload);
    }
  } catch (err) {
    console.log(err)
    res.status(500).json({ message: err.message });
  }
};

// gettig all Enteries

const getEntry = async (req, res) => {
  try {
    const userId = req.user._id;

    const user = await User.findById(userId);

    if (!user) {
      res.status(404).json({ message: "User not found" });
    }

    if (user) {
      const entries = await Entries.find({}).sort({ createdAt: -1 });
      // Format createdAt dates using moment
      const formattedEntries = entries.map((entry) => ({

        ...entry._doc,

        createdAt: moment(entry.createdAt).format("YYYY-MM-DD"),
        updatedAt: moment(entry.updatedAt).format("YYYY-MM-DD"),
      }));
      res.status(200).json({ data: formattedEntries });
    }
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
};




// deleting an Entry
const delEntry = async (req, res) => {
  try {
    const userId = req.user._id;
    const user = await User.findById(userId);

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const { entryId } = req.body;

    if (!mongoose.Types.ObjectId.isValid(entryId)) {
      return res.status(400).json({ message: "Invalid Entry ID" });
    }
    const entryToDelete = await Entries.findById(entryId);
    if (!entryToDelete) {
      res.status(404).json({ message: "Entry not found" });
    }
    if (entryToDelete) {

      let {
        reference_Out,
        reference_In,
        name,
        pp_No,
        trade,
        company,
        contact,
        country,
        flight_Date,
        final_Status,
        remarks,
        entry_Mode,
        reference_Out_Name,
        visa_Sales_Rate_PKR,
        visa_Sale_Rate_Oth_Cur,
        cur_Country_One,
        reference_In_Name,
        visa_Purchase_Rate_PKR,
        visa_Purchase_Rate_Oth_Cur,
        cur_Country_Two,
        picture,
        visit_Sales_PKR,
        visit_Sales_Cur,
        visit_Purchase_Rate_PKR,
        visit_Purchase_Cur,
        visit_Reference_In_Name,
        visit_Reference_Out_Name,
        visit_Section_Picture,
        ticket_Sales_PKR,
        ticket_Sales_Cur,
        ticket_Purchase_PKR,
        ticket_Purchase_Cur,
        ticket_Reference_In_Name,
        ticket_Reference_Out_Name,
        ticket_Section_Picture,
        azad_Visa_Sales_PKR,
        azad_Visa_Sales_Cur,
        azad_Visa_Purchase_PKR,
        azad_Visa_Purchase_Cur,
        azad_Visa_Reference_In_Name,
        azad_Visa_Reference_Out_Name,
        azad_Visa_Section_Picture,
        protector_Price_In,
        protector_Price_In_Oth_Cur,
        protector_Reference_In_Name,
        protector_Reference_In,
        protector_Price_Out,
        visit_Reference_In,
        visit_Reference_Out,
        ticket_Reference_In,
        ticket_Reference_Out,
        azad_Visa_Reference_In,
        azad_Visa_Reference_Out,
        visit_Sales_Rate_Oth_Curr,
        visit_Purchase_Rate_Oth_Cur,
        ticket_Sales_Rate_Oth_Cur,
        ticket_Purchase_Rate_Oth_Cur,
        azad_Visa_Sales_Rate_Oth_Cur,
        azad_Visa_Purchase_Rate_Oth_Cur,
      } = entryToDelete;



      // check for if payments are made in Agents/Suppliers regarding the candidate to be deleted
      const agents=await Agents.find({})
      const suppliers=await Suppliers.find({})
      const azadSuppliers=await AzadSupplier.find({})
      const azadAgents=await AzadAgents.find({})
      const ticketSuppliers=await TicketSuppliers.find({})
      const ticketAgents=await TicketAgents.find({})
      const visitSuppliers=await VisitSuppliers.find({})
      const visitAgents=await VisitAgents.find({})
      const protectors=await Protector.find({})

      
      //  For Agents

      for (const agent of agents){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for (const agent of agents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

      //  For Suppliers

       for (const agent of suppliers){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }
       for (const agent of suppliers){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       //  For Azad Agents

      for (const agent of azadAgents){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return  res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for (const agent of azadAgents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

      //  For Azad Suppliers

       for (const agent of azadSuppliers){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }
       for (const agent of azadSuppliers){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }


         //  For Ticket Agents

      for (const agent of ticketAgents){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for (const agent of ticketAgents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

      //  For Ticket Suppliers

       for (const agent of ticketSuppliers){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }
       for (const agent of ticketSuppliers){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }


         //  For Visit Agents

      for (const agent of visitAgents){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for (const agent of visitAgents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

      //  For Visit Suppliers

       for (const agent of visitSuppliers){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return  res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }
       for (const agent of visitSuppliers){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
              return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

        //  For Protectors

      
         for (const agent of protectors){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with Protector :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/protector/details'})
                break;
              }
            }
           }
          }
         }


      await Entries.findByIdAndDelete(entryId);

      // Calculate new values
      const newVisaSalesRatePKR =
        visa_Sales_Rate_PKR !== undefined && visa_Sales_Rate_PKR !== null
          ? -visa_Sales_Rate_PKR
          : 0;
      const newVisaSaleRateOthCur =
        -visa_Sale_Rate_Oth_Cur !== undefined && visa_Sale_Rate_Oth_Cur !== null
          ? -visa_Sale_Rate_Oth_Cur
          : 0;
      const newVisaPurchaseRatePKR =
        visa_Purchase_Rate_PKR !== undefined && visa_Purchase_Rate_PKR !== null
          ? -visa_Purchase_Rate_PKR
          : 0;
      const newVisaPurchaseRateOthCur =
        visa_Purchase_Rate_Oth_Cur !== undefined &&
          visa_Purchase_Rate_Oth_Cur !== null
          ? -visa_Purchase_Rate_Oth_Cur
          : 0;

      const newAzad_Visa_Sales_PKR =
        azad_Visa_Sales_PKR !== undefined && azad_Visa_Sales_PKR !== null
          ? -azad_Visa_Sales_PKR
          : 0;
      const newAzad_Visa_Sales_Rate_Oth_Cur =
        azad_Visa_Sales_Rate_Oth_Cur !== undefined &&
          azad_Visa_Sales_Rate_Oth_Cur !== null
          ? -azad_Visa_Sales_Rate_Oth_Cur
          : 0;
      const newAzad_Visa_Purchase_PKR =
        azad_Visa_Purchase_PKR !== undefined && azad_Visa_Purchase_PKR !== null
          ? -azad_Visa_Purchase_PKR
          : 0;
      const newAzad_Visa_Purchase_Rate_Oth_Cur =
        azad_Visa_Purchase_Rate_Oth_Cur !== undefined &&
          azad_Visa_Purchase_Rate_Oth_Cur !== null
          ? -azad_Visa_Purchase_Rate_Oth_Cur
          : 0;

      const newTicket_Sales_PKR =
        ticket_Sales_PKR !== undefined && ticket_Sales_PKR !== null
          ? -ticket_Sales_PKR
          : 0;
      const newTicket_Sales_Rate_Oth_Cur =
        ticket_Sales_Rate_Oth_Cur !== undefined &&
          ticket_Sales_Rate_Oth_Cur !== null
          ? -ticket_Sales_Rate_Oth_Cur
          : 0;
      const newTicket_Purchase_PKR =
        ticket_Purchase_PKR !== undefined && ticket_Purchase_PKR !== null
          ? -ticket_Purchase_PKR
          : 0;
      const newTicket_Purchase_Rate_Oth_Cur =
        ticket_Purchase_Rate_Oth_Cur !== undefined &&
          ticket_Purchase_Rate_Oth_Cur !== null
          ? -ticket_Purchase_Rate_Oth_Cur
          : 0;

      const newVisit_Sales_PKR =
        visit_Sales_PKR !== undefined && visit_Sales_PKR !== null
          ? -visit_Sales_PKR
          : 0;
      const newVisit_Sales_Rate_Oth_Curr =
        visit_Sales_Rate_Oth_Curr !== undefined &&
          visit_Sales_Rate_Oth_Curr !== null
          ? -visit_Sales_Rate_Oth_Curr
          : 0;
      const newVisit_Purchase_PKR =
        visit_Purchase_Rate_PKR !== undefined &&
          visit_Purchase_Rate_PKR !== null
          ? -visit_Purchase_Rate_PKR
          : 0;
      const newVisit_Purchase_Rate_Oth_Cur =
        visit_Purchase_Rate_Oth_Cur !== undefined &&
          visit_Purchase_Rate_Oth_Cur !== null
          ? -visit_Purchase_Rate_Oth_Cur
          : 0;

      const newProtectorPriceIn =
        protector_Price_In !== undefined && protector_Price_In !== null
          ? -protector_Price_In
          : 0;
      const newProtector_Price_In_Oth_Cur =
        protector_Price_In_Oth_Cur !== undefined &&
          protector_Price_In_Oth_Cur !== null
          ? -protector_Price_In_Oth_Cur
          : 0;

      // Suppliers Sections

      // Update the Supplierd With PaymentIn by removing the person from the persons array
      if(reference_In_Name !== undefined &&
        reference_In_Name !== null &&
        reference_In_Name !== "" && ( reference_In.toLowerCase()==='supplier' || reference_In.toLowerCase()==='suppliers')){
          for (const supplier of suppliers){
            if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
              let supplierOutPersonIndex;
              
            supplierOutPersonIndex =
            supplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            )
             // If the person is found, remove it from the persons array
          if (supplierOutPersonIndex !== -1) {
    
            supplier?.payment_Out_Schema?.persons.splice(
              supplierOutPersonIndex,
              1
            );
            supplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
              newVisaPurchaseRatePKR /* Adjust based on your needs */;
              supplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
              newVisaPurchaseRateOthCur /* Adjust based on your needs */;
              supplier.payment_Out_Schema.remaining_Curr +=
              newVisaPurchaseRateOthCur /* Adjust based on your needs */;
              supplier.payment_Out_Schema.remaining_Balance +=
              newVisaPurchaseRatePKR /* Adjust based on your needs */;
            await supplier.save();
            break
          }

            }
          }
         
        }
     
        if(reference_Out_Name !== undefined &&
          reference_Out_Name !== null &&
          reference_Out_Name !== "" && ( reference_Out.toLowerCase()==='supplier' || reference_Out.toLowerCase()==='suppliers')){

            for (const supplier of suppliers){
              if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
                let supplierInPersonIndex;
                supplierInPersonIndex =
                supplier?.payment_In_Schema?.persons.findIndex(
                    (person) =>
                      person.name === name &&
                      person.entry_Mode === entry_Mode &&
                      person.pp_No === pp_No
                  );
                // If the person is found, remove it from the persons array
                if (supplierInPersonIndex !== -1) {
                  supplier.payment_In_Schema.persons.splice(
                    supplierInPersonIndex,
                    1
                  );
                  supplier.payment_In_Schema.total_Visa_Price_In_PKR +=
                    newVisaSalesRatePKR /* Adjust based on your needs */;
                    supplier.payment_In_Schema.total_Visa_Price_In_Curr +=
                    newVisaSaleRateOthCur /* Adjust based on your needs */;
                    supplier.payment_In_Schema.remaining_Curr +=
                    newVisaSaleRateOthCur /* Adjust based on your needs */;
                    supplier.payment_In_Schema.remaining_Balance +=
                    newVisaSalesRatePKR /* Adjust based on your needs */;
                  await supplier.save();
                  break
                }
              }
            }
          }
     
      // Agnets Sections

      if(reference_In_Name !== undefined &&
        reference_In_Name !== null &&
        reference_In_Name !== "" && ( reference_In.toLowerCase()==='agent' || reference_In.toLowerCase()==='agents')){

          for (const agent of agents){
            if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
              let agentOutPersonIndex;
              // Find the index of the person in the persons array
              agentOutPersonIndex =
              agent?.payment_Out_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
              // If the person is found, remove it from the persons array
              if (agentOutPersonIndex !== -1) {
                agent.payment_Out_Schema.persons.splice(
                  agentOutPersonIndex,
                  1
                );
                agent.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                  newVisaPurchaseRatePKR /* Adjust based on your needs */;
                  agent.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                  newVisaPurchaseRateOthCur /* Adjust based on your needs */;
                  agent.payment_Out_Schema.remaining_Curr +=
                  newVisaPurchaseRateOthCur /* Adjust based on your needs */;
                  agent.payment_Out_Schema.remaining_Balance +=
                  newVisaPurchaseRatePKR /* Adjust based on your needs */;
                await agent.save();
                break
              }
            }
          }

        }
      

        if(reference_Out_Name !== undefined &&
          reference_Out_Name !== null &&
          reference_Out_Name !== "" && ( reference_Out.toLowerCase()==='agent' || reference_Out.toLowerCase()==='agents')){
            for (const agent of agents){
              if(agent.payment_In_Schema &&agent.payment_In_Schema.persons){
                let agentInPersonIndex;
                agentInPersonIndex =
                agent?.payment_In_Schema?.persons.findIndex(
                    (person) =>
                      person.name === name &&
                      person.entry_Mode === entry_Mode &&
                      person.pp_No === pp_No
                  );
              
                // If the person is found, remove it from the persons array
                if (agentInPersonIndex !== -1) {
                  agent.payment_In_Schema.persons.splice(
                    agentInPersonIndex,
                    1
                  );
                  agent.payment_In_Schema.total_Visa_Price_In_PKR +=
                    newVisaSalesRatePKR /* Adjust based on your needs */;
                    agent.payment_In_Schema.total_Visa_Price_In_Curr +=
                    newVisaSaleRateOthCur /* Adjust based on your needs */;
                    agent.payment_In_Schema.remaining_Curr +=
                    newVisaSaleRateOthCur /* Adjust based on your needs */;
                    agent.payment_In_Schema.remaining_Balance +=
                    newVisaSalesRatePKR /* Adjust based on your needs */;
                  await agent.save();
                  break
                }
              }
            }
          }
      

      // Deleting From Candidates

      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null;
          await existingPaymentInCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentOutCandidate = await Candidate.findOne({
          "payment_Out_Schema.supplierName": name,
          
          "payment_Out_Schema.pp_No": pp_No,
        });

        if (existingPaymentOutCandidate) {
          console.log(
            "existingPaymentOutCandidate",
            existingPaymentOutCandidate
          );
          existingPaymentOutCandidate.payment_Out_Schema = null;
          await existingPaymentOutCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      // Azad Suppliers/Agents Sections

      if (
        azad_Visa_Reference_In_Name !== undefined &&
        azad_Visa_Reference_In_Name !== null &&
        azad_Visa_Reference_In_Name !== ""
      ) {
       
        for(const supplier of azadSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            let azadSupplierOutPersonIndex;
            // Find the index of the person in the persons array
            azadSupplierOutPersonIndex =
            supplier?.payment_Out_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (azadSupplierOutPersonIndex !== -1) {
              supplier?.payment_Out_Schema?.persons.splice(
                azadSupplierOutPersonIndex,
                1
              );
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Curr +=
                newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Balance +=
                newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }
       
      }

      if (
        azad_Visa_Reference_Out_Name !== undefined &&
        azad_Visa_Reference_Out_Name !== null &&
        azad_Visa_Reference_Out_Name !== ""
      ) {
        
        for (const supplier of azadSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            let azadSupplierInPersonIndex;

          azadSupplierInPersonIndex =
          supplier?.payment_In_Schema?.persons.findIndex(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );

          // If the person is found, remove it from the persons array
          if (azadSupplierInPersonIndex !== -1) {
            supplier?.payment_In_Schema?.persons.splice(
              azadSupplierInPersonIndex,
              1
            );
            supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
              newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
              supplier.payment_In_Schema.remaining_Curr +=
              newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
              supplier.payment_In_Schema.remaining_Balance +=
              newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
            await supplier.save();
            break
          }
          }
        }

      }

      if (
        azad_Visa_Reference_In_Name !== undefined &&
        azad_Visa_Reference_In_Name !== null &&
        azad_Visa_Reference_In_Name !== ""
      ) {
       
        for(const agent of azadAgents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            let azadAgentOutPersonIndex;

            // Find the index of the person in the persons array
            azadAgentOutPersonIndex =
            agent?.payment_Out_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
            // If the person is found, remove it from the persons array
            if (azadAgentOutPersonIndex !== -1) {
              agent?.payment_Out_Schema?.persons.splice(
                azadAgentOutPersonIndex,
                1
              );
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Curr +=
                newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Balance +=
                newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
      
      }

      if (
        azad_Visa_Reference_Out_Name !== undefined &&
        azad_Visa_Reference_Out_Name !== null &&
        azad_Visa_Reference_Out_Name !== ""
      ) {
       
        for (const agent of  azadAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            let azadAgentInPersonIndex;

            azadAgentInPersonIndex =
            agent?.payment_In_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
            // If the person is found, remove it from the persons array
            if (azadAgentInPersonIndex !== -1) {
              agent?.payment_In_Schema?.persons.splice(
                azadAgentInPersonIndex,
                1
              );
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
                agent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_In_Schema.remaining_Curr +=
                newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_In_Schema.remaining_Balance +=
                newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
       
      }

      // Deleting Azad Candidates
      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInTicketCandidate = await AzadCandidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

        if (existingPaymentInTicketCandidate) {
          existingPaymentInTicketCandidate.payment_In_Schema = null;
          await existingPaymentInTicketCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentOutTicketCandidate = await AzadCandidate.findOne({
          "payment_Out_Schema.supplierName": name,
          
          "payment_Out_Schema.pp_No": pp_No,
        });

        if (existingPaymentOutTicketCandidate) {
          existingPaymentOutTicketCandidate.payment_Out_Schema = null;
          await existingPaymentOutTicketCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      // Ticket Suppliers Sections

      // Update the Supplierd With PaymentIn by removing the person from the persons array
      if (
        ticket_Reference_In_Name !== undefined &&
        ticket_Reference_In_Name !== null &&
        ticket_Reference_In_Name !== ""
      ) {

        for (const supplier of ticketSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            let ticketSupplierOutPersonIndex;

            ticketSupplierOutPersonIndex =
            supplier?.payment_Out_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (ticketSupplierOutPersonIndex !== -1) {
              supplier?.payment_Out_Schema?.persons.splice(
                ticketSupplierOutPersonIndex,
                1
              );
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                newTicket_Purchase_PKR /* Adjust based on your needs */;
                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Curr +=
                newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Balance +=
                newTicket_Purchase_PKR /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }

      }

      if (
        ticket_Reference_Out_Name !== undefined &&
        ticket_Reference_Out_Name !== null &&
        ticket_Reference_Out_Name !== ""
      ) {
       
        for(const supplier of ticketSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            let ticketSupplierInPersonIndex;

            ticketSupplierInPersonIndex =
            supplier?.payment_In_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (ticketSupplierInPersonIndex !== -1) {
              supplier?.payment_In_Schema?.persons.splice(
                ticketSupplierInPersonIndex,
                1
              );
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                newTicket_Sales_PKR /* Adjust based on your needs */;
                supplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_In_Schema.remaining_Curr +=
                newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_In_Schema.remaining_Balance +=
                newTicket_Sales_PKR /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }
       
      }

      if (
        ticket_Reference_In_Name !== undefined &&
        ticket_Reference_In_Name !== null &&
        ticket_Reference_In_Name !== ""
      ) {
       for(const agent of ticketAgents){
        if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
          let ticketAgentOutPersonIndex;

          ticketAgentOutPersonIndex =
          agent?.payment_Out_Schema?.persons.findIndex(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );

          // If the person is found, remove it from the persons array
          if (ticketAgentOutPersonIndex !== -1) {
            agent?.payment_Out_Schema?.persons.splice(
              ticketAgentOutPersonIndex,
              1
            );
            agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              newTicket_Purchase_PKR /* Adjust based on your needs */;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
              agent.payment_Out_Schema.remaining_Curr +=
              newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
              agent.payment_Out_Schema.remaining_Balance +=
              newTicket_Purchase_PKR /* Adjust based on your needs */;
            await agent.save();
            break
          }
        }
       }
      
      }

      if (
        ticket_Reference_Out_Name !== undefined &&
        ticket_Reference_Out_Name !== null &&
        ticket_Reference_Out_Name !== ""
      ) {
        for(const agent of ticketAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            let ticketAgentInPersonIndex;

            ticketAgentInPersonIndex =
            agent?.payment_In_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (ticketAgentInPersonIndex !== -1) {
              agent?.payment_In_Schema?.persons.splice(
                ticketAgentInPersonIndex,
                1
              );
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                newTicket_Sales_PKR /* Adjust based on your needs */;
                agent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_In_Schema.remaining_Curr +=
                newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_In_Schema.remaining_Balance +=
                newTicket_Sales_PKR /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
     
      }

      //  Ticket Candidate Payment In/Out Schema Updation

      // Deleting Ticket Candidates

      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInTicketCandidate = await TicketCandidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

        if (existingPaymentInTicketCandidate) {
          existingPaymentInTicketCandidate.payment_In_Schema = null;
          await existingPaymentInTicketCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentOutTicketCandidate = await TicketCandidate.findOne(
          {
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          }
        );

        if (existingPaymentOutTicketCandidate) {
          existingPaymentOutTicketCandidate.payment_Out_Schema = null;
          await existingPaymentOutTicketCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      // Visit Suppliers  Sections

      // Update the Supplierd With PaymentIn by removing the person from the persons array
      if (
        visit_Reference_In_Name !== undefined &&
        visit_Reference_In_Name !== null &&
        visit_Reference_In_Name !== ""
      ) {

        for(const supplier of visitSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            let visitSupplierOutPersonIndex;

            visitSupplierOutPersonIndex =
            supplier?.payment_Out_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
            // If the person is found, remove it from the persons array
            if (visitSupplierOutPersonIndex !== -1) {
              supplier?.payment_Out_Schema?.persons.splice(
                visitSupplierOutPersonIndex,
                1
              );
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                newVisit_Purchase_PKR /* Adjust based on your needs */;
                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Curr +=
                newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Balance +=
                newVisit_Purchase_PKR /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }
       
      }

      if (
        visit_Reference_Out_Name !== undefined &&
        visit_Reference_Out_Name !== null &&
        visit_Reference_Out_Name !== ""
      ) {
       for(const supplier of visitSuppliers){
        if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
          let visitSupplierInPersonIndex;

          visitSupplierInPersonIndex =
          supplier?.payment_In_Schema?.persons.findIndex(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );

          // If the person is found, remove it from the persons array
          if (visitSupplierInPersonIndex !== -1) {
            supplier?.payment_In_Schema?.persons.splice(
              visitSupplierInPersonIndex,
              1
            );
            supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              newVisit_Sales_PKR /* Adjust based on your needs */;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
              newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
              supplier.payment_In_Schema.remaining_Curr +=
              newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
              supplier.payment_In_Schema.remaining_Balance +=
              newVisit_Sales_PKR /* Adjust based on your needs */;
            await supplier.save();
            break
          }
        }
       }
       
      }

      if (
        visit_Reference_In_Name !== undefined &&
        visit_Reference_In_Name !== null &&
        visit_Reference_In_Name !== ""
      ) {
        
        for(const agent of visitAgents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            let visitAgentOutPersonIndex;

            visitAgentOutPersonIndex =
            agent?.payment_Out_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (visitAgentOutPersonIndex !== -1) {
              agent?.payment_Out_Schema?.persons.splice(
                visitAgentOutPersonIndex,
                1
              );
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                newVisit_Purchase_PKR /* Adjust based on your needs */;
                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Curr +=
                newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Balance +=
                newVisit_Purchase_PKR /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
        
      }

      if (
        visit_Reference_Out_Name !== undefined &&
        visit_Reference_Out_Name !== null &&
        visit_Reference_Out_Name !== ""
      ) {
        
        for(const agent of visitAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            let visitAgentInPersonIndex;

            visitAgentInPersonIndex =
            agent?.payment_In_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
            // If the person is found, remove it from the persons array
            if (visitAgentInPersonIndex !== -1) {
              agent?.payment_In_Schema?.persons.splice(
                visitAgentInPersonIndex,
                1
              );
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                newVisit_Sales_PKR /* Adjust based on your needs */;
                agent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
                agent.payment_In_Schema.remaining_Curr +=
                newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
                agent.payment_In_Schema.remaining_Balance +=
                newVisit_Sales_PKR /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
      
      }

      // Deleting Ticket Candidates

      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInVisitCandidate = await VisitCandidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

        if (existingPaymentInVisitCandidate) {
          existingPaymentInVisitCandidate.payment_In_Schema = null;
          await existingPaymentInVisitCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      try {
        // Check if the supplier with the given name and entry mode exists
        const existingPaymentOutVisitCandidate = await VisitCandidate.findOne({
          "payment_Out_Schema.supplierName": name,
          
          "payment_Out_Schema.pp_No": pp_No,
        });

        if (existingPaymentOutVisitCandidate) {
          existingPaymentOutVisitCandidate.payment_Out_Schema = null;
          await existingPaymentOutVisitCandidate.save();
        }
      } catch (error) {
        console.log(error);
      }

      // Protector Section
      
    for(const protector of protectors){
      if (protector.payment_Out_Schema &&protector.payment_Out_Schema.persons){
        let protectorOutPersonIndex;

        protectorOutPersonIndex =
        protector?.payment_Out_Schema?.persons.findIndex(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        // If the person is found, remove it from the persons array
        if (protectorOutPersonIndex !== -1) {
          protector?.payment_Out_Schema?.persons.splice(
            protectorOutPersonIndex,
            1
          );
          protector.payment_Out_Schema.total_Protector_Price_Out_PKR +=
            newProtectorPriceIn /* Adjust based on your needs */;
            protector.payment_Out_Schema.total_Protector_Price_Out_Curr +=
            newProtector_Price_In_Oth_Cur /* Adjust based on your needs */;
            protector.payment_Out_Schema.remaining_Curr +=
            newProtector_Price_In_Oth_Cur /* Adjust based on your needs */;
            protector.payment_Out_Schema.remaining_Balance +=
            newProtectorPriceIn /* Adjust based on your needs */;
          await protector.save();
          break
        }
      }
    }
      

      res
        .status(200)
        .json({
          data: entryToDelete,
          message: `${name}'s Record deleted Successfully`,
        });
    }
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: error.message });
  }
}


// deleting Multiple Entries
const delMultipleEntries = async (req, res) => {
  try {
    const userId = req.user._id;
    const user = await User.findById(userId);

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const entries = req.body.entries;

    let addedEntries = [];

    for (const entryId of entries){
      if (!mongoose.Types.ObjectId.isValid(entryId)) {
        return res.status(400).json({ message: "Invalid Entry ID" });
      }
      const entryToDelete = await Entries.findById(entryId);
      if (!entryToDelete) {
        res.status(404).json({ message: "Entry not found" });
      }
      if (entryToDelete) {
        addedEntries.push(entryId)
        let {
          reference_Out,
          reference_In,
          name,
          pp_No,
          trade,
          company,
          contact,
          country,
          flight_Date,
          final_Status,
          remarks,
          entry_Mode,
          reference_Out_Name,
          visa_Sales_Rate_PKR,
          visa_Sale_Rate_Oth_Cur,
          cur_Country_One,
          reference_In_Name,
          visa_Purchase_Rate_PKR,
          visa_Purchase_Rate_Oth_Cur,
          cur_Country_Two,
          picture,
          visit_Sales_PKR,
          visit_Sales_Cur,
          visit_Purchase_Rate_PKR,
          visit_Purchase_Cur,
          visit_Reference_In_Name,
          visit_Reference_Out_Name,
          visit_Section_Picture,
          ticket_Sales_PKR,
          ticket_Sales_Cur,
          ticket_Purchase_PKR,
          ticket_Purchase_Cur,
          ticket_Reference_In_Name,
          ticket_Reference_Out_Name,
          ticket_Section_Picture,
          azad_Visa_Sales_PKR,
          azad_Visa_Sales_Cur,
          azad_Visa_Purchase_PKR,
          azad_Visa_Purchase_Cur,
          azad_Visa_Reference_In_Name,
          azad_Visa_Reference_Out_Name,
          azad_Visa_Section_Picture,
          protector_Price_In,
          protector_Price_In_Oth_Cur,
          protector_Reference_In_Name,
          protector_Reference_In,
          protector_Price_Out,
          visit_Reference_In,
          visit_Reference_Out,
          ticket_Reference_In,
          ticket_Reference_Out,
          azad_Visa_Reference_In,
          azad_Visa_Reference_Out,
          visit_Sales_Rate_Oth_Curr,
          visit_Purchase_Rate_Oth_Cur,
          ticket_Sales_Rate_Oth_Cur,
          ticket_Purchase_Rate_Oth_Cur,
          azad_Visa_Sales_Rate_Oth_Cur,
          azad_Visa_Purchase_Rate_Oth_Cur,
        } = entryToDelete;
  
  
  
        // check for if payments are made in Agents/Suppliers regarding the candidate to be deleted
        const agents=await Agents.find({})
        const suppliers=await Suppliers.find({})
        const azadSuppliers=await AzadSupplier.find({})
        const azadAgents=await AzadAgents.find({})
        const ticketSuppliers=await TicketSuppliers.find({})
        const ticketAgents=await TicketAgents.find({})
        const visitSuppliers=await VisitSuppliers.find({})
        const visitAgents=await VisitAgents.find({})
        const protectors=await Protector.find({})
  
        
        //  For Agents
  
        for (const agent of agents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
         for (const agent of agents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
        //  For Suppliers
  
         for (const agent of suppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of suppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
         //  For Azad Agents
  
        for (const agent of azadAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
         for (const agent of azadAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
        //  For Azad Suppliers
  
         for (const agent of azadSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of azadSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
  
           //  For Ticket Agents
  
        for (const agent of ticketAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
         for (const agent of ticketAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
        //  For Ticket Suppliers
  
         for (const agent of ticketSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of ticketSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
  
           //  For Visit Agents
  
        for (const agent of visitAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
         for (const agent of visitAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
        //  For Visit Suppliers
  
         for (const agent of visitSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of visitSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
  
          //  For Protectors
  
        
           for (const agent of protectors){
            if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
             let allCandPayments=agent.payment_Out_Schema.candPayments
             for (const payment of allCandPayments){
              let allPayments=payment.payments
              for (const candidatePayment of allPayments){
                if(candidatePayment.cand_Name.trim().toLowerCase()===entryToDelete.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToDelete.pp_No.trim().toLowerCase()){
                  return res.status(400).json({message:`You have made payments for this Candidate with Protector :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/protector/details'})
                  break;
                }
              }
             }
            }
           }
  
  
        await Entries.findByIdAndDelete(entryId);
  
        // Calculate new values
        const newVisaSalesRatePKR =
          visa_Sales_Rate_PKR !== undefined && visa_Sales_Rate_PKR !== null
            ? -visa_Sales_Rate_PKR
            : 0;
        const newVisaSaleRateOthCur =
          -visa_Sale_Rate_Oth_Cur !== undefined && visa_Sale_Rate_Oth_Cur !== null
            ? -visa_Sale_Rate_Oth_Cur
            : 0;
        const newVisaPurchaseRatePKR =
          visa_Purchase_Rate_PKR !== undefined && visa_Purchase_Rate_PKR !== null
            ? -visa_Purchase_Rate_PKR
            : 0;
        const newVisaPurchaseRateOthCur =
          visa_Purchase_Rate_Oth_Cur !== undefined &&
            visa_Purchase_Rate_Oth_Cur !== null
            ? -visa_Purchase_Rate_Oth_Cur
            : 0;
  
        const newAzad_Visa_Sales_PKR =
          azad_Visa_Sales_PKR !== undefined && azad_Visa_Sales_PKR !== null
            ? -azad_Visa_Sales_PKR
            : 0;
        const newAzad_Visa_Sales_Rate_Oth_Cur =
          azad_Visa_Sales_Rate_Oth_Cur !== undefined &&
            azad_Visa_Sales_Rate_Oth_Cur !== null
            ? -azad_Visa_Sales_Rate_Oth_Cur
            : 0;
        const newAzad_Visa_Purchase_PKR =
          azad_Visa_Purchase_PKR !== undefined && azad_Visa_Purchase_PKR !== null
            ? -azad_Visa_Purchase_PKR
            : 0;
        const newAzad_Visa_Purchase_Rate_Oth_Cur =
          azad_Visa_Purchase_Rate_Oth_Cur !== undefined &&
            azad_Visa_Purchase_Rate_Oth_Cur !== null
            ? -azad_Visa_Purchase_Rate_Oth_Cur
            : 0;
  
        const newTicket_Sales_PKR =
          ticket_Sales_PKR !== undefined && ticket_Sales_PKR !== null
            ? -ticket_Sales_PKR
            : 0;
        const newTicket_Sales_Rate_Oth_Cur =
          ticket_Sales_Rate_Oth_Cur !== undefined &&
            ticket_Sales_Rate_Oth_Cur !== null
            ? -ticket_Sales_Rate_Oth_Cur
            : 0;
        const newTicket_Purchase_PKR =
          ticket_Purchase_PKR !== undefined && ticket_Purchase_PKR !== null
            ? -ticket_Purchase_PKR
            : 0;
        const newTicket_Purchase_Rate_Oth_Cur =
          ticket_Purchase_Rate_Oth_Cur !== undefined &&
            ticket_Purchase_Rate_Oth_Cur !== null
            ? -ticket_Purchase_Rate_Oth_Cur
            : 0;
  
        const newVisit_Sales_PKR =
          visit_Sales_PKR !== undefined && visit_Sales_PKR !== null
            ? -visit_Sales_PKR
            : 0;
        const newVisit_Sales_Rate_Oth_Curr =
          visit_Sales_Rate_Oth_Curr !== undefined &&
            visit_Sales_Rate_Oth_Curr !== null
            ? -visit_Sales_Rate_Oth_Curr
            : 0;
        const newVisit_Purchase_PKR =
          visit_Purchase_Rate_PKR !== undefined &&
            visit_Purchase_Rate_PKR !== null
            ? -visit_Purchase_Rate_PKR
            : 0;
        const newVisit_Purchase_Rate_Oth_Cur =
          visit_Purchase_Rate_Oth_Cur !== undefined &&
            visit_Purchase_Rate_Oth_Cur !== null
            ? -visit_Purchase_Rate_Oth_Cur
            : 0;
  
        const newProtectorPriceIn =
          protector_Price_In !== undefined && protector_Price_In !== null
            ? -protector_Price_In
            : 0;
        const newProtector_Price_In_Oth_Cur =
          protector_Price_In_Oth_Cur !== undefined &&
            protector_Price_In_Oth_Cur !== null
            ? -protector_Price_In_Oth_Cur
            : 0;
  
        // Suppliers Sections
  
        // Update the Supplierd With PaymentIn by removing the person from the persons array
        if(reference_In_Name !== undefined &&
          reference_In_Name !== null &&
          reference_In_Name !== "" && ( reference_In.toLowerCase()==='supplier' || reference_In.toLowerCase()==='suppliers')){
            for (const supplier of suppliers){
              if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
                let supplierOutPersonIndex;
                
              supplierOutPersonIndex =
              supplier.payment_Out_Schema.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              )
               // If the person is found, remove it from the persons array
            if (supplierOutPersonIndex !== -1) {
      
              supplier?.payment_Out_Schema?.persons.splice(
                supplierOutPersonIndex,
                1
              );
              supplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                newVisaPurchaseRatePKR /* Adjust based on your needs */;
                supplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                newVisaPurchaseRateOthCur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Curr +=
                newVisaPurchaseRateOthCur /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Balance +=
                newVisaPurchaseRatePKR /* Adjust based on your needs */;
              await supplier.save();
              break
            }
  
              }
            }
           
          }
       
          if(reference_Out_Name !== undefined &&
            reference_Out_Name !== null &&
            reference_Out_Name !== "" && ( reference_Out.toLowerCase()==='supplier' || reference_Out.toLowerCase()==='suppliers')){
  
              for (const supplier of suppliers){
                if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
                  let supplierInPersonIndex;
                  supplierInPersonIndex =
                  supplier?.payment_In_Schema?.persons.findIndex(
                      (person) =>
                        person.name === name &&
                        person.entry_Mode === entry_Mode &&
                        person.pp_No === pp_No
                    );
                  // If the person is found, remove it from the persons array
                  if (supplierInPersonIndex !== -1) {
                    supplier.payment_In_Schema.persons.splice(
                      supplierInPersonIndex,
                      1
                    );
                    supplier.payment_In_Schema.total_Visa_Price_In_PKR +=
                      newVisaSalesRatePKR /* Adjust based on your needs */;
                      supplier.payment_In_Schema.total_Visa_Price_In_Curr +=
                      newVisaSaleRateOthCur /* Adjust based on your needs */;
                      supplier.payment_In_Schema.remaining_Curr +=
                      newVisaSaleRateOthCur /* Adjust based on your needs */;
                      supplier.payment_In_Schema.remaining_Balance +=
                      newVisaSalesRatePKR /* Adjust based on your needs */;
                    await supplier.save();
                    break
                  }
                }
              }
            }
       
        // Agnets Sections
  
        if(reference_In_Name !== undefined &&
          reference_In_Name !== null &&
          reference_In_Name !== "" && ( reference_In.toLowerCase()==='agent' || reference_In.toLowerCase()==='agents')){
  
            for (const agent of agents){
              if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
                let agentOutPersonIndex;
                // Find the index of the person in the persons array
                agentOutPersonIndex =
                agent?.payment_Out_Schema?.persons.findIndex(
                    (person) =>
                      person.name === name &&
                      person.entry_Mode === entry_Mode &&
                      person.pp_No === pp_No
                  );
                // If the person is found, remove it from the persons array
                if (agentOutPersonIndex !== -1) {
                  agent.payment_Out_Schema.persons.splice(
                    agentOutPersonIndex,
                    1
                  );
                  agent.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                    newVisaPurchaseRatePKR /* Adjust based on your needs */;
                    agent.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                    newVisaPurchaseRateOthCur /* Adjust based on your needs */;
                    agent.payment_Out_Schema.remaining_Curr +=
                    newVisaPurchaseRateOthCur /* Adjust based on your needs */;
                    agent.payment_Out_Schema.remaining_Balance +=
                    newVisaPurchaseRatePKR /* Adjust based on your needs */;
                  await agent.save();
                  break
                }
              }
            }
  
          }
        
  
          if(reference_Out_Name !== undefined &&
            reference_Out_Name !== null &&
            reference_Out_Name !== "" && ( reference_Out.toLowerCase()==='agent' || reference_Out.toLowerCase()==='agents')){
              for (const agent of agents){
                if(agent.payment_In_Schema &&agent.payment_In_Schema.persons){
                  let agentInPersonIndex;
                  agentInPersonIndex =
                  agent?.payment_In_Schema?.persons.findIndex(
                      (person) =>
                        person.name === name &&
                        person.entry_Mode === entry_Mode &&
                        person.pp_No === pp_No
                    );
                
                  // If the person is found, remove it from the persons array
                  if (agentInPersonIndex !== -1) {
                    agent.payment_In_Schema.persons.splice(
                      agentInPersonIndex,
                      1
                    );
                    agent.payment_In_Schema.total_Visa_Price_In_PKR +=
                      newVisaSalesRatePKR /* Adjust based on your needs */;
                      agent.payment_In_Schema.total_Visa_Price_In_Curr +=
                      newVisaSaleRateOthCur /* Adjust based on your needs */;
                      agent.payment_In_Schema.remaining_Curr +=
                      newVisaSaleRateOthCur /* Adjust based on your needs */;
                      agent.payment_In_Schema.remaining_Balance +=
                      newVisaSalesRatePKR /* Adjust based on your needs */;
                    await agent.save();
                    break
                  }
                }
              }
            }
        
  
        // Deleting From Candidates
  
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentInCandidate = await Candidate.findOne({
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          });
  
          if (existingPaymentInCandidate) {
            existingPaymentInCandidate.payment_In_Schema = null;
            await existingPaymentInCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentOutCandidate = await Candidate.findOne({
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          });
  
          if (existingPaymentOutCandidate) {
            console.log(
              "existingPaymentOutCandidate",
              existingPaymentOutCandidate
            );
            existingPaymentOutCandidate.payment_Out_Schema = null;
            await existingPaymentOutCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        // Azad Suppliers/Agents Sections
  
        if (
          azad_Visa_Reference_In_Name !== undefined &&
          azad_Visa_Reference_In_Name !== null &&
          azad_Visa_Reference_In_Name !== ""
        ) {
         
          for(const supplier of azadSuppliers){
            if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
              let azadSupplierOutPersonIndex;
              // Find the index of the person in the persons array
              azadSupplierOutPersonIndex =
              supplier?.payment_Out_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
    
              // If the person is found, remove it from the persons array
              if (azadSupplierOutPersonIndex !== -1) {
                supplier?.payment_Out_Schema?.persons.splice(
                  azadSupplierOutPersonIndex,
                  1
                );
                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Curr +=
                  newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Balance +=
                  newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
                await supplier.save();
                break
              }
            }
          }
         
        }
  
        if (
          azad_Visa_Reference_Out_Name !== undefined &&
          azad_Visa_Reference_Out_Name !== null &&
          azad_Visa_Reference_Out_Name !== ""
        ) {
          
          for (const supplier of azadSuppliers){
            if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
              let azadSupplierInPersonIndex;
  
            azadSupplierInPersonIndex =
            supplier?.payment_In_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (azadSupplierInPersonIndex !== -1) {
              supplier?.payment_In_Schema?.persons.splice(
                azadSupplierInPersonIndex,
                1
              );
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
                supplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_In_Schema.remaining_Curr +=
                newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                supplier.payment_In_Schema.remaining_Balance +=
                newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
              await supplier.save();
              break
            }
            }
          }
  
        }
  
        if (
          azad_Visa_Reference_In_Name !== undefined &&
          azad_Visa_Reference_In_Name !== null &&
          azad_Visa_Reference_In_Name !== ""
        ) {
         
          for(const agent of azadAgents){
            if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
              let azadAgentOutPersonIndex;
  
              // Find the index of the person in the persons array
              azadAgentOutPersonIndex =
              agent?.payment_Out_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
              // If the person is found, remove it from the persons array
              if (azadAgentOutPersonIndex !== -1) {
                agent?.payment_Out_Schema?.persons.splice(
                  azadAgentOutPersonIndex,
                  1
                );
                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
                  agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_Out_Schema.remaining_Curr +=
                  newAzad_Visa_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_Out_Schema.remaining_Balance +=
                  newAzad_Visa_Purchase_PKR /* Adjust based on your needs */;
                await agent.save();
                break
              }
            }
          }
        
        }
  
        if (
          azad_Visa_Reference_Out_Name !== undefined &&
          azad_Visa_Reference_Out_Name !== null &&
          azad_Visa_Reference_Out_Name !== ""
        ) {
         
          for (const agent of  azadAgents){
            if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
              let azadAgentInPersonIndex;
  
              azadAgentInPersonIndex =
              agent?.payment_In_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
              // If the person is found, remove it from the persons array
              if (azadAgentInPersonIndex !== -1) {
                agent?.payment_In_Schema?.persons.splice(
                  azadAgentInPersonIndex,
                  1
                );
                agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
                  agent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Curr +=
                  newAzad_Visa_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Balance +=
                  newAzad_Visa_Sales_PKR /* Adjust based on your needs */;
                await agent.save();
                break
              }
            }
          }
         
        }
  
        // Deleting Azad Candidates
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentInTicketCandidate = await AzadCandidate.findOne({
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          });
  
          if (existingPaymentInTicketCandidate) {
            existingPaymentInTicketCandidate.payment_In_Schema = null;
            await existingPaymentInTicketCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentOutTicketCandidate = await AzadCandidate.findOne({
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          });
  
          if (existingPaymentOutTicketCandidate) {
            existingPaymentOutTicketCandidate.payment_Out_Schema = null;
            await existingPaymentOutTicketCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        // Ticket Suppliers Sections
  
        // Update the Supplierd With PaymentIn by removing the person from the persons array
        if (
          ticket_Reference_In_Name !== undefined &&
          ticket_Reference_In_Name !== null &&
          ticket_Reference_In_Name !== ""
        ) {
  
          for (const supplier of ticketSuppliers){
            if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
              let ticketSupplierOutPersonIndex;
  
              ticketSupplierOutPersonIndex =
              supplier?.payment_Out_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
    
              // If the person is found, remove it from the persons array
              if (ticketSupplierOutPersonIndex !== -1) {
                supplier?.payment_Out_Schema?.persons.splice(
                  ticketSupplierOutPersonIndex,
                  1
                );
                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  newTicket_Purchase_PKR /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Curr +=
                  newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Balance +=
                  newTicket_Purchase_PKR /* Adjust based on your needs */;
                await supplier.save();
                break
              }
            }
          }
  
        }
  
        if (
          ticket_Reference_Out_Name !== undefined &&
          ticket_Reference_Out_Name !== null &&
          ticket_Reference_Out_Name !== ""
        ) {
         
          for(const supplier of ticketSuppliers){
            if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
              let ticketSupplierInPersonIndex;
  
              ticketSupplierInPersonIndex =
              supplier?.payment_In_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
    
              // If the person is found, remove it from the persons array
              if (ticketSupplierInPersonIndex !== -1) {
                supplier?.payment_In_Schema?.persons.splice(
                  ticketSupplierInPersonIndex,
                  1
                );
                supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  newTicket_Sales_PKR /* Adjust based on your needs */;
                  supplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Curr +=
                  newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Balance +=
                  newTicket_Sales_PKR /* Adjust based on your needs */;
                await supplier.save();
                break
              }
            }
          }
         
        }
  
        if (
          ticket_Reference_In_Name !== undefined &&
          ticket_Reference_In_Name !== null &&
          ticket_Reference_In_Name !== ""
        ) {
         for(const agent of ticketAgents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            let ticketAgentOutPersonIndex;
  
            ticketAgentOutPersonIndex =
            agent?.payment_Out_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (ticketAgentOutPersonIndex !== -1) {
              agent?.payment_Out_Schema?.persons.splice(
                ticketAgentOutPersonIndex,
                1
              );
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                newTicket_Purchase_PKR /* Adjust based on your needs */;
                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Curr +=
                newTicket_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Balance +=
                newTicket_Purchase_PKR /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
         }
        
        }
  
        if (
          ticket_Reference_Out_Name !== undefined &&
          ticket_Reference_Out_Name !== null &&
          ticket_Reference_Out_Name !== ""
        ) {
          for(const agent of ticketAgents){
            if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
              let ticketAgentInPersonIndex;
  
              ticketAgentInPersonIndex =
              agent?.payment_In_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
    
              // If the person is found, remove it from the persons array
              if (ticketAgentInPersonIndex !== -1) {
                agent?.payment_In_Schema?.persons.splice(
                  ticketAgentInPersonIndex,
                  1
                );
                agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  newTicket_Sales_PKR /* Adjust based on your needs */;
                  agent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Curr +=
                  newTicket_Sales_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Balance +=
                  newTicket_Sales_PKR /* Adjust based on your needs */;
                await agent.save();
                break
              }
            }
          }
       
        }
  
        //  Ticket Candidate Payment In/Out Schema Updation
  
        // Deleting Ticket Candidates
  
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentInTicketCandidate = await TicketCandidate.findOne({
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          });
  
          if (existingPaymentInTicketCandidate) {
            existingPaymentInTicketCandidate.payment_In_Schema = null;
            await existingPaymentInTicketCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentOutTicketCandidate = await TicketCandidate.findOne(
            {
              "payment_Out_Schema.supplierName": name,
              
              "payment_Out_Schema.pp_No": pp_No,
            }
          );
  
          if (existingPaymentOutTicketCandidate) {
            existingPaymentOutTicketCandidate.payment_Out_Schema = null;
            await existingPaymentOutTicketCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        // Visit Suppliers  Sections
  
        // Update the Supplierd With PaymentIn by removing the person from the persons array
        if (
          visit_Reference_In_Name !== undefined &&
          visit_Reference_In_Name !== null &&
          visit_Reference_In_Name !== ""
        ) {
  
          for(const supplier of visitSuppliers){
            if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
              let visitSupplierOutPersonIndex;
  
              visitSupplierOutPersonIndex =
              supplier?.payment_Out_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
              // If the person is found, remove it from the persons array
              if (visitSupplierOutPersonIndex !== -1) {
                supplier?.payment_Out_Schema?.persons.splice(
                  visitSupplierOutPersonIndex,
                  1
                );
                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  newVisit_Purchase_PKR /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Curr +=
                  newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Balance +=
                  newVisit_Purchase_PKR /* Adjust based on your needs */;
                await supplier.save();
                break
              }
            }
          }
         
        }
  
        if (
          visit_Reference_Out_Name !== undefined &&
          visit_Reference_Out_Name !== null &&
          visit_Reference_Out_Name !== ""
        ) {
         for(const supplier of visitSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            let visitSupplierInPersonIndex;
  
            visitSupplierInPersonIndex =
            supplier?.payment_In_Schema?.persons.findIndex(
                (person) =>
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
              );
  
            // If the person is found, remove it from the persons array
            if (visitSupplierInPersonIndex !== -1) {
              supplier?.payment_In_Schema?.persons.splice(
                visitSupplierInPersonIndex,
                1
              );
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                newVisit_Sales_PKR /* Adjust based on your needs */;
                supplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
                supplier.payment_In_Schema.remaining_Curr +=
                newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
                supplier.payment_In_Schema.remaining_Balance +=
                newVisit_Sales_PKR /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
         }
         
        }
  
        if (
          visit_Reference_In_Name !== undefined &&
          visit_Reference_In_Name !== null &&
          visit_Reference_In_Name !== ""
        ) {
          
          for(const agent of visitAgents){
            if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
              let visitAgentOutPersonIndex;
  
              visitAgentOutPersonIndex =
              agent?.payment_Out_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
    
              // If the person is found, remove it from the persons array
              if (visitAgentOutPersonIndex !== -1) {
                agent?.payment_Out_Schema?.persons.splice(
                  visitAgentOutPersonIndex,
                  1
                );
                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
                  newVisit_Purchase_PKR /* Adjust based on your needs */;
                  agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
                  newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_Out_Schema.remaining_Curr +=
                  newVisit_Purchase_Rate_Oth_Cur /* Adjust based on your needs */;
                  agent.payment_Out_Schema.remaining_Balance +=
                  newVisit_Purchase_PKR /* Adjust based on your needs */;
                await agent.save();
                break
              }
            }
          }
          
        }
  
        if (
          visit_Reference_Out_Name !== undefined &&
          visit_Reference_Out_Name !== null &&
          visit_Reference_Out_Name !== ""
        ) {
          
          for(const agent of visitAgents){
            if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
              let visitAgentInPersonIndex;
  
              visitAgentInPersonIndex =
              agent?.payment_In_Schema?.persons.findIndex(
                  (person) =>
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                );
              // If the person is found, remove it from the persons array
              if (visitAgentInPersonIndex !== -1) {
                agent?.payment_In_Schema?.persons.splice(
                  visitAgentInPersonIndex,
                  1
                );
                agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
                  newVisit_Sales_PKR /* Adjust based on your needs */;
                  agent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
                  newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Curr +=
                  newVisit_Sales_Rate_Oth_Curr /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Balance +=
                  newVisit_Sales_PKR /* Adjust based on your needs */;
                await agent.save();
                break
              }
            }
          }
        
        }
  
        // Deleting Ticket Candidates
  
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentInVisitCandidate = await VisitCandidate.findOne({
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          });
  
          if (existingPaymentInVisitCandidate) {
            existingPaymentInVisitCandidate.payment_In_Schema = null;
            await existingPaymentInVisitCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentOutVisitCandidate = await VisitCandidate.findOne({
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          });
  
          if (existingPaymentOutVisitCandidate) {
            existingPaymentOutVisitCandidate.payment_Out_Schema = null;
            await existingPaymentOutVisitCandidate.save();
          }
        } catch (error) {
          console.log(error);
        }
  
        // Protector Section
        
      for(const protector of protectors){
        if (protector.payment_Out_Schema &&protector.payment_Out_Schema.persons){
          let protectorOutPersonIndex;
  
          protectorOutPersonIndex =
          protector?.payment_Out_Schema?.persons.findIndex(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          // If the person is found, remove it from the persons array
          if (protectorOutPersonIndex !== -1) {
            protector?.payment_Out_Schema?.persons.splice(
              protectorOutPersonIndex,
              1
            );
            protector.payment_Out_Schema.total_Protector_Price_Out_PKR +=
              newProtectorPriceIn /* Adjust based on your needs */;
              protector.payment_Out_Schema.total_Protector_Price_Out_Curr +=
              newProtector_Price_In_Oth_Cur /* Adjust based on your needs */;
              protector.payment_Out_Schema.remaining_Curr +=
              newProtector_Price_In_Oth_Cur /* Adjust based on your needs */;
              protector.payment_Out_Schema.remaining_Balance +=
              newProtectorPriceIn /* Adjust based on your needs */;
            await protector.save();
            break
          }
        }
      }
      }
    
    }
    res
    .status(200)
    .json({
      message: `${addedEntries.length} Records deleted Successfully`,
    })
  } catch (error) {
    console.log(error);
    res.status(500).json({ message: error.message });
  }
}



// Updating a single Entry

// Updating a single Entry
const updateEntry = async (req, res) => {
  try {
    const userId = req.user._id;
    const user = await User.findById(userId);

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const { entryId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(entryId)) {
      return res.status(400).json({ message: "Invalid Entry ID" });
    }

    const entryToUpdate = await Entries.findById(entryId);

    if (!entryToUpdate) {
      return res.status(404).json({ message: "Entry not found" });
    }
    if (entryToUpdate) {
      let {
        reference_Out,
        reference_In,
        name,
        pp_No,
        trade,
        company,
        contact,
        country,
        flight_Date,
        final_Status,
        remarks,
        entry_Mode,
        reference_Out_Name,
        visa_Sales_Rate_PKR,
        visa_Sale_Rate_Oth_Cur,
        cur_Country_One,
        reference_In_Name,
        visa_Purchase_Rate_PKR,
        visa_Purchase_Rate_Oth_Cur,
        cur_Country_Two,
        picture,
        visit_Sales_PKR,
        visit_Sales_Cur,
        visit_Purchase_Rate_PKR,
        visit_Purchase_Cur,
        visit_Reference_In_Name,
        visit_Reference_Out_Name,
        visit_Section_Picture,
        ticket_Sales_PKR,
        ticket_Sales_Cur,
        ticket_Purchase_PKR,
        ticket_Purchase_Cur,
        ticket_Reference_In_Name,
        ticket_Reference_Out_Name,
        ticket_Section_Picture,
        azad_Visa_Sales_PKR,
        azad_Visa_Sales_Cur,
        azad_Visa_Purchase_PKR,
        azad_Visa_Purchase_Cur,
        azad_Visa_Reference_In_Name,
        azad_Visa_Reference_Out_Name,
        azad_Visa_Section_Picture,
        protector_Reference_In,
        protector_Reference_In_Name,
        protector_Price_In,
        protector_Price_In_Oth_Cur,
        protector_Price_Out,
        visit_Reference_In,
        visit_Reference_Out,
        ticket_Reference_In,
        ticket_Reference_Out,
        azad_Visa_Reference_In,
        azad_Visa_Reference_Out,
        visit_Sales_Rate_Oth_Curr,
        visit_Purchase_Rate_Oth_Cur,
        ticket_Sales_Rate_Oth_Cur,
        ticket_Purchase_Rate_Oth_Cur,
        azad_Visa_Sales_Rate_Oth_Cur,
        azad_Visa_Purchase_Rate_Oth_Cur,
      } = req.body;

      
      if(reference_Out && reference_Out.toLowerCase()==='candidate'){
        reference_Out_Name=name
      }
      if(reference_In && reference_In.toLowerCase()==='candidate'){
        reference_In_Name=name
      }

      if(visit_Reference_Out && visit_Reference_Out.toLowerCase()==='candidate'){
        visit_Reference_Out_Name=name
      }

      if(visit_Reference_In && visit_Reference_In.toLowerCase()==='candidate'){
        visit_Reference_In_Name=name
      }

      if(ticket_Reference_Out && ticket_Reference_Out.toLowerCase()==='candidate'){
        ticket_Reference_Out_Name=name
      }

      if(ticket_Reference_In && ticket_Reference_In.toLowerCase()==='candidate'){
        ticket_Reference_In_Name=name
      }
      if(azad_Visa_Reference_Out && azad_Visa_Reference_Out.toLowerCase()==='candidate'){
        azad_Visa_Reference_Out_Name=name
      }

      if(azad_Visa_Reference_In && azad_Visa_Reference_In.toLowerCase()==='candidate'){
        azad_Visa_Reference_In_Name=name
      }


      if(reference_Out && reference_Out_Name==''){
      res.status(400).json({message:'Enter Visa Reference Out Name'})
      return
      }
      if(reference_In && reference_In_Name==''){
        res.status(400).json({message:'Enter Visa Reference In Name'})
        return
        }

       if(visit_Reference_Out && visit_Reference_Out_Name==''){
          res.status(400).json({message:'Enter Visit Reference Out Name'})
          return
          }
          if(visit_Reference_In && visit_Reference_In_Name==''){
            res.status(400).json({message:'Enter Visit Reference In Name'})
            return
            }

            if(azad_Visa_Reference_Out && azad_Visa_Reference_Out_Name==''){
              res.status(400).json({message:'Enter Azad Visa Reference Out Name'})
              return
              }
              if(azad_Visa_Reference_In && azad_Visa_Reference_In_Name==''){
                res.status(400).json({message:'Enter Azad Visa Reference In Name'})
                return
                }

                if(ticket_Reference_Out && ticket_Reference_Out_Name==''){
                  res.status(400).json({message:'Enter Ticket Reference Out Name'})
                  return
                  }
                  if(ticket_Reference_In && ticket_Reference_In_Name==''){
                    res.status(400).json({message:'Enter Ticket Reference In Name'})
                    return
                    }

  
      const agents=await Agents.find({})
      const suppliers=await Suppliers.find({})
      const azadSuppliers=await AzadSupplier.find({})
      const azadAgents=await AzadAgents.find({})
      const ticketSuppliers=await TicketSuppliers.find({})
      const ticketAgents=await TicketAgents.find({})
      const visitSuppliers=await VisitSuppliers.find({})
      const visitAgents=await VisitAgents.find({})
      const protectors=await Protector.find({})

      // Update pictures if provided
      if (final_Status.trim().toLowerCase() === 'offer letter' || final_Status.trim().toLowerCase() === 'offer latter') {
        const newReminder = new Reminders({
          type: "Offer Letter",
          content: `${name}'s Final Status is updated to Offer Letter.`,
          date: new Date().toISOString().split("T")[0]
        });
        await newReminder.save();
      }
      
      if (final_Status.trim().toLowerCase() === 'e number' || final_Status.trim().toLowerCase() === 'e_number') {

        const newReminder = new Reminders({
          type: "E Number",
          content: `${name}'s Final Status is updated to E Number.`,
          date: new Date().toISOString().split("T")[0]
        });
        await newReminder.save();
      }
      
      if (final_Status.trim().toLowerCase() === 'qvc' || final_Status.trim().toLowerCase() === 'q_v_c') {
        const newReminder = new Reminders({
          type: "QVC",
          content: `${name}'s Final Status is updated to QVC.`,
          date: new Date().toISOString().split("T")[0]
        });
        await newReminder.save();
      }
      
      if (final_Status.trim().toLowerCase() === 'visa issued' || final_Status.trim().toLowerCase() === 'visa_issued' || final_Status.trim().toLowerCase() === 'vissa issued' || final_Status.trim().toLowerCase() === 'vissa_issued') {
        const newReminder = new Reminders({
          type: "Visa Issued",
          content: `${name}'s Final Status is updated to Visa Issued.`,
          date: new Date().toISOString().split("T")[0]
        });
        await newReminder.save();
      }
      
      if (final_Status.trim().toLowerCase() === 'ptn' || final_Status.trim().toLowerCase() === 'p_t_n') {
        const newReminder = new Reminders({
          type: "PTN",
          content: `${name}'s Final Status is updated to PTN.`,
          date: new Date().toISOString().split("T")[0]
        });
        await newReminder.save();
      }
      
      if (final_Status.trim().toLowerCase() === 'ticket' || final_Status.trim().toLowerCase() === 'tiket') {
        
        const newReminder = new Reminders({
          type: "Ticket",
          content: `${name}'s Final Status is updated to Ticket.`,
          date: new Date().toISOString().split("T")[0]
        });
        await newReminder.save();
      }
let mainPicture
let visitPicture
let ticketPicture
let azadPicture



      if (picture) {
        try {
          mainPicture = await cloudinary.uploader.upload(picture, {
            upload_preset: "rozgar",
          });
          if (!mainPicture) {
            return res
              .status(500)
              .json({ message: "Error uploading the main picture" });
          }
          entryToUpdate.picture = mainPicture.secure_url;
        } catch (uploadError) {
          console.error(uploadError);
          return res
            .status(500)
            .json({ message: "Error uploading the main picture" });
        }
      }
      if (visit_Section_Picture) {
        try {
          visitPicture = await cloudinary.uploader.upload(
            visit_Section_Picture,
            {
              upload_preset: "rozgar",
            }
          );
          if (!visitPicture) {
            return res
              .status(500)
              .json({ message: "Error uploading Visit Section Picture" });
          }
          entryToUpdate.visit_Section_Picture = visitPicture.secure_url;
        } catch (uploadError) {
          console.error(uploadError);
          return res
            .status(500)
            .json({ message: "Error uploading Visit Section Picture" });
        }
      }
      if (ticket_Section_Picture) {
        try {
          ticketPicture = await cloudinary.uploader.upload(
            ticket_Section_Picture,
            {
              upload_preset: "rozgar",
            }
          );
          if (!ticketPicture) {
            return res
              .status(500)
              .json({ message: "Error uploading Visit Section Picture" });
          }
          entryToUpdate.ticket_Section_Picture = ticketPicture.secure_url;
        } catch (uploadError) {
          console.error(uploadError);
          return res
            .status(500)
            .json({ message: "Error uploading Visit Section Picture" });
        }
      }
      if (azad_Visa_Section_Picture) {
        try {
          azadPicture = await cloudinary.uploader.upload(
            azad_Visa_Section_Picture,
            {
              upload_preset: "rozgar",
            }
          );
          if (!azadPicture) {
            return res
              .status(500)
              .json({ message: "Error uploading Visit Section Picture" });
          }
          entryToUpdate.azad_Visa_Section_Picture = azadPicture.secure_url;
        } catch (uploadError) {
          console.error(uploadError);
          return res
            .status(500)
            .json({ message: "Error uploading Visit Section Picture" });
        }
      }

      if((entryToUpdate.reference_In===''||entryToUpdate.reference_In===null ||entryToUpdate.reference_In===undefined) && reference_In.toLowerCase().includes('supplier')){
        try {
          let existingPaymentOutSupplier;
          for(const supplier of suppliers){
            if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.supplierName.toLowerCase()===reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
              existingPaymentOutSupplier=supplier
              break
            }
          }
         

          if (!existingPaymentOutSupplier) {
            // If the supplier does not exist, create a new one
            const newPaymentOutSupplier = new Suppliers({
              payment_Out_Schema: {
                supplier_Id: newEntry._id,
                supplierName: reference_In_Name,
                total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,
                remaining_Balance: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,

                curr_Country: cur_Country_Two,
                opening:0,
                closing:0,
                persons: [
                  {
                    name,
                    picture:picture,
                    pp_No,
                    entry_Mode,
                    contact,
                    trade,
                    country,
                    visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                      ? visa_Purchase_Rate_PKR
                      : 0,
                    remaining_Price: visa_Purchase_Rate_PKR
                      ? visa_Purchase_Rate_PKR
                      : 0,

                    visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,
                    remaining_Curr: visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,

                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  },
                ],
              },
            });

            await newPaymentOutSupplier.save();
            paymentInfo.newPaymentOutSupplier = newPaymentOutSupplier;
          } else {
            const existingPersonIndex =
              existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
                (person) =>
                  person.pp_No === pp_No &&
                  person.entry_Mode === entry_Mode &&
                  person.name === name
              );

            if (existingPersonIndex !== -1) {
              existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
              existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
                visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

              existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
              existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
                visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
                
            } else {
              // If the person does not exist, add them to the persons array
              existingPaymentOutSupplier.payment_Out_Schema.persons.push({
                name,
                pp_No,
                picture:picture,
                entry_Mode,
                trade,
                contact,
                country,
                visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,
                remaining_Price: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,

                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              });

              const newStatus = existingPaymentOutSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutSupplier.payment_Out_Schema.status;
              const isStatusClosed = existingPaymentOutSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
              // Update total_Visa_In_Price_PKR and other fields using $inc
              await existingPaymentOutSupplier.updateOne({
                $inc: {
                  "payment_Out_Schema.total_Visa_Price_Out_PKR":
                    visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                  "payment_Out_Schema.remaining_Balance":
                    visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,

                  "payment_Out_Schema.total_Visa_Price_Out_Curr":
                    visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,
                  "payment_Out_Schema.remaining_Curr":
                    visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,
                   
                },
               
              });
            }

            await existingPaymentOutSupplier.save();
            paymentInfo.existingPaymentOutSupplier =
              existingPaymentOutSupplier;
          }
        } catch (saveError) {
          console.error(saveError);
          res
            .status(500)
            .json({ message:saveError });
        }
      }


      if((entryToUpdate.reference_In===''||entryToUpdate.reference_In===null ||entryToUpdate.reference_In===undefined) && reference_In.toLowerCase().includes('agent')){
        try {
          let existingPaymentOutAgent
          for(const agent of agents){
            if(agent.payment_Out_Schema && agent.payment_Out_Schema.supplierName.toLowerCase()===reference_In_Name.toLowerCase()&& agent.payment_Out_Schema.status.toLowerCase()==='open'){
              existingPaymentOutAgent=agent
              break
            }
          }
    

          if (!existingPaymentOutAgent) {
            // If the supplier does not exist, create a new one
            const newPaymentOutAgent = new Agents({
              payment_Out_Schema: {
                supplier_Id: newEntry._id,
                supplierName: reference_In_Name,
                total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,
                remaining_Balance: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,

                curr_Country: cur_Country_Two,
                opening:0,
                closing:0,
                persons: [
                  {
                    name,
                    pp_No,
                    picture:picture,
                    entry_Mode,
                    contact,
                    trade,
                    country,
                    visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                      ? visa_Purchase_Rate_PKR
                      : 0,
                    remaining_Price: visa_Purchase_Rate_PKR
                      ? visa_Purchase_Rate_PKR
                      : 0,

                    visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,
                    remaining_Curr: visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,

                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  },
                ],
              },
            });

            await newPaymentOutAgent.save();
            paymentInfo.newPaymentOutAgent = newPaymentOutAgent;
          } else {
            const existingPersonIndex =
              existingPaymentOutAgent.payment_Out_Schema.persons.findIndex(
                (person) =>
                  person.pp_No === pp_No &&
                  person.entry_Mode === entry_Mode &&
                  person.name === name
              );

            if (existingPersonIndex !== -1) {
              existingPaymentOutAgent.payment_Out_Schema.total_Visa_Price_Out_PKR +=
                visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
              existingPaymentOutAgent.payment_Out_Schema.remaining_Balance +=
                visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

              existingPaymentOutAgent.payment_Out_Schema.total_Visa_Price_Out_Curr +=
                visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
              existingPaymentOutAgent.payment_Out_Schema.remaining_Curr +=
                visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
            } else {
              // If the person does not exist, add them to the persons array
              existingPaymentOutAgent.payment_Out_Schema.persons.push({
                name,
                pp_No,
                picture:picture,
                entry_Mode,
                trade,
                contact,
                country,
                visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,
                remaining_Price: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,
                visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              });

              const newStatus = existingPaymentOutAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAgent.payment_Out_Schema.status;
              const isStatusClosed = existingPaymentOutAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
              // Update total_Visa_In_Price_PKR and other fields using $inc
              await existingPaymentOutAgent.updateOne({
               
                $inc: {
                  "payment_Out_Schema.total_Visa_Price_Out_PKR":
                    visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                  "payment_Out_Schema.remaining_Balance":
                    visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,

                  "payment_Out_Schema.total_Visa_Price_Out_Curr":
                    visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,
                  "payment_Out_Schema.remaining_Curr":
                    visa_Purchase_Rate_Oth_Cur
                      ? visa_Purchase_Rate_Oth_Cur
                      : 0,
                      

                },
              
               
              });
            }

            await existingPaymentOutAgent.save();
            paymentInfo.existingPaymentOutAgent = existingPaymentOutAgent;
          }
        } catch (saveError) {
          console.error(saveError);
          res
            .status(500)
            .json({ message:saveError });
        }
      }

      if((entryToUpdate.reference_In===''||entryToUpdate.reference_In===null ||entryToUpdate.reference_In===undefined) && reference_In.toLowerCase().includes('candidate')){
        try {
          // Check if the supplier with the given name exists
          const existingPaymentOutCandidate = await Candidate.findOne({
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          });

          if (!existingPaymentOutCandidate) {
            // If the supplier does not exist, create a new one
            const newPaymentOutCandidate = new Candidate({
              payment_Out_Schema: {
                supplier_Id: newEntry._id,
                supplierName: name,
                picture:picture,
                total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,
                remaining_Balance: visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Purchase_Rate_Oth_Cur
                  ? visa_Purchase_Rate_Oth_Cur
                  : 0,

                curr_Country: cur_Country_Two,
                pp_No: pp_No,
                entry_Mode: entry_Mode,
                company: company,
                trade: trade,
                country: country,
                contact: contact,
                final_Status: final_Status,
                flight_Date: flight_Date,
              },
            });

            await newPaymentOutCandidate.save();
            paymentInfo.newPaymentOutCandidate = newPaymentOutCandidate;
          }
        } catch (saveError) {
          console.error(saveError);
          res
            .status(500)
            .json({ message:saveError });
        }
      }


      if((entryToUpdate.reference_Out===''||entryToUpdate.reference_Out===null ||entryToUpdate.reference_Out===undefined) && reference_Out.toLowerCase().includes('supplier')){
        try {
          let existingPaymentInSupplier;
          // Check if the supplier with the given name exists
          for(const supplier of suppliers){
            if(supplier.payment_In_Schema){
              if(supplier.payment_In_Schema.supplierName.toLowerCase()===reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
                existingPaymentInSupplier=supplier
                break
              }
            }
           
          }
         
          if (!existingPaymentInSupplier) {
            // If the supplier does not exist, create a new one
            const newPaymentInSupplier = new Suppliers({
              payment_In_Schema: {
                supplier_Id: newEntry._id,
                supplierName: reference_Out_Name,
                total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,
                remaining_Balance: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
                curr_Country: cur_Country_One,
              opening:0,
               
                closing:0,
                persons: [
                  {
                    name,
                    pp_No,
                    picture:picture,
                    entry_Mode,
                    contact,
                    country,
                    trade,
                    visa_Price_In_PKR: visa_Sales_Rate_PKR
                      ? visa_Sales_Rate_PKR
                      : 0,
                    remaining_Price: visa_Sales_Rate_PKR
                      ? visa_Sales_Rate_PKR
                      : 0,
                    visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                      ? visa_Sale_Rate_Oth_Cur
                      : 0,
                    remaining_Curr: visa_Sale_Rate_Oth_Cur
                      ? visa_Sale_Rate_Oth_Cur
                      : 0,

                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  },
                ],
              },
            });

            await newPaymentInSupplier.save();
            paymentInfo.newPaymentInSupplier = newPaymentInSupplier;
          } else {
            // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
            const existingPersonIndex =
              existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
                (person) =>
                  person.pp_No === pp_No &&
                  person.entry_Mode === entry_Mode &&
                  person.name === name
              );

            if (existingPersonIndex !== -1) {
             
              existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
                visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
              existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
                visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
              existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
                visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
              existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
                visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
                if(existingPaymentInSupplier.payment_In_Schema.status.toLowerCase()==='closed'){
                  existingPaymentInSupplier.payment_In_Schema.status='Open'
                  existingPaymentInSupplier.payment_In_Schema.opening+=existingPaymentInSupplier.payment_In_Schema.closing+visa_Sales_Rate_PKR
                }
            } else {
              // If the person does not exist, add them to the persons array
              existingPaymentInSupplier.payment_In_Schema.persons.push({
                name,
                pp_No,
                picture:picture,
                entry_Mode,
                contact,
                country,
                trade,
                visa_Price_In_PKR: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,
                remaining_Price: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,
                visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,

                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              });

              const newStatus = existingPaymentInSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInSupplier.payment_In_Schema.status;
              const isStatusClosed = existingPaymentInSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
              // Update total_Visa_Price_In_PKR and other fields using $inc
              await existingPaymentInSupplier.updateOne({
            
                $inc: {
                  "payment_In_Schema.total_Visa_Price_In_PKR":
                    visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                  "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  "payment_In_Schema.total_Visa_Price_In_Curr":
                    visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                  "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                   
                },
                
              })
            }

            await existingPaymentInSupplier.save();
            paymentInfo.existingPaymentInSupplier = existingPaymentInSupplier;
          }
        } catch (saveError) {
          console.error(saveError);
          res
            .status(500)
            .json({ message:saveError });
        }
      }

      if((entryToUpdate.reference_Out===''||entryToUpdate.reference_Out===null ||entryToUpdate.reference_Out===undefined) && reference_Out.toLowerCase().includes('agent')){
        try {
          let existingPaymentInAgent;
          for(const agent of agents){
            if(agent.payment_In_Schema && agent.payment_In_Schema.supplierName.toLowerCase()===reference_Out_Name.toLowerCase()&& agent.payment_In_Schema.status.toLowerCase()==='open'){
              existingPaymentInAgent=agent
              break
            }
          }
         

          if (!existingPaymentInAgent) {
            // If the supplier does not exist, create a new one
            const newPaymentInAgent = new Agents({
              payment_In_Schema: {
                supplier_Id: newEntry._id,
                supplierName: reference_Out_Name,
                total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,
                remaining_Balance: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
                curr_Country: cur_Country_One,
                opening:0, 
                closing:0,
                persons: [
                  {
                    name,
                    pp_No,
                    picture:picture,
                    entry_Mode,
                    contact,
                    country,
                    trade,
                    visa_Price_In_PKR: visa_Sales_Rate_PKR
                      ? visa_Sales_Rate_PKR
                      : 0,
                    remaining_Price: visa_Sales_Rate_PKR
                      ? visa_Sales_Rate_PKR
                      : 0,
                    visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                      ? visa_Sale_Rate_Oth_Cur
                      : 0,
                    remaining_Curr: visa_Sale_Rate_Oth_Cur
                      ? visa_Sale_Rate_Oth_Cur
                      : 0,

                    company: company,
                    final_Status: final_Status,
                    flight_Date: flight_Date,
                    entry_Date: new Date().toISOString().split("T")[0],
                  },
                ],
              },
            });

            await newPaymentInAgent.save();
            paymentInfo.newPaymentInAgent = newPaymentInAgent;
          } else {
            // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
            const existingPersonIndex =
              existingPaymentInAgent.payment_In_Schema.persons.findIndex(
                (person) =>
                  person.pp_No === pp_No &&
                  person.entry_Mode === entry_Mode &&
                  person.name === name
              );

            if (existingPersonIndex !== -1) {
              // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
              existingPaymentInAgent.payment_In_Schema.total_Visa_Price_In_PKR +=
                visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
              existingPaymentInAgent.payment_In_Schema.remaining_Balance +=
                visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;

              existingPaymentInAgent.payment_In_Schema.total_Visa_Price_In_Curr +=
                visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
              existingPaymentInAgent.payment_In_Schema.remaining_Curr +=
                visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
            } else {
              // If the person does not exist, add them to the persons array
              existingPaymentInAgent.payment_In_Schema.persons.push({
                name,
                pp_No,
                picture:picture,
                entry_Mode,
                contact,
                country,
                trade,
                visa_Price_In_PKR: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,
                remaining_Price: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,
                visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,

                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              });

              const newStatus = existingPaymentInAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAgent.payment_In_Schema.status;
              const isStatusClosed = existingPaymentInAgent.payment_In_Schema.status.toLowerCase() === 'closed';
              // Update total_Visa_Price_In_PKR and other fields using $inc
              await existingPaymentInAgent.updateOne({
              
                $inc: {
                  "payment_In_Schema.total_Visa_Price_In_PKR":
                    visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                  "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,

                  "payment_In_Schema.total_Visa_Price_In_Curr":
                    visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                  "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                },
            
              });
            }

            await existingPaymentInAgent.save();
            paymentInfo.existingPaymentInAgent = existingPaymentInAgent;
          }
        } catch (saveError) {
          console.error(saveError);
          res
            .status(500)
            .json({ message:saveError });
        }
      }

      if((entryToUpdate.reference_Out===''||entryToUpdate.reference_Out===null ||entryToUpdate.reference_Out===undefined) && reference_Out.toLowerCase().includes('candidate')){
        try {
          // Check if the supplier with the given name and entry mode exists
          const existingPaymentInCandidate = await Candidate.findOne({
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          });

          if (!existingPaymentInCandidate) {
            // If the supplier does not exist with the same entry mode, create a new one
            const newPaymentInCandidate = new Candidate({
              payment_In_Schema: {
                supplier_Id: newEntry._id,
                supplierName: name,
                picture:picture,
                total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,
                remaining_Balance: visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
                remaining_Curr: visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,

                curr_Country: cur_Country_One,
                pp_No: pp_No,
                entry_Mode: entry_Mode,
                company: company,
                country: country,
                trade: trade,
                contact: contact,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            });

            await newPaymentInCandidate.save();
            paymentInfo.newPaymentInCandidate = newPaymentInCandidate;
          }
        } catch (saveError) {
          console.error(saveError);
          res
            .status(500)
            .json({ message:saveError });
        }
      }


//Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Supplier
if (
  (entryToUpdate.azad_Visa_Reference_Out === "" ||
    entryToUpdate.azad_Visa_Reference_Out === null||
    entryToUpdate.azad_Visa_Reference_Out === undefined
   ) &&
   azad_Visa_Reference_Out.toLowerCase().includes('supplier')
) {
  try {
    let existingPaymentInAzadSupplier
    for (const supplier of azadSuppliers){
      if(supplier.payment_In_Schema){
        if(supplier.payment_In_Schema && supplier.payment_In_Schema.supplierName.toLowerCase()===azad_Visa_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
          existingPaymentInAzadSupplier = supplier;
          break
        }
      }
     }
  
    if (!existingPaymentInAzadSupplier) {
      // If the supplier does not exist, create a new one
      const newPaymentInAzadSupplier = new AzadSupplier({
        payment_In_Schema: {
          supplier_Id: newEntry._id,
          supplierName: azad_Visa_Reference_Out_Name,
          total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
            ? azad_Visa_Sales_PKR
            : 0,
          remaining_Balance: azad_Visa_Sales_PKR
            ? azad_Visa_Sales_PKR
            : 0,

          total_Azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0,
          remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0,

          curr_Country: cur_Country_One,
          opening:0,
          closing:0,
          persons: [
            {
              name,
              picture:azad_Visa_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            },
          ],
        },
      });

      await newPaymentInAzadSupplier.save();
      paymentInfo.newPaymentInAzadSupplier = newPaymentInAzadSupplier;
    } else {
      // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
      const existingPersonIndex =
        existingPaymentInAzadSupplier.payment_In_Schema.persons.findIndex(
          (person) =>
            person.pp_No === pp_No &&
            person.entry_Mode === entry_Mode &&
            person.name === name
        );

      if (existingPersonIndex !== -1) {
        // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
        existingPaymentInAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
          azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
        existingPaymentInAzadSupplier.payment_In_Schema.remaining_Balance +=
          azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

        existingPaymentInAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
          azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0;
        existingPaymentInAzadSupplier.payment_In_Schema.remaining_Curr +=
          azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0;
      } else {
        // If the person does not exist, add them to the persons array
        existingPaymentInAzadSupplier.payment_In_Schema.persons.push(
          {
            name,
            picture:azad_Visa_Section_Picture,
            pp_No,
            entry_Mode,
            trade,
            country,
            contact,
            azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
              ? azad_Visa_Sales_PKR
              : 0,
            azad_Visa_Price_In_Curr: azad_Visa_Sales_Cur
              ? azad_Visa_Sales_Cur
              : 0,
            company: company,
            final_Status: final_Status,
            flight_Date: flight_Date,
            entry_Date: new Date().toISOString().split("T")[0],
          }
        );

        const newStatus = existingPaymentInAzadSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAzadSupplier.payment_In_Schema.status;
        const isStatusClosed = existingPaymentInAzadSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
        // Update total_Visa_Price_In_PKR and other fields using $inc
        await existingPaymentInAzadSupplier.updateOne({
        
          $inc: {
            "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
            "payment_In_Schema.remaining_Balance":
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

            "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
            "payment_In_Schema.remaining_Curr":
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
                
          },
         
        });
      }

      await existingPaymentInAzadSupplier.save();
      paymentInfo.existingPaymentInAzadSupplier =
        existingPaymentInAzadSupplier;
    }
  } catch (saveError) {
    console.error(saveError);
    res
      .status(500)
      .json({ message:saveError });
  }
}

//Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
if (
  (entryToUpdate.azad_Visa_Reference_In === "" ||
    entryToUpdate.azad_Visa_Reference_In === null||
    entryToUpdate.azad_Visa_Reference_In === undefined
   ) &&
   azad_Visa_Reference_In.toLowerCase().includes('supplier')
) {
  try {
    let existingPaymentOutAzadSupplier
    for (const supplier of azadSuppliers){
      if(supplier.payment_Out_Schema){
        if(supplier.payment_Out_Schema.supplierName.toLowerCase()===azad_Visa_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
          existingPaymentOutAzadSupplier = supplier;
          break
        }
      }
     }
   

    if (!existingPaymentOutAzadSupplier) {
      // If the supplier does not exist, create a new one
      const newPaymentOutAzadSupplier = new AzadSupplier({
        payment_Out_Schema: {
          supplier_Id: newEntry._id,
          supplierName: azad_Visa_Reference_In_Name,
          total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
            ? azad_Visa_Purchase_PKR
            : 0,
          remaining_Balance: azad_Visa_Purchase_PKR
            ? azad_Visa_Purchase_PKR
            : 0,

          total_Azad_Visa_Price_Out_Curr:
            azad_Visa_Purchase_Rate_Oth_Cur
              ? azad_Visa_Purchase_Rate_Oth_Cur
              : 0,
          remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0,

          curr_Country: cur_Country_Two,
          opening:0,
          closing:0,
          persons: [
            {
              name,
              picture:azad_Visa_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            },
          ],
        },
      });

      await newPaymentOutAzadSupplier.save();
      paymentInfo.newPaymentOutAzadSupplier = newPaymentOutAzadSupplier;
    } else {
      // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
      const existingPersonIndex =
        existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
          (person) =>
            person.pp_No === pp_No &&
            person.entry_Mode === entry_Mode &&
            person.name === name
        );

      if (existingPersonIndex !== -1) {
        // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
        existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
          azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
        existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
          azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

        existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
          azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0;
        existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
          azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0;
      } else {
        // If the person does not exist, add them to the persons array
        existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
          {
            name,
            picture:azad_Visa_Section_Picture,
            pp_No,
            entry_Mode,
            trade,
            country,
            contact,
            azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
              ? azad_Visa_Purchase_PKR
              : 0,
            azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
              ? azad_Visa_Purchase_Rate_Oth_Cur
              : 0,
            company: company,
            final_Status: final_Status,
            flight_Date: flight_Date,
            entry_Date: new Date().toISOString().split("T")[0],
          }
        );
        const newStatus = existingPaymentOutAzadSupplier.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAzadSupplier.payment_Out_Schema.status;
        const isStatusClosed = existingPaymentOutAzadSupplier.payment_Out_Schema.status.toLowerCase() === 'closed';
        // Update total_Visa_Price_In_PKR and other fields using $inc
        await existingPaymentOutAzadSupplier.updateOne({
        
          $inc: {
            "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
            "payment_Out_Schema.remaining_Balance":
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

            "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
            "payment_Out_Schema.remaining_Curr":
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
               
          },
          
        });
      }

      await existingPaymentOutAzadSupplier.save();
      paymentInfo.existingPaymentOutAzadSupplier =
        existingPaymentOutAzadSupplier;
    }
  } catch (saveError) {
    console.error(saveError);
    res
      .status(500)
      .json({ message:saveError });
  }
}

//Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
if (
  (entryToUpdate.azad_Visa_Reference_Out === "" ||
    entryToUpdate.azad_Visa_Reference_Out === null||
    entryToUpdate.azad_Visa_Reference_Out === undefined
   ) &&
   azad_Visa_Reference_Out.toLowerCase().includes('agent')
) {
  try {
    let existingPaymentInAzadAgent
    for (const supplier of azadAgents){
      if(supplier.payment_In_Schema){
        if(supplier.payment_In_Schema.supplierName.toLowerCase()===azad_Visa_Reference_Out_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
          existingPaymentInAzadAgent = supplier;
          break
        }
      }
     }
    // Check if the supplier with the given name exists
  
    if (!existingPaymentInAzadAgent) {
      // If the supplier does not exist, create a new one
      const newPaymentInAzadAgent = new AzadAgents({
        payment_In_Schema: {
          supplier_Id: newEntry._id,
          supplierName: azad_Visa_Reference_Out_Name,
          total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
            ? azad_Visa_Sales_PKR
            : 0,
          remaining_Balance: azad_Visa_Sales_PKR
            ? azad_Visa_Sales_PKR
            : 0,

          total_Azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0,
          remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0,

          curr_Country: cur_Country_One,
          opening:0,
          closing:0,
          persons: [
            {
              name,
              picture:azad_Visa_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              azad_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            },
          ],
        },
      });

      await newPaymentInAzadAgent.save();
      paymentInfo.newPaymentInAzadAgent = newPaymentInAzadAgent;
    } else {
      // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
      const existingPersonIndex =
        existingPaymentInAzadAgent.payment_In_Schema.persons.findIndex(
          (person) =>
            person.pp_No === pp_No &&
            person.entry_Mode === entry_Mode &&
            person.name === name
        );

      if (existingPersonIndex !== -1) {
        // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
        existingPaymentInAzadAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
          azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
        existingPaymentInAzadAgent.payment_In_Schema.remaining_Balance +=
          azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

        existingPaymentInAzadAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
          azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0;
        existingPaymentInAzadAgent.payment_In_Schema.remaining_Curr +=
          azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0;
      } else {
        // If the person does not exist, add them to the persons array
        existingPaymentInAzadAgent.payment_In_Schema.persons.push(
          {
            name,
            picture:azad_Visa_Section_Picture,
            pp_No,
            entry_Mode,
            trade,
            country,
            contact,
            azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
              ? azad_Visa_Sales_PKR
              : 0,
            azad_Visa_Price_In_Curr: azad_Visa_Sales_Cur
              ? azad_Visa_Sales_Cur
              : 0,
            company: company,
            final_Status: final_Status,
            flight_Date: flight_Date,
            entry_Date: new Date().toISOString().split("T")[0],
          }
        );
        const newStatus = existingPaymentInAzadAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInAzadAgent.payment_In_Schema.status;
        const isStatusClosed = existingPaymentInAzadAgent.payment_In_Schema.status.toLowerCase() === 'closed';
        // Update total_Visa_Price_In_PKR and other fields using $inc
        await existingPaymentInAzadAgent.updateOne({
         
          $inc: {
            "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
            "payment_In_Schema.remaining_Balance":
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

            "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
            "payment_In_Schema.remaining_Curr":
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
               
          },
          
        });
      }

      await existingPaymentInAzadAgent.save();
      paymentInfo.existingPaymentInAzadAgent =
        existingPaymentInAzadAgent;
    }
  } catch (saveError) {
    console.error(saveError);
    res
      .status(500)
      .json({ message:saveError });
  }
}

//Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
if (
  (entryToUpdate.azad_Visa_Reference_In === "" ||
    entryToUpdate.azad_Visa_Reference_In === null||
    entryToUpdate.azad_Visa_Reference_In === undefined
   ) &&
   azad_Visa_Reference_In.toLowerCase().includes('agent')
) {
  try {
    let existingPaymentOutAzadAgent
    for (const supplier of azadAgents){
      if(supplier.payment_Out_Schema){
        if(supplier.payment_Out_Schema.supplierName.toLowerCase()===azad_Visa_Reference_In_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
          existingPaymentOutAzadAgent = supplier;
          break
        }
      }
     }
   
    if (!existingPaymentOutAzadAgent) {
      // If the supplier does not exist, create a new one
      const newPaymentOutAzadAgent = new AzadAgents({
        payment_Out_Schema: {
          supplier_Id: newEntry._id,
          supplierName: azad_Visa_Reference_In_Name,
          total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
            ? azad_Visa_Purchase_PKR
            : 0,
          remaining_Balance: azad_Visa_Purchase_PKR
            ? azad_Visa_Purchase_PKR
            : 0,

          total_Azad_Visa_Price_Out_Curr:
            azad_Visa_Purchase_Rate_Oth_Cur
              ? azad_Visa_Purchase_Rate_Oth_Cur
              : 0,
          remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0,

          curr_Country: cur_Country_Two,
          opening:0,
          closing:0,
          persons: [
            {
              name,
              picture:azad_Visa_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            },
          ],
        },
      });

      await newPaymentOutAzadAgent.save();
      paymentInfo.newPaymentOutAzadAgent = newPaymentOutAzadAgent;
    } else {
      // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
      const existingPersonIndex =
        existingPaymentOutAzadAgent.payment_Out_Schema.persons.findIndex(
          (person) =>
            person.pp_No === pp_No &&
            person.entry_Mode === entry_Mode &&
            person.name === name
        );

      if (existingPersonIndex !== -1) {
        // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
        existingPaymentOutAzadAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
          azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
        existingPaymentOutAzadAgent.payment_Out_Schema.remaining_Balance +=
          azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

        existingPaymentOutAzadAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
          azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0;
        existingPaymentOutAzadAgent.payment_Out_Schema.remaining_Curr +=
          azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0;
      } else {
        // If the person does not exist, add them to the persons array
        existingPaymentOutAzadAgent.payment_Out_Schema.persons.push(
          {
            name,
            picture:azad_Visa_Section_Picture,
            pp_No,
            entry_Mode,
            trade,
            country,
            contact,
            azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
              ? azad_Visa_Purchase_PKR
              : 0,
            azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
              ? azad_Visa_Purchase_Rate_Oth_Cur
              : 0,
            company: company,
            final_Status: final_Status,
            flight_Date: flight_Date,
            entry_Date: new Date().toISOString().split("T")[0],
          }
        );

        const newStatus = existingPaymentOutAzadAgent.payment_Out_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentOutAzadAgent.payment_Out_Schema.status;
        const isStatusClosed = existingPaymentOutAzadAgent.payment_Out_Schema.status.toLowerCase() === 'closed';
        // Update total_Visa_Price_In_PKR and other fields using $inc
        await existingPaymentOutAzadAgent.updateOne({
          
          $inc: {
            "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
            "payment_Out_Schema.remaining_Balance":
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

            "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
            "payment_Out_Schema.remaining_Curr":
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
                
          },
         
        });
      }

      await existingPaymentOutAzadAgent.save();
      paymentInfo.existingPaymentOutAzadAgent =
        existingPaymentOutAzadAgent;
    }
  } catch (saveError) {
    console.error(saveError);
    res
      .status(500)
      .json({ message:saveError });
  }
}

//Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
if (
  (entryToUpdate.azad_Visa_Reference_Out === "" ||
    entryToUpdate.azad_Visa_Reference_Out === null||
    entryToUpdate.azad_Visa_Reference_Out === undefined
   ) &&
   azad_Visa_Reference_Out.toLowerCase().includes('candidate')
) {
  try {
    // Check if the supplier with the given name and entry mode exists
    const existingPaymentInAzadCandidate = await AzadCandidate.findOne({
      "payment_In_Schema.supplierName": name,
      
      "payment_In_Schema.pp_No": pp_No,
    });

    if (!existingPaymentInAzadCandidate) {
      // If the supplier does not exist with the same entry mode, create a new one
      const newPaymentInAzadCandidate = new AzadCandidate({
        payment_In_Schema: {
          supplier_Id: newEntry._id,
          supplierName: name,
          picture:azad_Visa_Section_Picture,
          total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
            ? azad_Visa_Sales_PKR
            : 0,
          remaining_Balance: azad_Visa_Sales_PKR
            ? azad_Visa_Sales_PKR
            : 0,

          total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0,
          remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
            ? azad_Visa_Sales_Rate_Oth_Cur
            : 0,

          curr_Country: cur_Country_One,
          pp_No: pp_No,
          entry_Mode: entry_Mode,
          company: company,
          trade: trade,
          country: country,
          contact: contact,
          final_Status: final_Status,
          flight_Date: flight_Date,
        },
      });

      await newPaymentInAzadCandidate.save();
      paymentInfo.newPaymentInAzadCandidate = newPaymentInAzadCandidate;
    } else {
      // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
      // You may choose to update or do nothing based on your specific requirements
    }
  } catch (saveError) {
    console.error(saveError);
    res
      .status(500)
      .json({ message:saveError });
  }
}

//Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
if (
  (entryToUpdate.azad_Visa_Reference_In === "" ||
    entryToUpdate.azad_Visa_Reference_In === null||
    entryToUpdate.azad_Visa_Reference_In === undefined
   ) &&
   azad_Visa_Reference_In.toLowerCase().includes('candidate')
) {
  try {
    // Check if the supplier with the given name exists
    const existingPaymentOutAzadCandidate = await AzadCandidate.findOne(
      {
        "payment_Out_Schema.supplierName": name,
        
        "payment_Out_Schema.pp_No": pp_No,
      }
    );

    if (!existingPaymentOutAzadCandidate) {
      // If the supplier does not exist, create a new one
      const newPaymentOutAzadCandidate = new AzadCandidate({
        payment_Out_Schema: {
          supplier_Id: newEntry._id,
          supplierName: name,
          picture:azad_Visa_Section_Picture,
          total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
            ? azad_Visa_Purchase_PKR
            : 0,
          remaining_Balance: azad_Visa_Purchase_PKR
            ? azad_Visa_Purchase_PKR
            : 0,

          total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0,
          remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
            ? azad_Visa_Purchase_Rate_Oth_Cur
            : 0,

          curr_Country: cur_Country_Two,
          pp_No: pp_No,
          entry_Mode: entry_Mode,
          company: company,
          trade: trade,
          country: country,
          contact: contact,
          final_Status: final_Status,
          flight_Date: flight_Date,
        },
      });

      await newPaymentOutAzadCandidate.save();
      paymentInfo.newPaymentOutAzadCandidate =
        newPaymentOutAzadCandidate;
    }
  } catch (saveError) {
    console.error(saveError);
    res
      .status(500)
      .json({ message:saveError });
  }
}


  //Saving the Entry Details to the Ticket Payment In Section if azad_Visa_Reference_Out_Name is Supplier
  if (
    (entryToUpdate.ticket_Reference_Out === "" ||
      entryToUpdate.ticket_Reference_Out === null||
      entryToUpdate.ticket_Reference_Out === undefined
     ) &&
     ticket_Reference_Out.toLowerCase().includes('supplier')
   
  ) {
    try {
      let existingPaymentInTicketSupplier
      for (const supplier of ticketSuppliers){
        if(supplier.payment_In_Schema){
          if(supplier.payment_In_Schema.supplierName.toLowerCase()===ticket_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
            existingPaymentInTicketSupplier = supplier;
            break
          }
        }
       }
     
      if (!existingPaymentInTicketSupplier) {
        // If the supplier does not exist, create a new one
        const newPaymentInTicketSupplier = new TicketSuppliers({
          payment_In_Schema: {
            supplier_Id: newEntry._id,
            supplierName: ticket_Reference_Out_Name,
            total_Azad_Visa_Price_In_PKR: ticket_Sales_PKR
              ? ticket_Sales_PKR
              : 0,
            remaining_Balance: ticket_Sales_PKR ? ticket_Sales_PKR : 0,

            total_Azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
              ? ticket_Sales_Rate_Oth_Cur
              : 0,
            remaining_Curr: ticket_Sales_Rate_Oth_Cur
              ? ticket_Sales_Rate_Oth_Cur
              : 0,

            curr_Country: cur_Country_One,
            opening:0,
            closing:0,
            persons: [
              {
                name,
                picture:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: ticket_Sales_PKR
                  ? ticket_Sales_PKR
                  : 0,
                azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                  ? ticket_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentInTicketSupplier.save();
        paymentInfo.newPaymentInTicketSupplier =
          newPaymentInTicketSupplier;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentInTicketSupplier.payment_In_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentInTicketSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
            ticket_Sales_PKR ? ticket_Sales_PKR : 0;
          existingPaymentInTicketSupplier.payment_In_Schema.remaining_Balance +=
            ticket_Sales_PKR ? ticket_Sales_PKR : 0;

          existingPaymentInTicketSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
            ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
          existingPaymentInTicketSupplier.payment_In_Schema.remaining_Curr +=
            ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentInTicketSupplier.payment_In_Schema.persons.push(
            {
              name,
              picture:ticket_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_In_PKR: ticket_Sales_PKR
                ? ticket_Sales_PKR
                : 0,
              azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                ? ticket_Sales_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );

          const newStatus = existingPaymentInTicketSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInTicketSupplier.payment_In_Schema.status;
          const isStatusClosed = existingPaymentInTicketSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentInTicketSupplier.updateOne({
           
            $inc: {
              "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                ticket_Sales_PKR ? ticket_Sales_PKR : 0,
              "payment_In_Schema.remaining_Balance":
                ticket_Sales_PKR ? ticket_Sales_PKR : 0,

              "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
              "payment_In_Schema.remaining_Curr":
                ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
                
            },
           
           
          });
        }

        await existingPaymentInTicketSupplier.save();
        paymentInfo.existingPaymentInTicketSupplier =
          existingPaymentInTicketSupplier;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
  if (
    (entryToUpdate.ticket_Reference_In === "" ||
      entryToUpdate.ticket_Reference_In === null||
      entryToUpdate.ticket_Reference_In === undefined
     ) &&
     ticket_Reference_In.toLowerCase().includes('supplier')
  ) {
    try {
      let existingPaymentOutTicketSupplier
      for (const supplier of ticketSuppliers){
        if(supplier.payment_Out_Schema){
          if(supplier.payment_Out_Schema.supplierName.toLowerCase()===ticket_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
            existingPaymentOutTicketSupplier = supplier;
            break
          }
        }
       }
     

      if (!existingPaymentOutTicketSupplier) {
        // If the supplier does not exist, create a new one
        const newPaymentOutTicketSupplier = new TicketSuppliers({
          payment_Out_Schema: {
            supplier_Id: newEntry._id,
            supplierName: ticket_Reference_In_Name,
            total_Azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
              ? ticket_Purchase_PKR
              : 0,
            remaining_Balance: ticket_Purchase_PKR
              ? ticket_Purchase_PKR
              : 0,

            total_Azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0,
            remaining_Curr: ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
            persons: [
              {
                name,
                picture:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                contact,
                country,
                azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                  ? ticket_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                  ? ticket_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentOutTicketSupplier.save();
        paymentInfo.newPaymentOutTicketSupplier =
          newPaymentOutTicketSupplier;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentOutTicketSupplier.payment_Out_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentOutTicketSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
            ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;
          existingPaymentOutTicketSupplier.payment_Out_Schema.remaining_Balance +=
            ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;

          existingPaymentOutTicketSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
            ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0;
          existingPaymentOutTicketSupplier.payment_Out_Schema.remaining_Curr +=
            ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentOutTicketSupplier.payment_Out_Schema.persons.push(
            {
              name,
              picture:ticket_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                ? ticket_Purchase_PKR
                : 0,
              azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                ? ticket_Purchase_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );

         
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentOutTicketSupplier.updateOne({
           
            $inc: {
              "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,
              "payment_Out_Schema.remaining_Balance":
                ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,

              "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                ticket_Purchase_Rate_Oth_Cur
                  ? ticket_Purchase_Rate_Oth_Cur
                  : 0,
              "payment_Out_Schema.remaining_Curr":
                ticket_Purchase_Rate_Oth_Cur
                  ? ticket_Purchase_Rate_Oth_Cur
                  : 0,
                  
            },
           
            
          });
        }

        await existingPaymentOutTicketSupplier.save();
        paymentInfo.existingPaymentOutTicketSupplier =
          existingPaymentOutTicketSupplier;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
  if (
    (entryToUpdate.ticket_Reference_Out === "" ||
      entryToUpdate.ticket_Reference_Out === null||
      entryToUpdate.ticket_Reference_Out === undefined
     ) &&
     ticket_Reference_Out.toLowerCase().includes('agent')
  ) {
    try {
      let existingPaymentInTicketAgent
      for (const supplier of ticketAgents){
        if(supplier.payment_In_Schema){
          if(supplier.payment_In_Schema.supplierName.toLowerCase()===ticket_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
            existingPaymentInTicketAgent = supplier;
            break
          }
        }
       }
   

      if (!existingPaymentInTicketAgent) {
        // If the supplier does not exist, create a new one
        const newPaymentInTicketAgent = new TicketAgents({
          payment_In_Schema: {
            supplier_Id: newEntry._id,
            supplierName: ticket_Reference_Out_Name,
            total_Azad_Visa_Price_In_PKR: ticket_Sales_PKR
              ? ticket_Sales_PKR
              : 0,
            remaining_Balance: ticket_Sales_PKR ? ticket_Sales_PKR : 0,

            total_Azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
              ? ticket_Sales_Rate_Oth_Cur
              : 0,
            remaining_Curr: ticket_Sales_Rate_Oth_Cur
              ? ticket_Sales_Rate_Oth_Cur
              : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
            persons: [
              {
                name,
                picture:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                contact,
                country,
                azad_Visa_Price_In_PKR: ticket_Sales_PKR
                  ? ticket_Sales_PKR
                  : 0,
                azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                  ? ticket_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentInTicketAgent.save();
        paymentInfo.newPaymentInTicketAgent = newPaymentInTicketAgent;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentInTicketAgent.payment_In_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentInTicketAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
            ticket_Sales_PKR ? ticket_Sales_PKR : 0;
          existingPaymentInTicketAgent.payment_In_Schema.remaining_Balance +=
            ticket_Sales_PKR ? ticket_Sales_PKR : 0;

          existingPaymentInTicketAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
            ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
          existingPaymentInTicketAgent.payment_In_Schema.remaining_Curr +=
            ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentInTicketAgent.payment_In_Schema.persons.push(
            {
              name,
              picture:ticket_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_In_PKR: ticket_Sales_PKR
                ? ticket_Sales_PKR
                : 0,
              azad_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
                ? ticket_Sales_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );
          const newStatus = existingPaymentInTicketAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInTicketAgent.payment_In_Schema.status;
          const isStatusClosed = existingPaymentInTicketAgent.payment_In_Schema.status.toLowerCase() === 'closed';
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentInTicketAgent.updateOne({
           
            $inc: {
              "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                ticket_Sales_PKR ? ticket_Sales_PKR : 0,
              "payment_In_Schema.remaining_Balance":
                ticket_Sales_PKR ? ticket_Sales_PKR : 0,

              "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
              "payment_In_Schema.remaining_Curr":
                ticket_Sales_Rate_Oth_Cur ? ticket_Sales_Rate_Oth_Cur : 0,
               
            },
           
           
          });
        }

        await existingPaymentInTicketAgent.save();
        paymentInfo.existingPaymentInTicketAgent =
          existingPaymentInTicketAgent;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
  if (
    (entryToUpdate.ticket_Reference_In === "" ||
      entryToUpdate.ticket_Reference_In === null||
      entryToUpdate.ticket_Reference_In === undefined
     ) &&
     ticket_Reference_In.toLowerCase().includes('agent')
  ) {
    try {

      let existingPaymentOutTicketAgent
      for (const supplier of ticketAgents){
        if(supplier.payment_Out_Schema){
          if(supplier.payment_Out_Schema.supplierName.toLowerCase()===ticket_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
            existingPaymentOutTicketAgent = supplier;
            break
          }
        }
       }
     

      if (!existingPaymentOutTicketAgent) {
        // If the supplier does not exist, create a new one
        const newPaymentOutTicketAgent = new TicketAgents({
          payment_Out_Schema: {
            supplier_Id: newEntry._id,
            supplierName: ticket_Reference_In_Name,
            total_Azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
              ? ticket_Purchase_PKR
              : 0,
            remaining_Balance: ticket_Purchase_PKR
              ? ticket_Purchase_PKR
              : 0,

            total_Azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0,
            remaining_Curr: ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
            persons: [
              {
                name,
                picture:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                contact,
                country,
                azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                  ? ticket_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                  ? ticket_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentOutTicketAgent.save();
        paymentInfo.newPaymentOutTicketAgent = newPaymentOutTicketAgent;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentOutTicketAgent.payment_Out_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentOutTicketAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
            ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;
          existingPaymentOutTicketAgent.payment_Out_Schema.remaining_Balance +=
            ticket_Purchase_PKR ? ticket_Purchase_PKR : 0;

          existingPaymentOutTicketAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
            ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0;
          existingPaymentOutTicketAgent.payment_Out_Schema.remaining_Curr +=
            ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentOutTicketAgent.payment_Out_Schema.persons.push(
            {
              name,
              picture:ticket_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_Out_PKR: ticket_Purchase_PKR
                ? ticket_Purchase_PKR
                : 0,
              azad_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
                ? ticket_Purchase_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );

          
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentOutTicketAgent.updateOne({
           
            $inc: {
              "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,
              "payment_Out_Schema.remaining_Balance":
                ticket_Purchase_PKR ? ticket_Purchase_PKR : 0,

              "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                ticket_Purchase_Rate_Oth_Cur
                  ? ticket_Purchase_Rate_Oth_Cur
                  : 0,
              "payment_Out_Schema.remaining_Curr":
                ticket_Purchase_Rate_Oth_Cur
                  ? ticket_Purchase_Rate_Oth_Cur
                  : 0,
                 
            },
            
          });
        }

        await existingPaymentOutTicketAgent.save();
        paymentInfo.existingPaymentOutTicketAgent =
          existingPaymentOutTicketAgent;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
  if (
    (entryToUpdate.ticket_Reference_Out === "" ||
      entryToUpdate.ticket_Reference_Out === null||
      entryToUpdate.ticket_Reference_Out === undefined
     ) &&
     ticket_Reference_Out.toLowerCase().includes('candidate')
  ) {
    try {
      // Check if the supplier with the given name and entry mode exists
      const existingPaymentInTicketCandidate =
        await TicketCandidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

      if (!existingPaymentInTicketCandidate) {
        // If the supplier does not exist with the same entry mode, create a new one
        const newPaymentInTicketCandidate = new TicketCandidate({
          payment_In_Schema: {
            supplier_Id: newEntry._id,
            supplierName: name,
            picture:ticket_Section_Picture,
            total_Visa_Price_In_PKR: ticket_Sales_PKR
              ? ticket_Sales_PKR
              : 0,
            remaining_Balance: ticket_Sales_PKR ? ticket_Sales_PKR : 0,

            total_Visa_Price_In_Curr: ticket_Sales_Rate_Oth_Cur
              ? ticket_Sales_Rate_Oth_Cur
              : 0,
            remaining_Curr: ticket_Sales_Rate_Oth_Cur
              ? ticket_Sales_Rate_Oth_Cur
              : 0,

            curr_Country: cur_Country_One,
            pp_No: pp_No,
            entry_Mode: entry_Mode,
            company: company,
            trade: trade,
            contact: contact,
            country: country,
            final_Status: final_Status,
            flight_Date: flight_Date,
          },
        });

        await newPaymentInTicketCandidate.save();
        paymentInfo.newPaymentInTicketCandidate =
          newPaymentInTicketCandidate;
      } else {
        // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
        // You may choose to update or do nothing based on your specific requirements
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }

  //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
  if (
    (entryToUpdate.ticket_Reference_In === "" ||
      entryToUpdate.ticket_Reference_In === null||
      entryToUpdate.ticket_Reference_In === undefined
     ) &&
     ticket_Reference_In.toLowerCase().includes('candidate')
  ) {
    try {
      // Check if the supplier with the given name exists
      const existingPaymentOutTicketCandidate =
        await TicketCandidate.findOne({
          "payment_Out_Schema.supplierName": name,
          
          "payment_Out_Schema.pp_No": pp_No,
        });

      if (!existingPaymentOutTicketCandidate) {
        // If the supplier does not exist, create a new one
        const newPaymentOutTicketCandidate = new TicketCandidate({
          payment_Out_Schema: {
            supplier_Id: newEntry._id,
            supplierName: name,
            total_Visa_Price_Out_PKR: ticket_Purchase_PKR
              ? ticket_Purchase_PKR
              : 0,
            remaining_Balance: ticket_Purchase_PKR
              ? ticket_Purchase_PKR
              : 0,

            total_Visa_Price_Out_Curr: ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0,
            remaining_Curr: ticket_Purchase_Rate_Oth_Cur
              ? ticket_Purchase_Rate_Oth_Cur
              : 0,

            curr_Country: cur_Country_Two,
            pp_No: pp_No,
            entry_Mode: entry_Mode,
            company: company,
            trade: trade,
            country: country,
            contact: contact,
            final_Status: final_Status,
            flight_Date: flight_Date,
            entry_Date: new Date().toISOString().split("T")[0],
          },
        });

        await newPaymentOutTicketCandidate.save();
        paymentInfo.newPaymentOutTicketCandidate =
          newPaymentOutTicketCandidate;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }


   //Saving the Entry Details to the Ticket Payment In Section if azad_Visa_Reference_Out_Name is Supplier
   if (
    (entryToUpdate.visit_Reference_Out === "" ||
      entryToUpdate.visit_Reference_Out === null||
      entryToUpdate.visit_Reference_Out === undefined
     ) &&
     visit_Reference_Out.toLowerCase().includes('supplier')
  ) {
    try {
      let existingPaymentInVisitSupplier
      for (const supplier of visitSuppliers){
        if(supplier.payment_In_Schema){
          if(supplier.payment_In_Schema.supplierName.toLowerCase()===visit_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
            existingPaymentInVisitSupplier = supplier;
            break
          }
        }
       }
     

      if (!existingPaymentInVisitSupplier) {
        // If the supplier does not exist, create a new one
        const newPaymentInVisitSupplier = new VisitSuppliers({
          payment_In_Schema: {
            supplier_Id: newEntry._id,
            supplierName: visit_Reference_Out_Name,
            total_Azad_Visa_Price_In_PKR: visit_Sales_PKR
              ? visit_Sales_PKR
              : 0,
            remaining_Balance: visit_Sales_PKR ? visit_Sales_PKR : 0,

            total_Azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
              ? visit_Sales_Rate_Oth_Curr
              : 0,
            remaining_Curr: visit_Sales_Rate_Oth_Curr
              ? visit_Sales_Rate_Oth_Curr
              : 0,

            curr_Country: cur_Country_One,
            opening:0,
              closing:0,
            persons: [
              {
                name,
                picture:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                contact,
                country,
                azad_Visa_Price_In_PKR: visit_Sales_PKR
                  ? visit_Sales_PKR
                  : 0,
                azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                  ? visit_Sales_Rate_Oth_Curr
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentInVisitSupplier.save();
        paymentInfo.newPaymentInVisitSupplier = newPaymentInVisitSupplier;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentInVisitSupplier.payment_In_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentInVisitSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
            visit_Sales_PKR;
          existingPaymentInVisitSupplier.payment_In_Schema.remaining_Balance +=
            visit_Sales_PKR;

          existingPaymentInVisitSupplier.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
            visit_Sales_Rate_Oth_Curr;
          existingPaymentInVisitSupplier.payment_In_Schema.remaining_Curr +=
            visit_Sales_Rate_Oth_Curr;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentInVisitSupplier.payment_In_Schema.persons.push(
            {
              name,
              picture:visit_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_In_PKR: visit_Sales_PKR
                ? visit_Sales_PKR
                : 0,
              azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                ? visit_Sales_Rate_Oth_Curr
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );
          const newStatus = existingPaymentInVisitSupplier.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInVisitSupplier.payment_In_Schema.status;
          const isStatusClosed = existingPaymentInVisitSupplier.payment_In_Schema.status.toLowerCase() === 'closed';
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentInVisitSupplier.updateOne({
           
            $inc: {
              "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                visit_Sales_PKR ? visit_Sales_PKR : 0,
              "payment_In_Schema.remaining_Balance":
                visit_Sales_PKR ? visit_Sales_PKR : 0,

              "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
              "payment_In_Schema.remaining_Curr":
                visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
               
            },
           
          });
        }

        await existingPaymentInVisitSupplier.save();
        paymentInfo.existingPaymentInVisitSupplier =
          existingPaymentInVisitSupplier;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
  if (
    (entryToUpdate.visit_Reference_In === "" ||
      entryToUpdate.visit_Reference_In === null||
      entryToUpdate.visit_Reference_In === undefined
     ) &&
     visit_Reference_In.toLowerCase().includes('supplier')
  ) {
    try {

      let existingPaymentOutVisitSupplier
      for (const supplier of visitSuppliers){
        if(supplier.payment_Out_Schema){
          if(supplier.payment_Out_Schema.supplierName.toLowerCase()===visit_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
            existingPaymentOutVisitSupplier = supplier;
            break
          }
        }
       }
     
      if (!existingPaymentOutVisitSupplier) {
        // If the supplier does not exist, create a new one
        const newPaymentOutVisitSupplier = new VisitSuppliers({
          payment_Out_Schema: {
            supplier_Id: newEntry._id,
            supplierName: visit_Reference_In_Name,
            total_Azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
              ? visit_Purchase_Rate_PKR
              : 0,
            remaining_Balance: visit_Purchase_Rate_PKR
              ? visit_Purchase_Rate_PKR
              : 0,

            total_Azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
              ? visit_Purchase_Rate_Oth_Cur
              : 0,
            remaining_Curr: visit_Purchase_Rate_Oth_Cur
              ? visit_Purchase_Rate_Oth_Cur
              : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
            persons: [
              {
                name,
                picture:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                  ? visit_Purchase_Rate_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                  ? visit_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentOutVisitSupplier.save();
        paymentInfo.newPaymentOutVisitSupplier =
          newPaymentOutVisitSupplier;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentOutVisitSupplier.payment_Out_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentOutVisitSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
            visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;
          existingPaymentOutVisitSupplier.payment_Out_Schema.remaining_Balance +=
            visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;

          existingPaymentOutVisitSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
            visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
          existingPaymentOutVisitSupplier.payment_Out_Schema.remaining_Curr +=
            visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentOutVisitSupplier.payment_Out_Schema.persons.push(
            {
              name,
              picture:visit_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                ? visit_Purchase_Rate_PKR
                : 0,
              azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                ? visit_Purchase_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );

        
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentOutVisitSupplier.updateOne({
            $inc: {
              "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,
              "payment_Out_Schema.remaining_Balance":
                visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,

              "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                visit_Purchase_Rate_Oth_Cur
                  ? visit_Purchase_Rate_Oth_Cur
                  : 0,
              "payment_Out_Schema.remaining_Curr":
                visit_Purchase_Rate_Oth_Cur
                  ? visit_Purchase_Rate_Oth_Cur
                  : 0,
                  
            },
           
          });
        }

        await existingPaymentOutVisitSupplier.save();
        paymentInfo.existingPaymentOutVisitSupplier =
          existingPaymentOutVisitSupplier;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Azad Visa Payment In Section if azad_Visa_Reference_Out_Name is Agent
  if (
    (entryToUpdate.visit_Reference_Out === "" ||
      entryToUpdate.visit_Reference_Out === null||
      entryToUpdate.visit_Reference_Out === undefined
     ) &&
     visit_Reference_Out.toLowerCase().includes('agent')
  ) {
    try {

      let existingPaymentInVisitAgent
      for (const supplier of visitAgents){
        if(supplier.payment_In_Schema){
          if(supplier.payment_In_Schema.supplierName.toLowerCase()===visit_Reference_Out_Name.toLowerCase()&& supplier.payment_In_Schema.status.toLowerCase()==='open'){
            existingPaymentInVisitAgent = supplier;
            break
          }
        }
       }
    
      if (!existingPaymentInVisitAgent) {
        // If the supplier does not exist, create a new one
        const newPaymentInVisitAgent = new VisitAgents({
          payment_In_Schema: {
            supplier_Id: newEntry._id,
            supplierName: visit_Reference_Out_Name,
            total_Azad_Visa_Price_In_PKR: visit_Sales_PKR
              ? visit_Sales_PKR
              : 0,
            remaining_Balance: visit_Sales_PKR ? visit_Sales_PKR : 0,

            total_Azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
              ? visit_Sales_Rate_Oth_Curr
              : 0,
            remaining_Curr: visit_Sales_Rate_Oth_Curr
              ? visit_Sales_Rate_Oth_Curr
              : 0,

            curr_Country: cur_Country_One,
            opening:0,
            closing:0,
            persons: [
              {
                name,
                picture:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: visit_Sales_PKR
                  ? visit_Sales_PKR
                  : 0,
                azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                  ? visit_Sales_Rate_Oth_Curr
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentInVisitAgent.save();
        paymentInfo.newPaymentInVisitAgent = newPaymentInVisitAgent;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentInVisitAgent.payment_In_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentInVisitAgent.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
            visit_Sales_PKR ? visit_Sales_PKR : 0;
          existingPaymentInVisitAgent.payment_In_Schema.remaining_Balance +=
            visit_Sales_PKR ? visit_Sales_PKR : 0;

          existingPaymentInVisitAgent.payment_In_Schema.total_Azad_Visa_Price_In_Curr +=
            visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0;
          existingPaymentInVisitAgent.payment_In_Schema.remaining_Curr +=
            visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentInVisitAgent.payment_In_Schema.persons.push(
            {
              name,
              picture:visit_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              azad_Visa_Price_In_PKR: visit_Sales_PKR
                ? visit_Sales_PKR
                : 0,
              azad_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
                ? visit_Sales_Rate_Oth_Curr
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );
          const newStatus = existingPaymentInVisitAgent.payment_In_Schema.status.toLowerCase() === 'closed' ? "Open" : existingPaymentInVisitAgent.payment_In_Schema.status;
          const isStatusClosed = existingPaymentInVisitAgent.payment_In_Schema.status.toLowerCase() === 'closed';
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentInVisitAgent.updateOne({
            $inc: {
              "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                visit_Sales_PKR ? visit_Sales_PKR : 0,
              "payment_In_Schema.remaining_Balance": visit_Sales_PKR
                ? visit_Sales_PKR
                : 0,

              "payment_In_Schema.total_Azad_Visa_Price_In_Curr":
                visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
              "payment_In_Schema.remaining_Curr":
                visit_Sales_Rate_Oth_Curr ? visit_Sales_Rate_Oth_Curr : 0,
                
            },
           
          });
        }

        await existingPaymentInVisitAgent.save();
        paymentInfo.existingPaymentInVisitAgent =
          existingPaymentInVisitAgent;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Azad Supplier Payment Out Section if azad_Visa_Reference_In_Name is avialable
  if (
    (entryToUpdate.visit_Reference_In === "" ||
      entryToUpdate.visit_Reference_In === null||
      entryToUpdate.visit_Reference_In === undefined
     ) &&
     visit_Reference_In.toLowerCase().includes('agent')
  ) {
    try {

      let existingPaymentOutVisitAgent
      for (const supplier of visitAgents){
        if(supplier.payment_Out_Schema){
          if(supplier.payment_Out_Schema.supplierName.toLowerCase()===visit_Reference_In_Name.toLowerCase()&& supplier.payment_Out_Schema.status.toLowerCase()==='open'){
            existingPaymentOutVisitAgent = supplier;
            break
          }
        }
       }
     

      if (!existingPaymentOutVisitAgent) {
        // If the supplier does not exist, create a new one
        const newPaymentOutVisitAgent = new VisitAgents({
          payment_Out_Schema: {
            supplier_Id: newEntry._id,
            supplierName: visit_Reference_In_Name,
            total_Azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
              ? visit_Purchase_Rate_PKR
              : 0,
            remaining_Balance: visit_Purchase_Rate_PKR
              ? visit_Purchase_Rate_PKR
              : 0,

            total_Azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
              ? visit_Purchase_Rate_Oth_Cur
              : 0,
            remaining_Curr: visit_Purchase_Rate_Oth_Cur
              ? visit_Purchase_Rate_Oth_Cur
              : 0,
              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
            persons: [
              {
                name,
                picture:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                  ? visit_Purchase_Rate_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                  ? visit_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              },
            ],
          },
        });

        await newPaymentOutVisitAgent.save();
        paymentInfo.newPaymentOutVisitAgent = newPaymentOutVisitAgent;
      } else {
        // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
        const existingPersonIndex =
          existingPaymentOutVisitAgent.payment_Out_Schema.persons.findIndex(
            (person) =>
              person.pp_No === pp_No &&
              person.entry_Mode === entry_Mode &&
              person.name === name
          );

        if (existingPersonIndex !== -1) {
          // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
          existingPaymentOutVisitAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
            visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;
          existingPaymentOutVisitAgent.payment_Out_Schema.remaining_Balance +=
            visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0;

          existingPaymentOutVisitAgent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
            visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
          existingPaymentOutVisitAgent.payment_Out_Schema.remaining_Curr +=
            visit_Purchase_Rate_Oth_Cur ? visit_Purchase_Rate_Oth_Cur : 0;
        } else {
          // If the person does not exist, add them to the persons array
          existingPaymentOutVisitAgent.payment_Out_Schema.persons.push(
            {
              name,
              picture:visit_Section_Picture,
              pp_No,
              entry_Mode,
              trade,
              country,
              contact,
              azad_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
                ? visit_Purchase_Rate_PKR
                : 0,
              azad_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
                ? visit_Purchase_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            }
          );

         
          // Update total_Visa_Price_In_PKR and other fields using $inc
          await existingPaymentOutVisitAgent.updateOne({
            $inc: {
              "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,
              "payment_Out_Schema.remaining_Balance":
                visit_Purchase_Rate_PKR ? visit_Purchase_Rate_PKR : 0,

              "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                visit_Purchase_Rate_Oth_Cur
                  ? visit_Purchase_Rate_Oth_Cur
                  : 0,
              "payment_Out_Schema.remaining_Curr":
                visit_Purchase_Rate_Oth_Cur
                  ? visit_Purchase_Rate_Oth_Cur
                  : 0,
                
            },
          
          });
        }

        await existingPaymentOutVisitAgent.save();
        paymentInfo.existingPaymentOutVisitAgent =
          existingPaymentOutVisitAgent;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }
  //Saving the Entry Details to the Candidate Payment In Section if reference_Out==="Candidate"
  if (
    (entryToUpdate.visit_Reference_Out === "" ||
      entryToUpdate.visit_Reference_Out === null||
      entryToUpdate.visit_Reference_Out === undefined
     ) &&
     visit_Reference_Out.toLowerCase().includes('candidate')
  ) {
    try {
      // Check if the supplier with the given name and entry mode exists
      const existingPaymentInVisitCandidate =
        await VisitCandidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

      if (!existingPaymentInVisitCandidate) {
        // If the supplier does not exist with the same entry mode, create a new one
        const newPaymentInVisitCandidate = new VisitCandidate({
          payment_In_Schema: {
            supplier_Id: newEntry._id,
            supplierName: name,
            picture:visit_Section_Picture,
            total_Visa_Price_In_PKR: visit_Sales_PKR
              ? visit_Sales_PKR
              : 0,
            remaining_Balance: visit_Sales_PKR ? visit_Sales_PKR : 0,

            total_Visa_Price_In_Curr: visit_Sales_Rate_Oth_Curr
              ? visit_Sales_Rate_Oth_Curr
              : 0,
            remaining_Curr: visit_Sales_Rate_Oth_Curr
              ? visit_Sales_Rate_Oth_Curr
              : 0,

            curr_Country: cur_Country_One,
            pp_No: pp_No,
            entry_Mode: entry_Mode,
            company: company,
            trade: trade,
            country: country,
            contact: trade,
            final_Status: final_Status,
            flight_Date: flight_Date,
          },
        });

        await newPaymentInVisitCandidate.save();
        paymentInfo.newPaymentInVisitCandidate =
          newPaymentInVisitCandidate;
      } else {
        // If the supplier exists with the same entry mode, handle accordingly (e.g., update, do nothing)
        // You may choose to update or do nothing based on your specific requirements
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }

  //Saving the Entry Details to the Candidate Payment Out Section if reference_In==="Candidate"
  if (
    (entryToUpdate.visit_Reference_In === "" ||
      entryToUpdate.visit_Reference_In === null||
      entryToUpdate.visit_Reference_In === undefined
     ) &&
     visit_Reference_In.toLowerCase().includes('candidate')
  ) {
    try {
      // Check if the supplier with the given name exists
      const existingPaymentOutVisitCandidate =
        await VisitCandidate.findOne({
          "payment_Out_Schema.supplierName": name,
          
          "payment_Out_Schema.pp_No": pp_No,
        });

      if (!existingPaymentOutVisitCandidate) {
        // If the supplier does not exist, create a new one
        const newPaymentOutVisitCandidate = new VisitCandidate({
          payment_Out_Schema: {
            supplier_Id: newEntry._id,
            supplierName: name,
            picture:visit_Section_Picture,
            total_Visa_Price_Out_PKR: visit_Purchase_Rate_PKR
              ? visit_Purchase_Rate_PKR
              : 0,
            remaining_Balance: visit_Purchase_Rate_PKR
              ? visit_Purchase_Rate_PKR
              : 0,

            total_Visa_Price_Out_Curr: visit_Purchase_Rate_Oth_Cur
              ? visit_Purchase_Rate_Oth_Cur
              : 0,
            remaining_Curr: visit_Purchase_Rate_Oth_Cur
              ? visit_Purchase_Rate_Oth_Cur
              : 0,

            curr_Country: cur_Country_Two,
            pp_No: pp_No,
            entry_Mode: entry_Mode,
            company: company,
            trade: trade,
            country: country,
            contact: contact,
            final_Status: final_Status,
            flight_Date: flight_Date,
          },
        });

        await newPaymentOutVisitCandidate.save();
        paymentInfo.newPaymentOutVisitCandidate =
          newPaymentOutVisitCandidate;
      }
    } catch (saveError) {
      console.error(saveError);
      res
        .status(500)
        .json({ message:saveError });
    }
  }

  if (
    (entryToUpdate.protector_Reference_In === "" ||
      entryToUpdate.protector_Reference_In === null||
      entryToUpdate.protector_Reference_In === undefined
     ) &&
     protector_Reference_In.toLowerCase().includes('protector')
    
   ) {
     try {
       let existingPaymentOutProtector
       for(const protector of protectors){
         if(protector.payment_Out_Schema){
           if(protector.payment_Out_Schema.supplierName.toLowerCase()===protector_Reference_In_Name.toLowerCase()&& protector.payment_Out_Schema.status.toLowerCase()==='open'){
             existingPaymentOutProtector=protector
           }
         }
       }
     

       if (!existingPaymentOutProtector) {
         // If the supplier does not exist, create a new one
         const newPaymentOutProtector = new Protector({
           payment_Out_Schema: {
             supplier_Id: newEntry._id,
             supplierName: protector_Reference_In_Name,
             total_Protector_Price_Out_PKR: protector_Price_In
               ? protector_Price_In
               : 0,
             remaining_Balance: protector_Price_In
               ? protector_Price_In
               : 0,

             total_Protector_Price_Out_Curr: protector_Price_In_Oth_Cur
               ? protector_Price_In_Oth_Cur
               : 0,
             remaining_Curr: protector_Price_In_Oth_Cur
               ? protector_Price_In_Oth_Cur
               : 0,

             curr_Country: cur_Country_One,
             persons: [
               {
                 name,
                picture: picture,
                 pp_No,
                 entry_Mode,
                 trade,
                 contact,
                 country,
                 protector_Out_PKR: protector_Price_In
                   ? protector_Price_In
                   : 0,
                 protector_Out_Curr: protector_Price_In_Oth_Cur
                   ? protector_Price_In_Oth_Cur
                   : 0,
                 company: company,
                 final_Status: final_Status,
                 flight_Date: flight_Date,
                 entry_Date: new Date().toISOString().split("T")[0],
               },
             ],
           },
         });

         await newPaymentOutProtector.save();
         paymentInfo.newPaymentOutProtector = newPaymentOutProtector;
       } else {
         // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
         const existingPersonIndex =
           existingPaymentOutProtector.payment_Out_Schema.persons.findIndex(
             (person) =>
               person.pp_No === pp_No &&
               person.entry_Mode === entry_Mode &&
               person.name === name
           );

         if (existingPersonIndex !== -1) {
           // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
           existingPaymentOutProtector.payment_Out_Schema.total_Protector_Price_Out_PKR +=
             protector_Price_In ? protector_Price_In : 0;
           existingPaymentOutProtector.payment_Out_Schema.remaining_Balance +=
             protector_Price_In ? protector_Price_In : 0;

           existingPaymentOutProtector.payment_Out_Schema.total_Protector_Price_Out_Curr +=
             protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0;
           existingPaymentOutProtector.payment_Out_Schema.remaining_Curr +=
             protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0;
         } else {
           // If the person does not exist, add them to the persons array
           existingPaymentOutProtector.payment_Out_Schema.persons.push({
             name,
             picture: picture,
             pp_No,
             entry_Mode,
             trade,
             contact,
             country,
             protector_Out_PKR: protector_Price_In
               ? protector_Price_In
               : 0,
             protector_Out_Curr: protector_Price_In_Oth_Cur
               ? protector_Price_In_Oth_Cur
               : 0,
             company: company,
             final_Status: final_Status,
             flight_Date: flight_Date,
             entry_Date: new Date().toISOString().split("T")[0],
           });

           // Update total_Visa_Price_In_PKR and other fields using $inc
           await existingPaymentOutProtector.updateOne({
             $inc: {
               "payment_Out_Schema.total_Protector_Price_Out_PKR":
                 protector_Price_In ? protector_Price_In : 0,
               "payment_Out_Schema.remaining_Balance": protector_Price_In
                 ? protector_Price_In
                 : 0,

               "payment_Out_Schema.total_Protector_Price_Out_Curr":
                 protector_Price_In_Oth_Cur
                   ? protector_Price_In_Oth_Cur
                   : 0,
               "payment_Out_Schema.remaining_Curr":
                 protector_Price_In_Oth_Cur
                   ? protector_Price_In_Oth_Cur
                   : 0,
             },
           });
         }

         await existingPaymentOutProtector.save();
         paymentInfo.existingPaymentOutProtector =
           existingPaymentOutProtector;
       }
     } catch (saveError) {
       console.error(saveError);
       res
         .status(500)
         .json({ message:saveError });
     }
   }

      // Updating the Entry values in all sections

      // For Suppliers Reference_In
      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("supplier") && reference_In.toLowerCase().includes("supplier") && entryToUpdate.reference_In_Name === reference_In_Name) {
        

        for (const supplier of suppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons&& supplier.payment_Out_Schema.persons.length>0){
            const persons= supplier.payment_Out_Schema.persons

              const supplierInPersonIndex =
                supplier.payment_Out_Schema.persons.find(
                  (person) =>
                    person.name === entryToUpdate.name &&
                   
                    person.pp_No === entryToUpdate.pp_No
                );
              // If the person is found, remove it from the persons array
              if (supplierInPersonIndex) {
    
                supplierInPersonIndex.name = name;
                supplierInPersonIndex.pp_No = pp_No;
                supplierInPersonIndex.entry_Mode = entry_Mode;
                supplierInPersonIndex.trade = trade;
                supplierInPersonIndex.country = country;
                supplierInPersonIndex.contact = contact;
                supplierInPersonIndex.picture = mainPicture?mainPicture.secure_url:supplierInPersonIndex.picture;
    
    
                // Calculate the differences
                const visa_Purchase_Rate_PKR_Diff = entryToUpdate.visa_Purchase_Rate_PKR - visa_Purchase_Rate_PKR
                const visa_Purchase_Rate_Oth_Cur_Diff = entryToUpdate.visa_Purchase_Rate_Oth_Cur - visa_Purchase_Rate_Oth_Cur
                supplierInPersonIndex.visa_Price_Out_PKR -= visa_Purchase_Rate_PKR_Diff
                supplierInPersonIndex.remaining_Price -= visa_Purchase_Rate_PKR_Diff
                supplierInPersonIndex.visa_Price_Out_Curr -= visa_Purchase_Rate_Oth_Cur_Diff
                supplierInPersonIndex.remaining_Curr -= visa_Purchase_Rate_Oth_Cur_Diff
    
                supplier.payment_Out_Schema.total_Visa_Price_Out_PKR -= visa_Purchase_Rate_PKR_Diff;
                supplier.payment_Out_Schema.remaining_Balance -= visa_Purchase_Rate_PKR_Diff;
                supplier.payment_Out_Schema.total_Visa_Price_Out_Curr -= visa_Purchase_Rate_Oth_Cur_Diff;
                supplier.payment_Out_Schema.remaining_Curr -= visa_Purchase_Rate_Oth_Cur_Diff;
    
                await supplier.save()
            break;

    
              }
            
          
        }
      
      }
    }
      

      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("supplier") && reference_In.toLowerCase().includes("supplier") && entryToUpdate.reference_In_Name !== reference_In_Name) {

        for (const agent of suppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
       
       
         for(const supplier of suppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            const personToUpdate =
            supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_Out_Schema.persons =
              updatedPersons;
              supplier.payment_Out_Schema.total_Visa_Price_Out_PKR -=
              personToUpdate.visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.total_Visa_Price_Out_Curr -=
              personToUpdate.visa_Price_Out_Curr || 0;
              supplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.visa_Price_Out_Curr || 0;

            // Save the changes
            await supplier.save();
            break;
          }
          }
         }
      
        // Check if the supplier with the given name exists
        const existingPaymentOutSupplier = await Suppliers.findOne({
          "payment_Out_Schema.supplierName": reference_In_Name,
          "payment_Out_Schema.status": 'Open',
        });

        if (!existingPaymentOutSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutSupplier = new Suppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_In_Name,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  trade,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutSupplier.save();

        } else {
          const existingPersonIndex =
            existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutSupplier.payment_Out_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Price: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });

            // Update total_Visa_In_Price_PKR and other fields using $inc
            await existingPaymentOutSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Visa_Price_Out_PKR":
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                "payment_Out_Schema.remaining_Balance": visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                "payment_Out_Schema.total_Visa_Price_Out_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
                "payment_Out_Schema.remaining_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
              },
            });
          }

          await existingPaymentOutSupplier.save();

        }
      }

      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("supplier") && reference_In.toLowerCase().includes("agent")) {

     for (const agent of suppliers){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for(const supplier of suppliers){
        if (supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
          const personToUpdate =
          supplier.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          supplier.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            supplier.payment_Out_Schema.persons =
            updatedPersons;
            supplier.payment_Out_Schema.total_Visa_Price_Out_PKR -=
            personToUpdate.visa_Price_Out_PKR || 0;
            supplier.payment_Out_Schema.remaining_Balance -=
            personToUpdate.visa_Price_Out_PKR || 0;
            supplier.payment_Out_Schema.total_Visa_Price_Out_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;
            supplier.payment_Out_Schema.remaining_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;

          // Save the changes
          await supplier.save();
          break;
        }
        }
       }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutSupplier = await Agents.findOne({
          "payment_Out_Schema.supplierName": reference_In_Name,
          "payment_Out_Schema.status": 'Open',
        });

        if (!existingPaymentOutSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutSupplier = new Agents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_In_Name,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  trade,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutSupplier.save();

        } else {
          const existingPersonIndex =
            existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutSupplier.payment_Out_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Price: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });

            // Update total_Visa_In_Price_PKR and other fields using $inc
            await existingPaymentOutSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Visa_Price_Out_PKR":
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                "payment_Out_Schema.remaining_Balance": visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                "payment_Out_Schema.total_Visa_Price_Out_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
                "payment_Out_Schema.remaining_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
              },
            });
          }

          await existingPaymentOutSupplier.save();

        }

      }


      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("supplier") && (reference_In.toLowerCase().includes("candidate")||reference_In.toLowerCase() === "direct" )) {  
 for (const agent of suppliers){
  if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
   let allCandPayments=agent.payment_Out_Schema.candPayments
   for (const payment of allCandPayments){
    let allPayments=payment.payments
    for (const candidatePayment of allPayments){
      if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
        return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
        break;
      }
    }
   }
  }
 }

 for (const supplier of suppliers){
  if(supplier.payment_Out_Schema&& supplier.payment_Out_Schema.persons){
    const personToUpdate =
    supplier.payment_Out_Schema.persons.find(
      (person) =>
        person.name === name &&
        person.entry_Mode === entry_Mode &&
        person.pp_No === pp_No
    );
  if (personToUpdate) {
    const updatedPersons =
    supplier.payment_Out_Schema.persons.filter(
        (person) =>
          !(
            person.name === name &&
            person.entry_Mode === entry_Mode &&
            person.pp_No === pp_No
          )
      );

      supplier.payment_Out_Schema.persons =
      updatedPersons;
      supplier.payment_Out_Schema.total_Visa_Price_Out_PKR -=
      personToUpdate.visa_Price_Out_PKR || 0;
      supplier.payment_Out_Schema.remaining_Balance -=
      personToUpdate.visa_Price_Out_PKR || 0;
      supplier.payment_Out_Schema.total_Visa_Price_Out_Curr -=
      personToUpdate.visa_Price_Out_Curr || 0;
      supplier.payment_Out_Schema.remaining_Curr -=
      personToUpdate.visa_Price_Out_Curr || 0;

    // Save the changes
    await supplier.save();
    break;

  }
}
  }
        // Check if the supplier with the given name exists
        const existingPaymentOutCandidate = await Candidate.findOne({
          "payment_Out_Schema.supplierName": name,
          
          "payment_Out_Schema.pp_No": pp_No,
        });

        if (!existingPaymentOutCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutCandidate = new Candidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : mainPicture?mainPicture.secure_url:picture,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutCandidate.save();
        }
      }

      // For Agents Reference_In
      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("agent") && reference_In.toLowerCase().includes("agent") && entryToUpdate.reference_In_Name === reference_In_Name) {
        //Reference In for Suppliers 
        for(const agent of agents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            const supplierInPersonIndex =
            agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === entryToUpdate.name &&
               
                person.pp_No === entryToUpdate.pp_No
            );
          // If the person is found, remove it from the persons array
          if (supplierInPersonIndex) {

            supplierInPersonIndex.name = name;
            supplierInPersonIndex.pp_No = pp_No;
            supplierInPersonIndex.entry_Mode = entry_Mode;
            supplierInPersonIndex.trade = trade;
            supplierInPersonIndex.country = country;
            supplierInPersonIndex.contact = contact;
            supplierInPersonIndex.picture = mainPicture?mainPicture.secure_url:supplierInPersonIndex.picture;

            // Calculate the differences
            const visa_Purchase_Rate_PKR_Diff = entryToUpdate.visa_Purchase_Rate_PKR - visa_Purchase_Rate_PKR
            const visa_Purchase_Rate_Oth_Cur_Diff = entryToUpdate.visa_Purchase_Rate_Oth_Cur - visa_Purchase_Rate_Oth_Cur
            supplierInPersonIndex.visa_Price_Out_PKR -= visa_Purchase_Rate_PKR_Diff
            supplierInPersonIndex.remaining_Price -= visa_Purchase_Rate_PKR_Diff
            supplierInPersonIndex.visa_Price_Out_Curr -= visa_Purchase_Rate_Oth_Cur_Diff
            supplierInPersonIndex.remaining_Curr -= visa_Purchase_Rate_Oth_Cur_Diff

            agent.payment_Out_Schema.total_Visa_Price_Out_PKR -= visa_Purchase_Rate_PKR_Diff;
            agent.payment_Out_Schema.remaining_Balance -= visa_Purchase_Rate_PKR_Diff;
            agent.payment_Out_Schema.total_Visa_Price_Out_Curr -= visa_Purchase_Rate_Oth_Cur_Diff;
            agent.payment_Out_Schema.remaining_Curr -= visa_Purchase_Rate_Oth_Cur_Diff;

            await agent.save()
            break;

          }
          }
        }

      }

      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("agent") && reference_In.toLowerCase().includes("agent") && entryToUpdate.reference_In_Name !== reference_In_Name) {
        
       for (const agent of agents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for(const agent of agents){
        if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
          const personToUpdate =
          agent.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          agent.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            agent.payment_Out_Schema.persons =
            updatedPersons;
            agent.payment_Out_Schema.total_Visa_Price_Out_PKR -=
            personToUpdate.visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.remaining_Balance -=
            personToUpdate.visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.total_Visa_Price_Out_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;
            agent.payment_Out_Schema.remaining_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;

          // Save the changes
          await agent.save();
          break;

        }
        }
       }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutSupplier = await Agents.findOne({
          "payment_Out_Schema.supplierName": reference_In_Name,
          "payment_Out_Schema.status": 'Open',
        });

        if (!existingPaymentOutSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutSupplier = new Agents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_In_Name,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  trade,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutSupplier.save();

        } else {
          const existingPersonIndex =
            existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutSupplier.payment_Out_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Price: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });

            // Update total_Visa_In_Price_PKR and other fields using $inc
            await existingPaymentOutSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Visa_Price_Out_PKR":
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                "payment_Out_Schema.remaining_Balance": visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                "payment_Out_Schema.total_Visa_Price_Out_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
                "payment_Out_Schema.remaining_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
              },
            });
          }

          await existingPaymentOutSupplier.save();

        }
      }

      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("agent") && reference_In.toLowerCase().includes("supplier")) {

       for (const agent of agents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for(const agent of agents){
        if (agent.payment_Out_Schema &&agent.payment_Out_Schema.persons){
          const personToUpdate =
          agent.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          agent.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            agent.payment_Out_Schema.persons =
            updatedPersons;
            agent.payment_Out_Schema.total_Visa_Price_Out_PKR -=
            personToUpdate.visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.remaining_Balance -=
            personToUpdate.visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.total_Visa_Price_Out_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;
            agent.payment_Out_Schema.remaining_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;

          // Save the changes
          await agent.save();
          break;

        }
        }
       }

       

        // Check if the supplier with the given name exists
        const existingPaymentOutSupplier = await Suppliers.findOne({
          "payment_Out_Schema.supplierName": reference_In_Name,
          "payment_Out_Schema.status": "Open",
        });

        if (!existingPaymentOutSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutSupplier = new Suppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_In_Name,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  trade,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutSupplier.save();

        } else {
          const existingPersonIndex =
            existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutSupplier.payment_Out_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Price: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });

            // Update total_Visa_In_Price_PKR and other fields using $inc
            await existingPaymentOutSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Visa_Price_Out_PKR":
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                "payment_Out_Schema.remaining_Balance": visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                "payment_Out_Schema.total_Visa_Price_Out_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
                "payment_Out_Schema.remaining_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
              },
            });
          }

          await existingPaymentOutSupplier.save();

        }

      }


      if (entryToUpdate.reference_In && entryToUpdate.reference_In.toLowerCase().includes("agent") && (reference_In.toLowerCase().includes("candidate")||reference_In.toLowerCase() === "direct" )) {

        
       for (const agent of agents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for(const agent of agents){
        if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
          const personToUpdate =
          agent.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          agent.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            agent.payment_Out_Schema.persons =
            updatedPersons;
            agent.payment_Out_Schema.total_Visa_Price_Out_PKR -=
            personToUpdate.visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.remaining_Balance -=
            personToUpdate.visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.total_Visa_Price_Out_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;
            agent.payment_Out_Schema.remaining_Curr -=
            personToUpdate.visa_Price_Out_Curr || 0;

          // Save the changes
          await agent.save();
          break;

        }
        }
       }
        
        // Check if the supplier with the given name exists
        const existingPaymentOutCandidate = await Candidate.findOne({
          "payment_Out_Schema.supplierName": name,
          
          "payment_Out_Schema.pp_No": pp_No,
        });

        if (!existingPaymentOutCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutCandidate = new Candidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              picture : mainPicture?mainPicture.secure_url:picture,
              supplierName: name,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutCandidate.save();
        }
      }


      // For Candidates Reference_In
      if (entryToUpdate.reference_In && (entryToUpdate.reference_In.toLowerCase().includes("candidate")||entryToUpdate.reference_In.toLowerCase() === "direct" ) && (reference_In.toLowerCase().includes("candidate")||reference_In.toLowerCase() === "direct" ) && entryToUpdate.reference_In_Name === reference_In_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          (existingPaymentInCandidate.payment_Out_Schema.supplierName = name),
            (existingPaymentInCandidate.payment_Out_Schema.pp_No = pp_No),
            (existingPaymentInCandidate.payment_Out_Schema.entry_Mode =
              entry_Mode),
              (existingPaymentInCandidate.payment_Out_Schema.picture =
                mainPicture?mainPicture.secure_url:existingPaymentInCandidate.payment_Out_Schema.picture),
            (existingPaymentInCandidate.payment_Out_Schema.trade = trade),
            (existingPaymentInCandidate.payment_Out_Schema.country = country),
            (existingPaymentInCandidate.payment_Out_Schema.contact = contact),
            (existingPaymentInCandidate.payment_Out_Schema.company = company),
            (existingPaymentInCandidate.payment_Out_Schema.final_Status =
              final_Status),
            (existingPaymentInCandidate.payment_Out_Schema.flight_Date =
              flight_Date),
            (existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_PKR=
              visa_Purchase_Rate_PKR ?visa_Purchase_Rate_PKR:0);
        
          existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_Curr =
            visa_Purchase_Rate_Oth_Cur ?visa_Purchase_Rate_Oth_Cur:
              0;
         

          await existingPaymentInCandidate.save();
        }

      }

      if (entryToUpdate.reference_In && (entryToUpdate.reference_In.toLowerCase().includes("candidate") ||entryToUpdate.reference_In.toLowerCase() === "direct") && reference_In.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }

        // Check if the supplier with the given name exists
        const existingPaymentOutSupplier = await Suppliers.findOne({
          "payment_Out_Schema.supplierName": reference_In_Name,
          "payment_Out_Schema.status": 'Open',
        });

        if (!existingPaymentOutSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutSupplier = new Suppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_In_Name,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  pp_No,
                  picture: mainPicture?mainPicture.secure_url:picture,
                  entry_Mode,
                  contact,
                  trade,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutSupplier.save();

        } else {
          const existingPersonIndex =
            existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutSupplier.payment_Out_Schema.persons.push({
              name,
              picture: mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Price: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });

            // Update total_Visa_In_Price_PKR and other fields using $inc
            await existingPaymentOutSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Visa_Price_Out_PKR":
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                "payment_Out_Schema.remaining_Balance": visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,
                "payment_Out_Schema.total_Visa_Price_Out_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
                "payment_Out_Schema.remaining_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
              },
            });
          }

          await existingPaymentOutSupplier.save();

        }

      }


      if (entryToUpdate.reference_In && (entryToUpdate.reference_In.toLowerCase().includes("candidate") ||entryToUpdate.reference_In.toLowerCase() === "direct")  && reference_In.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }

        // Check if the supplier with the given name exists
        const existingPaymentOutSupplier = await Agents.findOne({
          "payment_Out_Schema.supplierName": reference_In_Name,
          "payment_Out_Schema.status": 'Open',
        });

        if (!existingPaymentOutSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutSupplier = new Agents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_In_Name,
              total_Visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Balance: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              total_Visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture: mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  trade,
                  country,
                  visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,
                  remaining_Price: visa_Purchase_Rate_PKR
                    ? visa_Purchase_Rate_PKR
                    : 0,

                  visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Purchase_Rate_Oth_Cur
                    ? visa_Purchase_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutSupplier.save();
          paymentInfo.newPaymentOutSupplier = newPaymentOutSupplier;
        } else {
          const existingPersonIndex =
            existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_PKR +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
              visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0;

            existingPaymentOutSupplier.payment_Out_Schema.total_Visa_Price_Out_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
              visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutSupplier.payment_Out_Schema.persons.push({
              name,
              picture: mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              visa_Price_Out_PKR: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,
              remaining_Price: visa_Purchase_Rate_PKR
                ? visa_Purchase_Rate_PKR
                : 0,

              visa_Price_Out_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Purchase_Rate_Oth_Cur
                ? visa_Purchase_Rate_Oth_Cur
                : 0,
              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });

            // Update total_Visa_In_Price_PKR and other fields using $inc
            await existingPaymentOutSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Visa_Price_Out_PKR":
                  visa_Purchase_Rate_PKR ? visa_Purchase_Rate_PKR : 0,
                "payment_Out_Schema.remaining_Balance": visa_Purchase_Rate_PKR
                  ? visa_Purchase_Rate_PKR
                  : 0,

                "payment_Out_Schema.total_Visa_Price_Out_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
                "payment_Out_Schema.remaining_Curr":
                  visa_Purchase_Rate_Oth_Cur ? visa_Purchase_Rate_Oth_Cur : 0,
              },
            });
          }

          await existingPaymentOutSupplier.save();
        }
      }


      // For Suppliers Reference_Out
      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("supplier") && reference_Out.toLowerCase().includes("supplier") && entryToUpdate.reference_Out_Name === reference_Out_Name) {

        for(const supplier of suppliers){
          if (supplier.payment_In_Schema && supplier.payment_In_Schema.persons){

            const supplierInPersonIndex =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === entryToUpdate.name &&
               
                person.pp_No === entryToUpdate.pp_No
            );
          // If the person is found, remove it from the persons array
          if (supplierInPersonIndex) {

            supplierInPersonIndex.name = name;
            supplierInPersonIndex.pp_No = pp_No;
            supplierInPersonIndex.entry_Mode = entry_Mode;
            supplierInPersonIndex.trade = trade;
            supplierInPersonIndex.country = country;
            supplierInPersonIndex.contact = contact;
            supplierInPersonIndex.picture = mainPicture?mainPicture.secure_url:supplierInPersonIndex.picture;

            // Calculate the differences
            const visa_Sale_Rate_PKR_Diff = entryToUpdate.visa_Sales_Rate_PKR - visa_Sales_Rate_PKR
            const visa_Sale_Rate_Oth_Cur_Diff = entryToUpdate.visa_Sale_Rate_Oth_Cur - visa_Sale_Rate_Oth_Cur
            supplierInPersonIndex.visa_Price_In_PKR -= visa_Sale_Rate_PKR_Diff
            supplierInPersonIndex.remaining_Price -= visa_Sale_Rate_PKR_Diff
            supplierInPersonIndex.visa_Price_In_Curr -= visa_Sale_Rate_Oth_Cur_Diff
            supplierInPersonIndex.remaining_Curr -= visa_Sale_Rate_Oth_Cur_Diff

            supplier.payment_In_Schema.total_Visa_Price_In_PKR -= visa_Sale_Rate_PKR_Diff;
            supplier.payment_In_Schema.remaining_Balance -= visa_Sale_Rate_PKR_Diff;
            supplier.payment_In_Schema.total_Visa_Price_In_Curr -= visa_Sale_Rate_Oth_Cur_Diff;
            supplier.payment_In_Schema.remaining_Curr -= visa_Sale_Rate_Oth_Cur_Diff;

            await supplier.save()
            break;

          }
          }
        }
      
      }

      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("supplier") && reference_Out.toLowerCase().includes("supplier") && entryToUpdate.reference_Out_Name !== reference_Out_Name) {
        for (const agent of suppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for(const supplier of suppliers ){
          if(supplier.payment_In_Schema &&supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Visa_Price_In_PKR -=
              personToUpdate.visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Visa_Price_In_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break;

          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentInSupplier = await Suppliers.findOne({
          "payment_In_Schema.supplierName": reference_Out_Name,
          "payment_In_Schema.supplierName": "Open",
        });

        if (!existingPaymentInSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentInSupplier = new Suppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_Out_Name,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentInSupplier.save();
         
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentInSupplier.payment_In_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              contact,
              country,
              trade,
              visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Price: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });
            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentInSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Visa_Price_In_PKR":
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                "payment_In_Schema.total_Visa_Price_In_Curr":
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
              },
            });
          }

          await existingPaymentInSupplier.save();

        }
      }


      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("supplier") && reference_Out.toLowerCase().includes("agent")) {

        for (const agent of suppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for(const supplier of suppliers){
          if(supplier.payment_In_Schema &&supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Visa_Price_In_PKR -=
              personToUpdate.visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Visa_Price_In_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break;
          }
          }
         }
     


        // Check if the supplier with the given name exists
        const existingPaymentInSupplier = await Agents.findOne({
          "payment_In_Schema.supplierName": reference_Out_Name,
          "payment_In_Schema.status": 'Open',
        });

        if (!existingPaymentInSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentInSupplier = new Agents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_Out_Name,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentInSupplier.save();
         
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentInSupplier.payment_In_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              contact,
              country,
              trade,
              visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Price: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });
            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentInSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Visa_Price_In_PKR":
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                "payment_In_Schema.total_Visa_Price_In_Curr":
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
              },
            });
          }

          await existingPaymentInSupplier.save();

        }
      }


      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("supplier") && (reference_Out.toLowerCase().includes("candidate") ||reference_Out.toLowerCase() === "direct") ) {
        
        for (const agent of suppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/supplier/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for(const supplier of suppliers){
          if(supplier.payment_In_Schema &&supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Visa_Price_In_PKR -=
              personToUpdate.visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Visa_Price_In_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break;

          }
          }
         }
      

        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

        if (!existingPaymentInCandidate) {
          // If the supplier does not exist with the same entry mode, create a new one
          const newPaymentInCandidate = new Candidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              picture : mainPicture?mainPicture.secure_url:picture,
              supplierName: name,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              country: country,
              trade: trade,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            },
          });

          await newPaymentInCandidate.save();
        }
      }


      // For Agents Reference_Out
      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("agent") && reference_Out.toLowerCase().includes("agent") && entryToUpdate.reference_Out_Name === reference_Out_Name) {

        for (const agent of agents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const supplierInPersonIndex =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === entryToUpdate.name &&
               
                person.pp_No === entryToUpdate.pp_No
            );
          // If the person is found, remove it from the persons array
          if (supplierInPersonIndex) {

            supplierInPersonIndex.name = name;
            supplierInPersonIndex.pp_No = pp_No;
            supplierInPersonIndex.entry_Mode = entry_Mode;
            supplierInPersonIndex.trade = trade;
            supplierInPersonIndex.country = country;
            supplierInPersonIndex.contact = contact;
            supplierInPersonIndex.picture = mainPicture?mainPicture.secure_url:supplierInPersonIndex.picture;

            // Calculate the differences
            const visa_Sale_Rate_PKR_Diff = entryToUpdate.visa_Sales_Rate_PKR - visa_Sales_Rate_PKR
            const visa_Sale_Rate_Oth_Cur_Diff = entryToUpdate.visa_Sale_Rate_Oth_Cur - visa_Sale_Rate_Oth_Cur
            supplierInPersonIndex.visa_Price_In_PKR -= visa_Sale_Rate_PKR_Diff
            supplierInPersonIndex.remaining_Price -= visa_Sale_Rate_PKR_Diff
            supplierInPersonIndex.visa_Price_In_Curr -= visa_Sale_Rate_Oth_Cur_Diff
            supplierInPersonIndex.remaining_Curr -= visa_Sale_Rate_Oth_Cur_Diff

            agent.payment_In_Schema.total_Visa_Price_In_PKR -= visa_Sale_Rate_PKR_Diff;
            agent.payment_In_Schema.remaining_Balance -= visa_Sale_Rate_PKR_Diff;
            agent.payment_In_Schema.total_Visa_Price_In_Curr -= visa_Sale_Rate_Oth_Cur_Diff;
            agent.payment_In_Schema.remaining_Curr -= visa_Sale_Rate_Oth_Cur_Diff;

            await agent.save()
            break;

          }
          }
        }
      
      }

      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("agent") && reference_Out.toLowerCase().includes("agent") && entryToUpdate.reference_Out_Name !== reference_Out_Name) {

        for (const agent of agents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for(const agent of agents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Visa_Price_In_PKR -=
              personToUpdate.visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Visa_Price_In_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break;
          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentInSupplier = await Agents.findOne({
          "payment_In_Schema.supplierName": reference_Out_Name,
          "payment_In_Schema.status": "Open",
        });

        if (!existingPaymentInSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentInSupplier = new Agents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_Out_Name,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentInSupplier.save();
         
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentInSupplier.payment_In_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              contact,
              country,
              trade,
              visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Price: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });
            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentInSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Visa_Price_In_PKR":
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                "payment_In_Schema.total_Visa_Price_In_Curr":
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
              },
            });
          }

          await existingPaymentInSupplier.save();

        }
      }


      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("agent") && reference_Out.toLowerCase().includes("supplier")) {

        for (const agent of agents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of agents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Visa_Price_In_PKR -=
              personToUpdate.visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Visa_Price_In_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break;
          }
          }
         }
        


        // Check if the supplier with the given name exists
        const existingPaymentInSupplier = await Suppliers.findOne({
          "payment_In_Schema.supplierName": reference_Out_Name,
          "payment_In_Schema.status": "Open",
        });

        if (!existingPaymentInSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentInSupplier = new Suppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_Out_Name,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentInSupplier.save();
       
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentInSupplier.payment_In_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              contact,
              country,
              trade,
              visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Price: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });
            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentInSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Visa_Price_In_PKR":
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                "payment_In_Schema.total_Visa_Price_In_Curr":
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
              },
            });
          }

          await existingPaymentInSupplier.save();

        }
      }


      if (entryToUpdate.reference_Out && entryToUpdate.reference_Out.toLowerCase().includes("agent") &&(reference_Out.toLowerCase().includes("candidate") ||reference_Out.toLowerCase() === "direct")) {
        for (const agent of agents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return  res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/agents/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of agents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Visa_Price_In_PKR -=
              personToUpdate.visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Visa_Price_In_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break;
          }
          }
         }
      

        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_In_Schema.supplierName": name,
          
          "payment_In_Schema.pp_No": pp_No,
        });

        if (!existingPaymentInCandidate) {
          // If the supplier does not exist with the same entry mode, create a new one
          const newPaymentInCandidate = new Candidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : mainPicture?mainPicture.secure_url:picture,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              country: country,
              trade: trade,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            },
          });

          await newPaymentInCandidate.save();
        }
      }



      // For Candidate Reference_Out
      if (entryToUpdate.reference_Out && (entryToUpdate.reference_Out.toLowerCase().includes("candidate") ||entryToUpdate.reference_Out.toLowerCase() === "direct") && (reference_Out.toLowerCase().includes("candidate") ||reference_Out.toLowerCase() === "direct") && entryToUpdate.reference_Out_Name === reference_Out_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          console.log('')
          existingPaymentInCandidate.payment_In_Schema.supplierName = name,
          existingPaymentInCandidate.payment_In_Schema.picture = mainPicture?mainPicture.secure_url:existingPaymentInCandidate.payment_In_Schema.picture,
            existingPaymentInCandidate.payment_In_Schema.pp_No = pp_No,
            existingPaymentInCandidate.payment_In_Schema.entry_Mode =
            entry_Mode,
            existingPaymentInCandidate.payment_In_Schema.trade = trade,
            existingPaymentInCandidate.payment_In_Schema.country = country,
            existingPaymentInCandidate.payment_In_Schema.contact = contact,
            existingPaymentInCandidate.payment_In_Schema.company = company,
            existingPaymentInCandidate.payment_In_Schema.final_Status =
            final_Status,
            existingPaymentInCandidate.payment_In_Schema.flight_Date =
            flight_Date,
            existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_PKR =visa_Sales_Rate_PKR? visa_Sales_Rate_PKR:0,
            existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_Curr =
            visa_Sale_Rate_Oth_Cur ?visa_Sale_Rate_Oth_Cur:0
           
            await existingPaymentInCandidate.save()
        }
      }


      if (entryToUpdate.reference_Out && (entryToUpdate.reference_Out.toLowerCase().includes("candidate") ||entryToUpdate.reference_Out.toLowerCase() === "direct") && reference_Out.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }


        // Check if the supplier with the given name exists
        const existingPaymentInSupplier = await Suppliers.findOne({
          "payment_In_Schema.supplierName": reference_Out_Name,
          "payment_In_Schema.status": 'Open',
        });

        if (!existingPaymentInSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentInSupplier = new Suppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_Out_Name,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentInSupplier.save();
          
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentInSupplier.payment_In_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              contact,
              country,
              trade,
              visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Price: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });
            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentInSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Visa_Price_In_PKR":
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                "payment_In_Schema.total_Visa_Price_In_Curr":
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
              },
            });
          }

          await existingPaymentInSupplier.save();

        }
      }


      if (entryToUpdate.reference_Out && (entryToUpdate.reference_Out.toLowerCase().includes("candidate") ||entryToUpdate.reference_Out.toLowerCase() === "direct") && reference_Out.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await Candidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }


        // Check if the supplier with the given name exists
        const existingPaymentInSupplier = await Agents.findOne({
          "payment_In_Schema.supplierName": reference_Out_Name,
          "payment_In_Schema.status": 'Open',
        });

        if (!existingPaymentInSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentInSupplier = new Agents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: reference_Out_Name,
              total_Visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Balance: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,

              total_Visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  country,
                  trade,
                  visa_Price_In_PKR: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  remaining_Price: visa_Sales_Rate_PKR
                    ? visa_Sales_Rate_PKR
                    : 0,
                  visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,
                  remaining_Curr: visa_Sale_Rate_Oth_Cur
                    ? visa_Sale_Rate_Oth_Cur
                    : 0,

                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentInSupplier.save();
      
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentInSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_PKR +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Balance +=
              visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0;
            existingPaymentInSupplier.payment_In_Schema.total_Visa_Price_In_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
            existingPaymentInSupplier.payment_In_Schema.remaining_Curr +=
              visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentInSupplier.payment_In_Schema.persons.push({
              name,
              picture : mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              contact,
              country,
              trade,
              visa_Price_In_PKR: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              remaining_Price: visa_Sales_Rate_PKR
                ? visa_Sales_Rate_PKR
                : 0,
              visa_Price_In_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,
              remaining_Curr: visa_Sale_Rate_Oth_Cur
                ? visa_Sale_Rate_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });
            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentInSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Visa_Price_In_PKR":
                  visa_Sales_Rate_PKR ? visa_Sales_Rate_PKR : 0,
                "payment_In_Schema.remaining_Balance": visa_Sales_Rate_PKR
                  ? visa_Sales_Rate_PKR
                  : 0,

                "payment_In_Schema.total_Visa_Price_In_Curr":
                  visa_Sale_Rate_Oth_Cur ? visa_Sale_Rate_Oth_Cur : 0,
                "payment_In_Schema.remaining_Curr": visa_Sale_Rate_Oth_Cur
                  ? visa_Sale_Rate_Oth_Cur
                  : 0,
              },
            });
          }

          await existingPaymentInSupplier.save();

        }
      }

      // For Azad Suppliers/Agents Reference_In

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("supplier") && azad_Visa_Reference_In.toLowerCase().includes("supplier") && entryToUpdate.azad_Visa_Reference_In_Name === azad_Visa_Reference_In_Name) {
        // Update the Agent,Supplier and candidate
        for (const azadSupplier of azadSuppliers){
          if(azadSupplier.payment_Out_Schema && azadSupplier.payment_Out_Schema.persons){

            let supplierInPersonIndex;
            supplierInPersonIndex =
            azadSupplier.payment_Out_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = azadPicture?azadPicture.secure_url:supplierInPersonIndex.picture;
  
              supplierInPersonIndex.azad_Visa_Price_Out_PKR -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
                  azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  azadSupplier.payment_Out_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  azadSupplier.payment_Out_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              await azadSupplier.save();
              break
            }
          }
        }
      
      }

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("supplier") && azad_Visa_Reference_In.toLowerCase().includes("supplier") && entryToUpdate.azad_Visa_Reference_In_Name !== azad_Visa_Reference_In_Name) {

        for (const agent of azadSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for(const azadSupplier of azadSuppliers){
          if(azadSupplier.payment_Out_Schema&&azadSupplier.payment_Out_Schema.persons){
            const personToUpdate =
            azadSupplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            azadSupplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              azadSupplier.payment_Out_Schema.persons =
              updatedPersons;
              azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              azadSupplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              azadSupplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await azadSupplier.save();
            break
          }
          }
         }
       


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadSupplier.findOne(
          {
            "payment_Out_Schema.supplierName":
              azad_Visa_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
              
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadSupplier({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
         
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("supplier") && azad_Visa_Reference_In.toLowerCase().includes("agent")) {

        for (const agent of azadSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for(const azadSupplier of azadSuppliers){
          if(azadSupplier.payment_Out_Schema && azadSupplier.payment_Out_Schema.persons){
            const personToUpdate =
            azadSupplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            azadSupplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              azadSupplier.payment_Out_Schema.persons =
              updatedPersons;
              azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              azadSupplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              azadSupplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await azadSupplier.save();
            break
          }
          }
         }

       


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              azad_Visa_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("supplier") && azad_Visa_Reference_In.toLowerCase().includes("candidate")) {

 for (const agent of azadSuppliers){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return  res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for (const azadSupplier of azadSuppliers){
        if(azadSupplier.payment_Out_Schema && azadSupplier.payment_Out_Schema.persons){
          const personToUpdate =
          azadSupplier.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          azadSupplier.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            azadSupplier.payment_Out_Schema.persons =
            updatedPersons;
            azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            azadSupplier.payment_Out_Schema.remaining_Balance -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            azadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;
            azadSupplier.payment_Out_Schema.remaining_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;

          // Save the changes
          await azadSupplier.save();
          break
        }
        }
       }
     

        const existingPaymentOutAzadCandidate = await AzadCandidate.findOne(
          {
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new AzadCandidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
              total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }



      // For Azad Agents Reference_In

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("agent") && azad_Visa_Reference_In.toLowerCase().includes("agent") && entryToUpdate.azad_Visa_Reference_In_Name === azad_Visa_Reference_In_Name) {
        
        for(const agent of azadAgents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            let supplierInPersonIndex;
            supplierInPersonIndex =
            agent.payment_Out_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = azadPicture?azadPicture.secure_url:supplierInPersonIndex.picture;
  
              supplierInPersonIndex.azad_Visa_Price_Out_PKR -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
                  agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              agent.payment_Out_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  agent.payment_Out_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
       
      }

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("agent") && azad_Visa_Reference_In.toLowerCase().includes("agent") && entryToUpdate.azad_Visa_Reference_In_Name !== azad_Visa_Reference_In_Name) {

        for (const agent of azadAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of azadAgents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            const personToUpdate =
            agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_Out_Schema.persons =
              updatedPersons;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              agent.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await agent.save();
            break;

          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              azad_Visa_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
          
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : mainPicture?mainPicture.secure_url:picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("agent") && azad_Visa_Reference_In.toLowerCase().includes("supplier")) {

        for (const agent of azadAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for(const agent of azadAgents){
          if(agent.payment_Out_Schema &&agent.payment_Out_Schema.persons){
            const personToUpdate =
            agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_Out_Schema.persons =
              updatedPersons;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              agent.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }

       


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadSupplier.findOne(
          {
            "payment_Out_Schema.supplierName":
              azad_Visa_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadSupplier({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,

              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : mainPicture?mainPicture.secure_url:picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("agent") && azad_Visa_Reference_In.toLowerCase().includes("candidate")) {

 for (const agent of azadAgents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Azad Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for (const agent of azadAgents){
        if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
          const personToUpdate =
          agent.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          agent.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            agent.payment_Out_Schema.persons =
            updatedPersons;
            agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.remaining_Balance -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;
            agent.payment_Out_Schema.remaining_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;

          // Save the changes
          await agent.save();
          break
        }
        }
       }
       

        const existingPaymentOutAzadCandidate = await AzadCandidate.findOne(
          {
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new AzadCandidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : mainPicture?mainPicture.secure_url:picture,
              total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }

      // For Azad Candidate Reference_In 
      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("candidate") && azad_Visa_Reference_In.toLowerCase().includes("candidate") && entryToUpdate.azad_Visa_Reference_In_Name === azad_Visa_Reference_In_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await AzadCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          (existingPaymentInCandidate.payment_Out_Schema.supplierName = name),
            (existingPaymentInCandidate.payment_Out_Schema.pp_No = pp_No),
            (existingPaymentInCandidate.payment_Out_Schema.entry_Mode =
              entry_Mode),
              (existingPaymentInCandidate.payment_Out_Schema.picture =
                azadPicture?azadPicture.secure_url:existingPaymentInCandidate.payment_Out_Schema.picture),
            (existingPaymentInCandidate.payment_Out_Schema.trade = trade),
            (existingPaymentInCandidate.payment_Out_Schema.country = country),
            (existingPaymentInCandidate.payment_Out_Schema.contact = contact),
            (existingPaymentInCandidate.payment_Out_Schema.company = company),
            (existingPaymentInCandidate.payment_Out_Schema.final_Status =
              final_Status),
            (existingPaymentInCandidate.payment_Out_Schema.flight_Date =
              flight_Date),
            (existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_PKR =
              azad_Visa_Purchase_PKR ?azad_Visa_Purchase_PKR:
                0 );
         
          existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_Curr =
            azad_Visa_Purchase_Rate_Oth_Cur ?azad_Visa_Purchase_Rate_Oth_Cur:0;
         

          await existingPaymentInCandidate.save();
        }


      }

      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("candidate") && azad_Visa_Reference_In.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await AzadCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadSupplier.findOne(
          {
            "payment_Out_Schema.supplierName":
              azad_Visa_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadSupplier({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }


      if (entryToUpdate.azad_Visa_Reference_In && entryToUpdate.azad_Visa_Reference_In.toLowerCase().includes("candidate") && azad_Visa_Reference_In.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await AzadCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              azad_Visa_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }
      }


      // For Azad Suppliers Reference_Out

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("supplier") && azad_Visa_Reference_Out.toLowerCase().includes("supplier") && entryToUpdate.azad_Visa_Reference_Out_Name === azad_Visa_Reference_Out_Name) {
       
        for (const supplier of azadSuppliers){
          if (supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            let supplierInPersonIndex;
            supplierInPersonIndex =
            supplier.payment_In_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = azadPicture?azadPicture.secure_url:supplierInPersonIndex.picture;
  
              supplierInPersonIndex.azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }
        
      }

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("supplier") && azad_Visa_Reference_Out.toLowerCase().includes("supplier") && entryToUpdate.azad_Visa_Reference_Out_Name !== azad_Visa_Reference_Out_Name) {

        for (const agent of azadSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const supplier of azadSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadSupplier.findOne(
          {
            "payment_In_Schema.supplierName":
              azad_Visa_Reference_Out_Name,
              "payment_In_Schema.status":
              'Open',
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadSupplier({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
         
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("supplier") && azad_Visa_Reference_Out.toLowerCase().includes("agent")) {

        for (const agent of azadSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
        
         for (const supplier of azadSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
     


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              azad_Visa_Reference_Out_Name,
              "payment_In_Schema.status":
              'Open',
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("supplier") && azad_Visa_Reference_Out.toLowerCase().includes("candidate")) {


        for (const agent of azadSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const supplier of azadSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
      

        const existingPaymentOutAzadCandidate = await AzadCandidate.findOne(
          {
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new AzadCandidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
              total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }



      // For Azad Agents Reference_Out

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("agent") && azad_Visa_Reference_Out.toLowerCase().includes("agent") && entryToUpdate.azad_Visa_Reference_Out_Name === azad_Visa_Reference_Out_Name) {
        
        for (const agent of azadAgents){
          if(agent.payment_In_Schema &&agent.payment_In_Schema.persons){
            let supplierInPersonIndex;
            supplierInPersonIndex =
            agent.payment_In_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = azadPicture?azadPicture.secure_url:supplierInPersonIndex.picture;
  
              supplierInPersonIndex.azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
                  agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
       
      }



      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("agent") && azad_Visa_Reference_Out.toLowerCase().includes("agent") && entryToUpdate.azad_Visa_Reference_Out_Name !== azad_Visa_Reference_Out_Name) {


        for (const agent of azadAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
        
         for (const agent of azadAgents){
          if(agent.payment_In_Schema &&agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
      

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              azad_Visa_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
        
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : mainPicture?mainPicture.secure_url:picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("agent") && azad_Visa_Reference_Out.toLowerCase().includes("supplier")) {
        for (const agent of azadAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of azadAgents){
          if (agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
      


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadSupplier.findOne(
          {
            "payment_In_Schema.supplierName":
              azad_Visa_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadSupplier({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : mainPicture?mainPicture.secure_url:picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("agent") && azad_Visa_Reference_Out.toLowerCase().includes("candidate")) {


        for (const agent of azadAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Azad Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/azad/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

        for (const agent of azadAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
        }
       

        const existingPaymentOutAzadCandidate = await AzadCandidate.findOne(
          {
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new AzadCandidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : mainPicture?mainPicture.secure_url:picture,
              total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }

      // For Azad Candidate Reference_Out
      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("candidate") && azad_Visa_Reference_Out.toLowerCase().includes("candidate") && entryToUpdate.azad_Visa_Reference_Out_Name === azad_Visa_Reference_Out_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await AzadCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          (existingPaymentInCandidate.payment_In_Schema.supplierName = name),
            (existingPaymentInCandidate.payment_In_Schema.pp_No = pp_No),
            (existingPaymentInCandidate.payment_Out_Schema.entry_Mode =
              entry_Mode),
              (existingPaymentInCandidate.payment_Out_Schema.picture =
                azadPicture?azadPicture.secure_url:existingPaymentInCandidate.payment_Out_Schema.picture),
            (existingPaymentInCandidate.payment_In_Schema.trade = trade),
            (existingPaymentInCandidate.payment_In_Schema.country = country),
            (existingPaymentInCandidate.payment_In_Schema.contact = contact),
            (existingPaymentInCandidate.payment_In_Schema.company = company),
            (existingPaymentInCandidate.payment_In_Schema.final_Status =
              final_Status),
            (existingPaymentInCandidate.payment_In_Schema.flight_Date =
              flight_Date),
            (existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_PKR =
              azad_Visa_Sales_PKR ?azad_Visa_Sales_PK: 0);
          existingPaymentInCandidate.payment_In_Schema.remaining_Balance -=
            entryToUpdate?.azad_Visa_Sales_PKR ??
              0 - azad_Visa_Sales_PKR
              ? azad_Visa_Sales_PKR
              : 0;
          existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_Curr -=
            entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
              0 - azad_Visa_Sales_Rate_Oth_Cur
              ? azad_Visa_Sales_Rate_Oth_Cur
              : 0;
          existingPaymentInCandidate.payment_In_Schema.remaining_Curr -=
            entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
              0 - azad_Visa_Sales_Rate_Oth_Cur
              ? azad_Visa_Sales_Rate_Oth_Cur
              : 0;

          await existingPaymentInCandidate.save();
        }


      }

      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("candidate") && azad_Visa_Reference_Out.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await AzadCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadSupplier.findOne(
          {
            "payment_In_Schema.supplierName":
              azad_Visa_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadSupplier({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }


      if (entryToUpdate.azad_Visa_Reference_Out && entryToUpdate.azad_Visa_Reference_Out.toLowerCase().includes("candidate") && azad_Visa_Reference_Out.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await AzadCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await AzadAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              azad_Visa_Reference_Out_Name,
            "payment_In_Schema.status":
            'Open',
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new AzadAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: azad_Visa_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : azadPicture?azadPicture.secure_url:azad_Visa_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }
      }



      // For Ticket Suppliers Reference_In

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("supplier") && ticket_Reference_In.toLowerCase().includes("supplier") && entryToUpdate.ticket_Reference_In_Name === ticket_Reference_In_Name) {
       
        for(const supplier of ticketSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            let supplierInPersonIndex;
            supplierInPersonIndex =
            supplier.payment_Out_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = ticketPicture?ticketPicture.secure_url:supplierInPersonIndex.picture;
  
              supplierInPersonIndex.azad_Visa_Price_Out_PKR -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                  0 - azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_Out_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Purchase_PKR ??
                  0 - azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0 /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }
     
      }

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("supplier") && ticket_Reference_In.toLowerCase().includes("supplier") && entryToUpdate.ticket_Reference_In_Name !== ticket_Reference_In_Name) {

        for (const agent of ticketSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const supplier of ticketSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            const personToUpdate =
            supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_Out_Schema.persons =
              updatedPersons;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              supplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
        

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketSuppliers.findOne(
          {
            "payment_Out_Schema.supplierName":
              ticket_Reference_In_Name,
              "payment_Out_Schema.status":
              'Open',
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketSuppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
         
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("supplier") && ticket_Reference_In.toLowerCase().includes("agent")) {


        for (const agent of ticketSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const supplier of ticketSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            const personToUpdate =
            supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_Out_Schema.persons =
              updatedPersons;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              supplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
     


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
             ticket_Reference_In_Name,
              "payment_Out_Schema.status":
             "Open"
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("supplier") && ticket_Reference_In.toLowerCase().includes("candidate")) {

        for (const agent of ticketSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const supplier of ticketSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            const personToUpdate =
            supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_Out_Schema.persons =
              updatedPersons;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              supplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
       

        const existingPaymentOutAzadCandidate = await TicketCandidate.findOne(
          {
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new TicketCandidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
              total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }



      // For Ticket Agents Reference_In

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("agent") && ticket_Reference_In.toLowerCase().includes("agent") && entryToUpdate.ticket_Reference_In_Name === ticket_Reference_In_Name) {
       
        for(const agent of ticketAgents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            let supplierInPersonIndex;
          supplierInPersonIndex =
          agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === entryToUpdate.name &&
               
                person.pp_No === entryToUpdate.pp_No
            );
          // If the person is found, remove it from the persons array
          if (supplierInPersonIndex) {
            supplierInPersonIndex.name = name;
            supplierInPersonIndex.pp_No = pp_No;
            supplierInPersonIndex.entry_Mode = entry_Mode;
            supplierInPersonIndex.trade = trade;
            supplierInPersonIndex.country = country;
            supplierInPersonIndex.contact = contact;
            supplierInPersonIndex.picture = ticketPicture?ticketPicture.secure_url:supplierInPersonIndex.picture;

            supplierInPersonIndex.azad_Visa_Price_Out_PKR -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.remaining_Price -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.remaining_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;

                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Balance -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            await agent.save();
            break
          }
          }
        }
        
      }

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("agent") && ticket_Reference_In.toLowerCase().includes("agent") && entryToUpdate.ticket_Reference_In_Name !== ticket_Reference_In_Name) {

       for (const agent of ticketAgents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }
       
       for(const agent of ticketAgents){
        if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
          const personToUpdate =
          agent.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          agent.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            agent.payment_Out_Schema.persons =
            updatedPersons;
            agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.remaining_Balance -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;
            agent.payment_Out_Schema.remaining_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;

          // Save the changes
          await agent.save();
          break
        }
        }
       }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              ticket_Reference_In_Name,
              "payment_Out_Schema.status":
              'Open',
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
       
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("agent") && ticket_Reference_In.toLowerCase().includes("supplier")) {

        
       for (const agent of ticketAgents){
        if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
         let allCandPayments=agent.payment_Out_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }

       for(const agent of ticketAgents){
        if(agent.payment_Out_Schema &&agent.payment_Out_Schema.persons){
          const personToUpdate =
          agent.payment_Out_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          agent.payment_Out_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            agent.payment_Out_Schema.persons =
            updatedPersons;
            agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.remaining_Balance -=
            personToUpdate.azad_Visa_Price_Out_PKR || 0;
            agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;
            agent.payment_Out_Schema.remaining_Curr -=
            personToUpdate.azad_Visa_Price_Out_Curr || 0;

          // Save the changes
          await agent.save();
          break
        }
        }
       }
      


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketSuppliers.findOne(
          {
            "payment_Out_Schema.supplierName":
              ticket_Reference_In_Name,
              "payment_Out_Schema.status":
              'Open',
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          
          const newPaymentOutAzadSupplier = new TicketSuppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:ticket_Reference_In_Name,
              closing:0,
              persons: [
                {
                  name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("agent") && ticket_Reference_In.toLowerCase().includes("candidate")) {


        for (const agent of ticketAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Ticket Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for(const agent of ticketAgents){
          if(agent.payment_Out_Schema &&agent.payment_Out_Schema.persons){
            const personToUpdate =
            agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_Out_Schema.persons =
              updatedPersons;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              agent.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
       

        const existingPaymentOutAzadCandidate = await TicketCandidate.findOne(
          {
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new TicketCandidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
              total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }

      // For Ticket Candidate Reference_In 
      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("candidate") && ticket_Reference_In.toLowerCase().includes("candidate") && entryToUpdate.ticket_Reference_In_Name === ticket_Reference_In_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await TicketCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          (existingPaymentInCandidate.payment_Out_Schema.supplierName = name),
            (existingPaymentInCandidate.payment_Out_Schema.pp_No = pp_No),
            (existingPaymentInCandidate.payment_Out_Schema.entry_Mode =
              entry_Mode),
              (existingPaymentInCandidate.payment_Out_Schema.picture =
                ticketPicture?ticketPicture.secure_url:existingPaymentInCandidate.payment_Out_Schema.picture),
            (existingPaymentInCandidate.payment_Out_Schema.trade = trade),
            (existingPaymentInCandidate.payment_Out_Schema.country = country),
            (existingPaymentInCandidate.payment_Out_Schema.contact = contact),
            (existingPaymentInCandidate.payment_Out_Schema.company = company),
            (existingPaymentInCandidate.payment_Out_Schema.final_Status =
              final_Status),
            (existingPaymentInCandidate.payment_Out_Schema.flight_Date =
              flight_Date),
            (existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_PKR =
              azad_Visa_Purchase_PKR ?azad_Visa_Purchase_PKR:0 );
          
          existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_Curr =
            azad_Visa_Purchase_Rate_Oth_Cur ?azad_Visa_Purchase_Rate_Oth_Cur:0
          await existingPaymentInCandidate.save();
        }


      }

      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("candidate") && ticket_Reference_In.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await TicketCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketSuppliers.findOne(
          {
            "payment_Out_Schema.supplierName":
              ticket_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketSuppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }


      if (entryToUpdate.ticket_Reference_In && entryToUpdate.ticket_Reference_In.toLowerCase().includes("candidate") && ticket_Reference_In.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await TicketCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              ticket_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }
      }


      // For Azad Suppliers Reference_Out

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("supplier") && ticket_Reference_Out.toLowerCase().includes("supplier") && entryToUpdate.ticket_Reference_Out_Name === ticket_Reference_Out_Name) {
        
        for (const supplier of ticketSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            let supplierInPersonIndex;
            supplierInPersonIndex =
            supplier.payment_In_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = ticketPicture?ticketPicture.secure_url:supplierInPersonIndex.picture;
  
              supplierInPersonIndex.azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                  entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }
       
      }

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("supplier") && ticket_Reference_Out.toLowerCase().includes("supplier") && entryToUpdate.ticket_Reference_Out_Name !== ticket_Reference_Out_Name) {

        for (const agent of ticketSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const supplier of ticketSuppliers){
          if(supplier.payment_In_Schema &&supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
      

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketSuppliers.findOne(
          {
            "payment_In_Schema.supplierName":
             ticket_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketSuppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
      
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("supplier") && ticket_Reference_Out.toLowerCase().includes("agent")) {

        for (const agent of ticketSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const supplier of ticketSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
      


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              ticket_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("supplier") && ticket_Reference_Out.toLowerCase().includes("candidate")) {

        for (const agent of ticketSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for(const supplier of ticketSuppliers){
          if(supplier.payment_In_Schema &&supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
       

        const existingPaymentOutAzadCandidate = await TicketCandidate.findOne(
          {
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new TicketCandidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
              total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }



      // For Azad Agents Reference_Out

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("agent") && ticket_Reference_Out.toLowerCase().includes("agent") && entryToUpdate.ticket_Reference_Out_Name === ticket_Reference_Out_Name) {
      
        for(const agent of ticketAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            let supplierInPersonIndex;
            supplierInPersonIndex =
            agent.payment_In_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = ticketPicture?ticketPicture.secure_url:supplierInPersonIndex.picture;
  
  
              supplierInPersonIndex.azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
                  agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  agent.payment_In_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              await agent.save();
              break
            }
          }
        }
        
      }

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("agent") && ticket_Reference_Out.toLowerCase().includes("agent") && entryToUpdate.ticket_Reference_Out_Name !== ticket_Reference_Out_Name) {


        for (const agent of ticketAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of ticketAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              ticket_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
         
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("agent") && ticket_Reference_Out.toLowerCase().includes("supplier")) {

        for (const agent of ticketAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of ticketAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
      


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketSuppliers.findOne(
          {
            "payment_In_Schema.supplierName":
              ticket_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketSuppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("agent") && ticket_Reference_Out.toLowerCase().includes("candidate")) {

        for (const agent of ticketAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Ticket Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/tickets/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of ticketAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
       

        const existingPaymentOutAzadCandidate = await TicketCandidate.findOne(
          {
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new TicketCandidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
              total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }

      // For Azad Candidate Reference_Out
      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("candidate") && ticket_Reference_Out.toLowerCase().includes("candidate") && entryToUpdate.ticket_Reference_Out_Name === ticket_Reference_Out_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await TicketCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          (existingPaymentInCandidate.payment_In_Schema.supplierName = name),
            (existingPaymentInCandidate.payment_In_Schema.pp_No = pp_No),
            (existingPaymentInCandidate.payment_Out_Schema.entry_Mode =
              entry_Mode),
              (existingPaymentInCandidate.payment_Out_Schema.picture =
                ticketPicture?ticketPicture.secure_url:existingPaymentInCandidate.payment_Out_Schema.picture),
            (existingPaymentInCandidate.payment_In_Schema.trade = trade),
            (existingPaymentInCandidate.payment_In_Schema.country = country),
            (existingPaymentInCandidate.payment_In_Schema.contact = contact),
            (existingPaymentInCandidate.payment_In_Schema.company = company),
            (existingPaymentInCandidate.payment_In_Schema.final_Status =
              final_Status),
            (existingPaymentInCandidate.payment_In_Schema.flight_Date =
              flight_Date),
            (existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_PKR =
              azad_Visa_Sales_PKR ?azad_Visa_Sales_PKR:0);
         
          existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_Curr =
            azad_Visa_Sales_Rate_Oth_Cur ?azad_Visa_Sales_Rate_Oth_Cur:0
              
         

          await existingPaymentInCandidate.save();
        }


      }

      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("candidate") && ticket_Reference_Out.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await TicketCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketSuppliers.findOne(
          {
            "payment_In_Schema.supplierName":
              ticket_Reference_Out_Name,
              "payment_In_Schema.status":
              'Open',
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketSuppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }


      if (entryToUpdate.ticket_Reference_Out && entryToUpdate.ticket_Reference_Out.toLowerCase().includes("candidate") && ticket_Reference_Out.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await TicketCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await TicketAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              ticket_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new TicketAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: ticket_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : ticketPicture?ticketPicture.secure_url:ticket_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }
      }


      // For Visit Suppliers Reference_In

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("supplier") && visit_Reference_In.toLowerCase().includes("supplier") && entryToUpdate.visit_Reference_In_Name === visit_Reference_In_Name) {
        for (const supplier of visitSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            let supplierInPersonIndex;
          supplierInPersonIndex =
          supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === entryToUpdate.name &&
               
                person.pp_No === entryToUpdate.pp_No
            );
          // If the person is found, remove it from the persons array
          if (supplierInPersonIndex) {
            supplierInPersonIndex.name = name;
            supplierInPersonIndex.pp_No = pp_No;
            supplierInPersonIndex.entry_Mode = entry_Mode;
            supplierInPersonIndex.trade = trade;
            supplierInPersonIndex.country = country;
            supplierInPersonIndex.contact = contact;
            supplierInPersonIndex.picture = ticketPicture?ticketPicture.secure_url:supplierInPersonIndex.picture;

            supplierInPersonIndex.azad_Visa_Price_Out_PKR -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.remaining_Price -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.remaining_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;

                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
                supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
                supplier.payment_Out_Schema.remaining_Balance -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            await supplier.save();
            break
          }
          }
        }
      
      }

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("supplier") && visit_Reference_In.toLowerCase().includes("supplier") && entryToUpdate.visit_Reference_In_Name !== visit_Reference_In_Name) {

        for (const agent of visitSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for(const supplier of visitSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            const personToUpdate =
            supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_Out_Schema.persons =
              updatedPersons;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              supplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitSuppliers.findOne(
          {
            "payment_Out_Schema.supplierName":
              visit_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitSuppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,

                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
          
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("supplier") && visit_Reference_In.toLowerCase().includes("agent")) {

        for (const agent of visitSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const supplier of visitSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            const personToUpdate =
            supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_Out_Schema.persons =
              updatedPersons;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              supplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
      


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              visit_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("supplier") && visit_Reference_In.toLowerCase().includes("candidate")) {

        for (const agent of visitSuppliers){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Supplier :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const supplier of visitSuppliers){
          if(supplier.payment_Out_Schema && supplier.payment_Out_Schema.persons){
            const personToUpdate =
            supplier.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_Out_Schema.persons =
              updatedPersons;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              supplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              supplier.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
       

        const existingPaymentOutAzadCandidate = await VisitCandidate.findOne(
          {
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new VisitCandidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
              total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }



      // For Visit Agents Reference_In

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("agent") && visit_Reference_In.toLowerCase().includes("agent") && entryToUpdate.visit_Reference_In_Name === visit_Reference_In_Name) {
       for (const agent of visitAgents){
        if(agent.payment_Out_Schema &&agent.payment_Out_Schema.persons){
          let supplierInPersonIndex;
          supplierInPersonIndex =
          agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === entryToUpdate.name &&
               
                person.pp_No === entryToUpdate.pp_No
            );
          // If the person is found, remove it from the persons array
          if (supplierInPersonIndex) {
            supplierInPersonIndex.name = name;
            supplierInPersonIndex.pp_No = pp_No;
            supplierInPersonIndex.entry_Mode = entry_Mode;
            supplierInPersonIndex.trade = trade;
            supplierInPersonIndex.country = country;
            supplierInPersonIndex.contact = contact;
            supplierInPersonIndex.picture = visitPicture?visitPicture.secure_url:supplierInPersonIndex.picture;

            supplierInPersonIndex.azad_Visa_Price_Out_PKR -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.remaining_Price -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
            supplierInPersonIndex.remaining_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;

                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
                agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Curr -=
              entryToUpdate?.azad_Visa_Purchase_Rate_Oth_Cur ??
                0 - azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0 /* Adjust based on your needs */;
                agent.payment_Out_Schema.remaining_Balance -=
              entryToUpdate?.azad_Visa_Purchase_PKR ??
                0 - azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0 /* Adjust based on your needs */;
            await agent.save();
            break
          }
        }
       }
      
      }

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("agent") && visit_Reference_In.toLowerCase().includes("agent") && entryToUpdate.visit_Reference_In_Name !== visit_Reference_In_Name) {

        for (const agent of visitAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of visitAgents){
          if(agent.payment_Out_Schema && agent.payment_Out_Schema.persons){
            const personToUpdate =
            agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_Out_Schema.persons =
              updatedPersons;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              agent.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              visit_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
        
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("agent") && visit_Reference_In.toLowerCase().includes("supplier")) {

        for (const agent of visitAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for (const agent of visitAgents){
          if(agent.payment_Out_Schema &&agent.payment_Out_Schema.persons){
            const personToUpdate =
            agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_Out_Schema.persons =
              updatedPersons;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              agent.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
        


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitSuppliers.findOne(
          {
            "payment_Out_Schema.supplierName":
              visit_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitSuppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("agent") && visit_Reference_In.toLowerCase().includes("candidate")) {

        for (const agent of visitAgents){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentOut Visit Agent :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of visitAgents){
          if(agent.payment_Out_Schema &&agent.payment_Out_Schema.persons){
            const personToUpdate =
            agent.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_Out_Schema.persons =
              updatedPersons;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_Out_PKR || 0;
              agent.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;
              agent.payment_Out_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_Out_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
       

        const existingPaymentOutAzadCandidate = await VisitCandidate.findOne(
          {
            "payment_Out_Schema.supplierName": name,
            
            "payment_Out_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new VisitCandidate({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
              total_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }

      // For Visit Candidate Reference_In 
      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("candidate") && visit_Reference_In.toLowerCase().includes("candidate") && entryToUpdate.visit_Reference_In_Name === visit_Reference_In_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await VisitCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          (existingPaymentInCandidate.payment_Out_Schema.supplierName = name),
            (existingPaymentInCandidate.payment_Out_Schema.pp_No = pp_No),
            (existingPaymentInCandidate.payment_Out_Schema.entry_Mode =
              entry_Mode),
              (existingPaymentInCandidate.payment_Out_Schema.picture =
                visitPicture?visitPicture.secure_url:existingPaymentInCandidate.payment_Out_Schema.picture),
            (existingPaymentInCandidate.payment_Out_Schema.trade = trade),
            (existingPaymentInCandidate.payment_Out_Schema.country = country),
            (existingPaymentInCandidate.payment_Out_Schema.contact = contact),
            (existingPaymentInCandidate.payment_Out_Schema.company = company),
            (existingPaymentInCandidate.payment_Out_Schema.final_Status =
              final_Status),
            (existingPaymentInCandidate.payment_Out_Schema.flight_Date =
              flight_Date),
            (existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_PKR =
              azad_Visa_Purchase_PKR ?azad_Visa_Purchase_PKR:0);
         
          existingPaymentInCandidate.payment_Out_Schema.total_Visa_Price_Out_Curr=
          azad_Visa_Purchase_Rate_Oth_Cur ?azad_Visa_Purchase_Rate_Oth_Cur:0   
          await existingPaymentInCandidate.save();
        }


      }

      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("candidate") && visit_Reference_In.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await VisitCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitSuppliers.findOne(
          {
            "payment_Out_Schema.supplierName":
              visit_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitSuppliers({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }


      if (entryToUpdate.visit_Reference_In && entryToUpdate.visit_Reference_In.toLowerCase().includes("candidate") && visit_Reference_In.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await VisitCandidate.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.name,
          "payment_Out_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_Out_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_Out_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitAgents.findOne(
          {
            "payment_Out_Schema.supplierName":
              visit_Reference_In_Name,
              "payment_Out_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitAgents({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_In_Name,
              total_Azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,
              remaining_Balance: azad_Visa_Purchase_PKR
                ? azad_Visa_Purchase_PKR
                : 0,

              total_Azad_Visa_Price_Out_Curr:
                azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                    ? azad_Visa_Purchase_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Purchase_Rate_Oth_Cur
                      ? azad_Visa_Purchase_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_PKR +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Balance +=
              azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0;

            existingPaymentOutAzadSupplier.payment_Out_Schema.total_Azad_Visa_Price_Out_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_Out_Schema.remaining_Curr +=
              azad_Visa_Purchase_Rate_Oth_Cur
                ? azad_Visa_Purchase_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_Out_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_Out_PKR: azad_Visa_Purchase_PKR
                  ? azad_Visa_Purchase_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Purchase_Rate_Oth_Cur
                  ? azad_Visa_Purchase_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Azad_Visa_Price_Out_PKR":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,
                "payment_Out_Schema.remaining_Balance":
                  azad_Visa_Purchase_PKR ? azad_Visa_Purchase_PKR : 0,

                "payment_Out_Schema.total_Azad_Visa_Price_Out_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
                "payment_Out_Schema.remaining_Curr":
                  azad_Visa_Purchase_Rate_Oth_Cur
                    ? azad_Visa_Purchase_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }
      }


      // For Visit Suppliers Reference_Out

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("supplier") && visit_Reference_Out.toLowerCase().includes("supplier") && entryToUpdate.visit_Reference_Out_Name === visit_Reference_Out_Name) {
        for (const supplier of visitSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            let supplierInPersonIndex;
            supplierInPersonIndex =
            supplier.payment_In_Schema.persons.find(
                (person) =>
                  person.name === entryToUpdate.name &&
                 
                  person.pp_No === entryToUpdate.pp_No
              );
            // If the person is found, remove it from the persons array
            if (supplierInPersonIndex) {
              supplierInPersonIndex.name = name;
              supplierInPersonIndex.pp_No = pp_No;
              supplierInPersonIndex.entry_Mode = entry_Mode;
              supplierInPersonIndex.trade = trade;
              supplierInPersonIndex.country = country;
              supplierInPersonIndex.contact = contact;
              supplierInPersonIndex.picture = visitPicture?visitPicture.secure_url:supplierInPersonIndex.picture;
  
              supplierInPersonIndex.azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Price -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
              supplierInPersonIndex.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
  
                  supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Curr -=
                entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
                  0 - azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0 /* Adjust based on your needs */;
                  supplier.payment_In_Schema.remaining_Balance -=
                entryToUpdate?.azad_Visa_Sales_PKR ??
                  0 - azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0 /* Adjust based on your needs */;
              await supplier.save();
              break
            }
          }
        }
      
      }

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("supplier") && visit_Reference_Out.toLowerCase().includes("supplier") && entryToUpdate.visit_Reference_Out_Name !== visit_Reference_Out_Name) {

        for (const agent of visitSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for(const supplier of visitSuppliers){
          if(supplier.payment_In_Schema &&supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
      

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitSuppliers.findOne(
          {
            "payment_In_Schema.supplierName":
              visit_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitSuppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
     
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("supplier") && visit_Reference_Out.toLowerCase().includes("agent")) {

        for (const agent of visitSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }
         for(const supplier of visitSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
       


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              visit_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,

                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("supplier") && visit_Reference_Out.toLowerCase().includes("candidate")) {

        for (const agent of visitSuppliers){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Supplier :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const supplier of visitSuppliers){
          if(supplier.payment_In_Schema && supplier.payment_In_Schema.persons){
            const personToUpdate =
            supplier.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            supplier.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              supplier.payment_In_Schema.persons =
              updatedPersons;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              supplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              supplier.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await supplier.save();
            break
          }
          }
         }
        

        const existingPaymentOutAzadCandidate = await VisitCandidate.findOne(
          {
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new VisitCandidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
              total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }



      // For Visit Agents Reference_Out

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("agent") && visit_Reference_Out.toLowerCase().includes("agent") && entryToUpdate.visit_Reference_Out_Name === visit_Reference_Out_Name) {
    for (const agent of visitAgents){
      if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
        let supplierInPersonIndex;
        supplierInPersonIndex =
        agent.payment_In_Schema.persons.find(
            (person) =>
              person.name === entryToUpdate.name &&
             
              person.pp_No === entryToUpdate.pp_No
          );
        // If the person is found, remove it from the persons array
        if (supplierInPersonIndex) {
          supplierInPersonIndex.name = name;
          supplierInPersonIndex.pp_No = pp_No;
          supplierInPersonIndex.entry_Mode = entry_Mode;
          supplierInPersonIndex.trade = trade;
          supplierInPersonIndex.country = country;
          supplierInPersonIndex.contact = contact;
          supplierInPersonIndex.picture = visitPicture?visitPicture.secure_url:supplierInPersonIndex.picture;

          supplierInPersonIndex.azad_Visa_Price_In_PKR -=
            entryToUpdate?.azad_Visa_Sales_PKR ??
              0 - azad_Visa_Sales_PKR
              ? azad_Visa_Sales_PKR
              : 0 /* Adjust based on your needs */;
          supplierInPersonIndex.remaining_Price -=
            entryToUpdate?.azad_Visa_Sales_PKR ??
              0 - azad_Visa_Sales_PKR
              ? azad_Visa_Sales_PKR
              : 0 /* Adjust based on your needs */;
          supplierInPersonIndex.azad_Visa_Price_Out_Curr -=
            entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
              0 - azad_Visa_Sales_Rate_Oth_Cur
              ? azad_Visa_Sales_Rate_Oth_Cur
              : 0 /* Adjust based on your needs */;
          supplierInPersonIndex.remaining_Curr -=
            entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
              0 - azad_Visa_Sales_Rate_Oth_Cur
              ? azad_Visa_Sales_Rate_Oth_Cur
              : 0 /* Adjust based on your needs */;

              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
            entryToUpdate?.azad_Visa_Sales_PKR ??
              0 - azad_Visa_Sales_PKR
              ? azad_Visa_Sales_PKR
              : 0 /* Adjust based on your needs */;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
            entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
              0 - azad_Visa_Sales_Rate_Oth_Cur
              ? azad_Visa_Sales_Rate_Oth_Cur
              : 0 /* Adjust based on your needs */;
              agent.payment_In_Schema.remaining_Curr -=
            entryToUpdate?.azad_Visa_Sales_Rate_Oth_Cur ??
              0 - azad_Visa_Sales_Rate_Oth_Cur
              ? azad_Visa_Sales_Rate_Oth_Cur
              : 0 /* Adjust based on your needs */;
              agent.payment_In_Schema.remaining_Balance -=
            entryToUpdate?.azad_Visa_Sales_PKR ??
              0 - azad_Visa_Sales_PKR
              ? azad_Visa_Sales_PKR
              : 0 /* Adjust based on your needs */;
          await agent.save();
          break
        }
      }
    }
       
      }

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("agent") && visit_Reference_Out.toLowerCase().includes("agent") && entryToUpdate.visit_Reference_Out_Name !== visit_Reference_Out_Name) {

        for (const agent of visitAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of visitAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
       

        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              visit_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();
        
        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("agent") && visit_Reference_Out.toLowerCase().includes("supplier")) {


        for (const agent of visitAgents){
          if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
           let allCandPayments=agent.payment_In_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
                break;
              }
            }
           }
          }
         }

         for (const agent of visitAgents){
          if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
            const personToUpdate =
            agent.payment_In_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
            agent.payment_In_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

              agent.payment_In_Schema.persons =
              updatedPersons;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.remaining_Balance -=
              personToUpdate.azad_Visa_Price_In_PKR || 0;
              agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;
              agent.payment_In_Schema.remaining_Curr -=
              personToUpdate.azad_Visa_Price_In_Curr || 0;

            // Save the changes
            await agent.save();
            break
          }
          }
         }
       


        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitSuppliers.findOne(
          {
            "payment_In_Schema.supplierName":
              visit_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitSuppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("agent") && visit_Reference_Out.toLowerCase().includes("candidate")) {


         for (const agent of visitAgents){
        if(agent.payment_In_Schema&&agent.payment_In_Schema.candPayments){
         let allCandPayments=agent.payment_In_Schema.candPayments
         for (const payment of allCandPayments){
          let allPayments=payment.payments
          for (const candidatePayment of allPayments){
            if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
              return res.status(400).json({message:`You have made payments for this Candidate with PaymentIn Visit Agent :${agent.payment_In_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/visits/cand_vise_payment_details'})
              break;
            }
          }
         }
        }
       }
       for(const agent of visitAgents){
        if(agent.payment_In_Schema && agent.payment_In_Schema.persons){
          const personToUpdate =
          agent.payment_In_Schema.persons.find(
            (person) =>
              person.name === name &&
              person.entry_Mode === entry_Mode &&
              person.pp_No === pp_No
          );
        if (personToUpdate) {
          const updatedPersons =
          agent.payment_In_Schema.persons.filter(
              (person) =>
                !(
                  person.name === name &&
                  person.entry_Mode === entry_Mode &&
                  person.pp_No === pp_No
                )
            );

            agent.payment_In_Schema.persons =
            updatedPersons;
            agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
            personToUpdate.azad_Visa_Price_In_PKR || 0;
            agent.payment_In_Schema.remaining_Balance -=
            personToUpdate.azad_Visa_Price_In_PKR || 0;
            agent.payment_In_Schema.total_Azad_Visa_Price_In_PKR -=
            personToUpdate.azad_Visa_Price_In_Curr || 0;
            agent.payment_In_Schema.remaining_Curr -=
            personToUpdate.azad_Visa_Price_In_Curr || 0;

          // Save the changes
          await agent.save();
          break
        }
        }
       }
        

        const existingPaymentOutAzadCandidate = await VisitCandidate.findOne(
          {
            "payment_In_Schema.supplierName": name,
            
            "payment_In_Schema.pp_No": pp_No,
          }
        )

        if (!existingPaymentOutAzadCandidate) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadCandidate = new VisitCandidate({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: name,
              picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
              total_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Visa_Price_In_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              pp_No: pp_No,
              entry_Mode: entry_Mode,
              company: company,
              trade: trade,
              country: country,
              contact: contact,
              final_Status: final_Status,
              flight_Date: flight_Date,
            },
          });

          await newPaymentOutAzadCandidate.save();
        }
      }

      // For Azad Candidate Reference_Out
      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("candidate") && visit_Reference_Out.toLowerCase().includes("candidate") && entryToUpdate.visit_Reference_Out_Name === visit_Reference_Out_Name) {

        // Check if the supplier with the given name and entry mode exists
        const existingPaymentInCandidate = await VisitCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });

        if (existingPaymentInCandidate) {
          (existingPaymentInCandidate.payment_In_Schema.supplierName = name),
            (existingPaymentInCandidate.payment_In_Schema.pp_No = pp_No),
            (existingPaymentInCandidate.payment_Out_Schema.entry_Mode =
              entry_Mode),
              (existingPaymentInCandidate.payment_Out_Schema.picture =
                visitPicture?visitPicture.secure_url:existingPaymentInCandidate.payment_Out_Schema.picture),
            (existingPaymentInCandidate.payment_In_Schema.trade = trade),
            (existingPaymentInCandidate.payment_In_Schema.country = country),
            (existingPaymentInCandidate.payment_In_Schema.contact = contact),
            (existingPaymentInCandidate.payment_In_Schema.company = company),
            (existingPaymentInCandidate.payment_In_Schema.final_Status =
              final_Status),
            (existingPaymentInCandidate.payment_In_Schema.flight_Date =
              flight_Date),
            (existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_PKR =
             azad_Visa_Sales_PKR ?azad_Visa_Sales_PKR:0);

          existingPaymentInCandidate.payment_In_Schema.total_Visa_Price_In_Curr=
          azad_Visa_Sales_Rate_Oth_Cur ?azad_Visa_Sales_Rate_Oth_Cur:0;
          await existingPaymentInCandidate.save();
        }


      }

      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("candidate") && visit_Reference_Out.toLowerCase().includes("supplier")) {
        const existingPaymentInCandidate = await VisitCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitSuppliers.findOne(
          {
            "payment_In_Schema.supplierName":
              visit_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitSuppliers({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }

      }


      if (entryToUpdate.visit_Reference_Out && entryToUpdate.visit_Reference_Out.toLowerCase().includes("candidate") && visit_Reference_Out.toLowerCase().includes("agent")) {
        const existingPaymentInCandidate = await VisitCandidate.findOne({
          "payment_In_Schema.supplierName": entryToUpdate.name,
          "payment_In_Schema.entry_Mode": entryToUpdate.entry_Mode,
          "payment_In_Schema.pp_No": entryToUpdate.pp_No,
        });
        if (existingPaymentInCandidate) {
          existingPaymentInCandidate.payment_In_Schema = null
          await existingPaymentInCandidate.save()
        }



        // Check if the supplier with the given name exists
        const existingPaymentOutAzadSupplier = await VisitAgents.findOne(
          {
            "payment_In_Schema.supplierName":
              visit_Reference_Out_Name,
              "payment_In_Schema.status":
              "Open",
          }
        );

        if (!existingPaymentOutAzadSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutAzadSupplier = new VisitAgents({
            payment_In_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: visit_Reference_Out_Name,
              total_Azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,
              remaining_Balance: azad_Visa_Sales_PKR
                ? azad_Visa_Sales_PKR
                : 0,

              total_Azad_Visa_Price_In_PKR:
                azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
              remaining_Curr: azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0,

              curr_Country: cur_Country_One,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                  pp_No,
                  entry_Mode,
                  trade,
                  contact,
                  country,
                  azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                    ? azad_Visa_Sales_PKR
                    : 0,
                  azad_Visa_Price_Out_Curr:
                    azad_Visa_Sales_Rate_Oth_Cur
                      ? azad_Visa_Sales_Rate_Oth_Cur
                      : 0,
                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutAzadSupplier.save();

        } else {
          // If the supplier exists, check if the person already exists in the persons array of payment_In_Schema
          const existingPersonIndex =
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            // If the person already exists, update visa_Sales_Rate_PKR and total_Visa_Price_In_PKR
            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Balance +=
              azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0;

            existingPaymentOutAzadSupplier.payment_In_Schema.total_Azad_Visa_Price_In_PKR +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
            existingPaymentOutAzadSupplier.payment_In_Schema.remaining_Curr +=
              azad_Visa_Sales_Rate_Oth_Cur
                ? azad_Visa_Sales_Rate_Oth_Cur
                : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutAzadSupplier.payment_In_Schema.persons.push(
              {
                name,
                picture : visitPicture?visitPicture.secure_url:visit_Section_Picture,
                pp_No,
                entry_Mode,
                trade,
                country,
                contact,
                azad_Visa_Price_In_PKR: azad_Visa_Sales_PKR
                  ? azad_Visa_Sales_PKR
                  : 0,
                azad_Visa_Price_Out_Curr: azad_Visa_Sales_Rate_Oth_Cur
                  ? azad_Visa_Sales_Rate_Oth_Cur
                  : 0,
                company: company,
                final_Status: final_Status,
                flight_Date: flight_Date,
                entry_Date: new Date().toISOString().split("T")[0],
              }
            );

            // Update total_Visa_Price_In_PKR and other fields using $inc
            await existingPaymentOutAzadSupplier.updateOne({
              $inc: {
                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,
                "payment_In_Schema.remaining_Balance":
                  azad_Visa_Sales_PKR ? azad_Visa_Sales_PKR : 0,

                "payment_In_Schema.total_Azad_Visa_Price_In_PKR":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
                "payment_In_Schema.remaining_Curr":
                  azad_Visa_Sales_Rate_Oth_Cur
                    ? azad_Visa_Sales_Rate_Oth_Cur
                    : 0,
              },
            });
          }

          await existingPaymentOutAzadSupplier.save();
        }
      }


      // For Protector Reference_In
      if (entryToUpdate.protector_Reference_In && entryToUpdate.protector_Reference_In.toLowerCase().includes("supplier") && protector_Reference_In.toLowerCase().includes("supplier") && entryToUpdate.protector_Reference_In_Name === protector_Reference_In_Name) {
        //Reference In for Suppliers 
        const existingSupplierPaymentIn = await Protector.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.protector_Reference_In_Name,
        });
        // Find the index of the person in the persons array
        if (existingSupplierPaymentIn) {

          const supplierInPersonIndex =
            existingSupplierPaymentIn.payment_Out_Schema.persons.find(
              (person) =>
                person.name === entryToUpdate.name &&
               
                person.pp_No === entryToUpdate.pp_No
            );
          // If the person is found, remove it from the persons array
          if (supplierInPersonIndex) {

            supplierInPersonIndex.name = name;
            supplierInPersonIndex.pp_No = pp_No;
            supplierInPersonIndex.entry_Mode = entry_Mode;
            supplierInPersonIndex.trade = trade;
            supplierInPersonIndex.country = country;
            supplierInPersonIndex.picture = mainPicture?mainPicture.secure_url:supplierInPersonIndex.picture;

            // Calculate the differences
            const protector_Price_In_Diff = entryToUpdate.protector_Price_In - protector_Price_In
            const protector_Price_In_Oth_Cur_Diff = entryToUpdate.protector_Price_In_Oth_Cur - protector_Price_In_Oth_Cur
            supplierInPersonIndex.protector_Out_PKR -= protector_Price_In_Diff
            supplierInPersonIndex.protector_Out_Curr -= protector_Price_In_Oth_Cur_Diff
            existingSupplierPaymentIn.payment_Out_Schema.total_Protector_Price_Out_PKR -= protector_Price_In_Diff;
            existingSupplierPaymentIn.payment_Out_Schema.remaining_Balance -= protector_Price_In_Diff;
            existingSupplierPaymentIn.payment_Out_Schema.total_Protector_Price_Out_Curr -= protector_Price_In_Oth_Cur_Diff;
            existingSupplierPaymentIn.payment_Out_Schema.remaining_Curr -= protector_Price_In_Oth_Cur_Diff;

            await existingSupplierPaymentIn.save()

          }

        }


      }

      if (entryToUpdate.protector_Reference_In && entryToUpdate.protector_Reference_In.toLowerCase() === "protector" && protector_Reference_In.toLowerCase() === "Protector" && entryToUpdate.protector_Reference_In_Name !== protector_Reference_In_Name) {
        for (const agent of protectors){
          if(agent.payment_Out_Schema&&agent.payment_Out_Schema.candPayments){
           let allCandPayments=agent.payment_Out_Schema.candPayments
           for (const payment of allCandPayments){
            let allPayments=payment.payments
            for (const candidatePayment of allPayments){
              if(candidatePayment.cand_Name.trim().toLowerCase()===entryToUpdate.name.trim().toLowerCase()&&candidatePayment.pp_No.trim().toLowerCase()===entryToUpdate.pp_No.trim().toLowerCase()){
                return res.status(400).json({message:`You have made payments for this Candidate with Protector :${agent.payment_Out_Schema.supplierName} having Invoice NO:${payment.invoice}`,redirect:'/rozgar/protector/details'})
                break;
              }
            }
           }
          }
         }
        const existingSupplierPaymentIn = await Protector.findOne({
          "payment_Out_Schema.supplierName": entryToUpdate.protector_Reference_In_Name,
        });

        if (existingSupplierPaymentIn) {
          const personToUpdate =
            existingSupplierPaymentIn.payment_Out_Schema.persons.find(
              (person) =>
                person.name === name &&
                person.entry_Mode === entry_Mode &&
                person.pp_No === pp_No
            );
          if (personToUpdate) {
            const updatedPersons =
              existingSupplierPaymentIn.payment_Out_Schema.persons.filter(
                (person) =>
                  !(
                    person.name === name &&
                    person.entry_Mode === entry_Mode &&
                    person.pp_No === pp_No
                  )
              );

            existingSupplierPaymentIn.payment_Out_Schema.persons =
              updatedPersons;
            existingSupplierPaymentIn.payment_Out_Schema.total_Protector_Price_Out_PKR -=
              personToUpdate.visa_Price_Out_PKR || 0;
            existingSupplierPaymentIn.payment_Out_Schema.remaining_Balance -=
              personToUpdate.visa_Price_Out_PKR || 0;
            existingSupplierPaymentIn.payment_Out_Schema.total_Protector_Price_Out_Curr -=
              personToUpdate.protector_Out_Curr || 0;
            existingSupplierPaymentIn.payment_Out_Schema.remaining_Curr -=
              personToUpdate.protector_Out_Curr || 0;

            // Save the changes
            await existingSupplierPaymentIn.save();
          }
        }

        // Check if the supplier with the given name exists
        const existingPaymentOutSupplier = await Protector.findOne({
          "payment_Out_Schema.supplierName": protector_Reference_In_Name,
          "payment_Out_Schema.status": "Open",
        });

        if (!existingPaymentOutSupplier) {
          // If the supplier does not exist, create a new one
          const newPaymentOutSupplier = new Protector({
            payment_Out_Schema: {
              supplier_Id: entryToUpdate._id,
              supplierName: protector_Reference_In_Name,
              total_Protector_Price_Out_PKR: protector_Price_In
                ? protector_Price_In
                : 0,
              remaining_Balance: protector_Price_In
                ? protector_Price_In
                : 0,

              total_Protector_Price_Out_Curr: protector_Price_In_Oth_Cur
                ? protector_Price_In_Oth_Cur
                : 0,
              remaining_Curr: protector_Price_In_Oth_Cur
                ? protector_Price_In_Oth_Cur
                : 0,

              curr_Country: cur_Country_Two,
              opening:0,
              closing:0,
              persons: [
                {
                  name,
                  picture: mainPicture?mainPicture.secure_url:picture,
                  pp_No,
                  entry_Mode,
                  contact,
                  trade,
                  country,
                  protector_Out_PKR: protector_Price_In
                    ? protector_Price_In
                    : 0,

                  protector_Out_Curr: protector_Price_In_Oth_Cur
                    ? protector_Price_In_Oth_Cur
                    : 0,


                  company: company,
                  final_Status: final_Status,
                  flight_Date: flight_Date,
                  entry_Date: new Date().toISOString().split("T")[0],
                },
              ],
            },
          });

          await newPaymentOutSupplier.save();

        } else {
          const existingPersonIndex =
            existingPaymentOutSupplier.payment_Out_Schema.persons.findIndex(
              (person) =>
                person.pp_No === pp_No &&
                person.entry_Mode === entry_Mode &&
                person.name === name
            );

          if (existingPersonIndex !== -1) {
            existingPaymentOutSupplier.payment_Out_Schema.total_Protector_Price_Out_PKR +=
              protector_Price_In ? protector_Price_In : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Balance +=
              protector_Price_In ? protector_Price_In : 0;

            existingPaymentOutSupplier.payment_Out_Schema.total_Protector_Price_Out_Curr +=
              protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0;
            existingPaymentOutSupplier.payment_Out_Schema.remaining_Curr +=
              protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0;
          } else {
            // If the person does not exist, add them to the persons array
            existingPaymentOutSupplier.payment_Out_Schema.persons.push({
              name,
              picture: mainPicture?mainPicture.secure_url:picture,
              pp_No,
              entry_Mode,
              trade,
              contact,
              country,
              protector_Out_PKR: protector_Price_In
                ? protector_Price_In
                : 0,
              protector_Out_Curr: protector_Price_In_Oth_Cur
                ? protector_Price_In_Oth_Cur
                : 0,

              company: company,
              final_Status: final_Status,
              flight_Date: flight_Date,
              entry_Date: new Date().toISOString().split("T")[0],
            });

            // Update total_Visa_In_Price_PKR and other fields using $inc
            await existingPaymentOutSupplier.updateOne({
              $inc: {
                "payment_Out_Schema.total_Protector_Price_Out_PKR":
                  protector_Price_In ? protector_Price_In : 0,
                "payment_Out_Schema.remaining_Balance": protector_Price_In
                  ? protector_Price_In
                  : 0,

                "payment_Out_Schema.total_Protector_Price_Out_Curr":
                  protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0,
                "payment_Out_Schema.remaining_Curr":
                  protector_Price_In_Oth_Cur ? protector_Price_In_Oth_Cur : 0,
              },
            });
          }

          await existingPaymentOutSupplier.save();

        }
      }

      // 
      // Update entry fields
      entryToUpdate.reference_Out = reference_Out;
      entryToUpdate.reference_In = reference_In;
      entryToUpdate.name = name;
      entryToUpdate.pp_No = pp_No;
      entryToUpdate.trade = trade;
      entryToUpdate.company = company;
      entryToUpdate.contact = contact;
      entryToUpdate.country = country;
      entryToUpdate.flight_Date = flight_Date;
      entryToUpdate.final_Status = final_Status;
      entryToUpdate.remarks = remarks;
      entryToUpdate.entry_Mode = entry_Mode;
      entryToUpdate.reference_Out_Name = reference_Out_Name;
      entryToUpdate.visa_Sales_Rate_PKR = visa_Sales_Rate_PKR;
      entryToUpdate.visa_Sale_Rate_Oth_Cur = visa_Sale_Rate_Oth_Cur;
      entryToUpdate.cur_Country_One = cur_Country_One;
      entryToUpdate.reference_In_Name = reference_In_Name;
      entryToUpdate.visa_Purchase_Rate_PKR = visa_Purchase_Rate_PKR;
      entryToUpdate.visa_Purchase_Rate_Oth_Cur = visa_Purchase_Rate_Oth_Cur;
      entryToUpdate.cur_Country_Two = cur_Country_Two;

      entryToUpdate.picture = picture;

      entryToUpdate.visit_Reference_In = visit_Reference_In;
      entryToUpdate.visit_Reference_Out = visit_Reference_Out;
      entryToUpdate.visit_Reference_In_Name = visit_Reference_In_Name;
      entryToUpdate.visit_Reference_Out_Name = visit_Reference_Out_Name;
      entryToUpdate.visit_Sales_PKR = visit_Sales_PKR;
      entryToUpdate.visit_Sales_Cur = visit_Sales_Cur;
      entryToUpdate.visit_Purchase_Rate_PKR = visit_Purchase_Rate_PKR;
      entryToUpdate.visit_Purchase_Cur = visit_Purchase_Cur;
      entryToUpdate.visit_Sales_Rate_Oth_Curr = visit_Sales_Rate_Oth_Curr;
      entryToUpdate.visit_Purchase_Rate_Oth_Cur = visit_Purchase_Rate_Oth_Cur;
      entryToUpdate.visit_Section_Picture = visit_Section_Picture;

      entryToUpdate.ticket_Reference_In = ticket_Reference_In;
      entryToUpdate.ticket_Reference_Out = ticket_Reference_Out;
      entryToUpdate.ticket_Reference_In_Name = ticket_Reference_In_Name;
      entryToUpdate.ticket_Reference_Out_Name = ticket_Reference_Out_Name;
      entryToUpdate.ticket_Sales_PKR = ticket_Sales_PKR;
      entryToUpdate.ticket_Sales_Cur = ticket_Sales_Cur;
      entryToUpdate.ticket_Purchase_PKR = ticket_Purchase_PKR;
      entryToUpdate.ticket_Purchase_Cur = ticket_Purchase_Cur;
      entryToUpdate.ticket_Sales_Rate_Oth_Cur = ticket_Sales_Rate_Oth_Cur;
      entryToUpdate.ticket_Purchase_Rate_Oth_Cur = ticket_Purchase_Rate_Oth_Cur;
      entryToUpdate.ticket_Section_Picture = ticket_Section_Picture;

      entryToUpdate.azad_Visa_Reference_In = azad_Visa_Reference_In;
      entryToUpdate.azad_Visa_Reference_Out = azad_Visa_Reference_Out;
      entryToUpdate.azad_Visa_Reference_In_Name = azad_Visa_Reference_In_Name;
      entryToUpdate.azad_Visa_Reference_Out_Name = azad_Visa_Reference_Out_Name;
      entryToUpdate.azad_Visa_Sales_PKR = azad_Visa_Sales_PKR;
      entryToUpdate.azad_Visa_Sales_Cur = azad_Visa_Sales_Cur;
      entryToUpdate.azad_Visa_Purchase_PKR = azad_Visa_Purchase_PKR;
      entryToUpdate.azad_Visa_Purchase_Cur = azad_Visa_Purchase_Cur;
      entryToUpdate.azad_Visa_Sales_Rate_Oth_Cur = azad_Visa_Sales_Rate_Oth_Cur;
      entryToUpdate.azad_Visa_Purchase_Rate_Oth_Cur =
        azad_Visa_Purchase_Rate_Oth_Cur;
      entryToUpdate.azad_Visa_Section_Picture = azad_Visa_Section_Picture;
      entryToUpdate.protector_Price_In = protector_Price_In;
      entryToUpdate.protector_Price_In_Oth_Cur = protector_Price_In_Oth_Cur;
      entryToUpdate.protector_Reference_In = protector_Reference_In;
      entryToUpdate.protector_Reference_In_Name = protector_Reference_In_Name;
      entryToUpdate.protector_Price_Out = protector_Price_Out;

      // Save the updated entry to the database

      await entryToUpdate.save();
      res
        .status(200)
        .json({ data: entryToUpdate, message: "Entry updated successfully" });
    }
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: error.message });
  }
}


module.exports = {
  addEntry,
  getEntry,
  delMultipleEntries,
  delEntry,
  updateEntry,
  addMultipleEnteries,
}
